[{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "%%FROM%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "rabbitmq-plugins enable --offline rabbitmq_management"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \terl -noinput -eval ' \t\t{ ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) -> \t\t\tcase Acc of \t\t\t\t\"\" -> \t\t\t\t\tcase lists:suffix(\"/rabbitmqadmin\", FileInArchive) of \t\t\t\t\t\ttrue -> GetBin(); \t\t\t\t\t\tfalse -> Acc \t\t\t\t\tend; \t\t\t\t_ -> Acc \t\t\tend \t\tend, \"\", init:get_plain_arguments()), \t\tio:format(\"~s\", [ AdminBin ]), \t\tinit:stop(). \t' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin; \t[ -s /usr/local/bin/rabbitmqadmin ]; \tchmod +x /usr/local/bin/rabbitmqadmin; \t%%INSTALL_PYTHON%%; \trabbitmqadmin --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "15671"
                }
            ],
            "type": "DOCKER-EXPOSE"
        }
    ],
    "meta_info": "./dataset/source/017789060b7322901b9e742ff3e86b9f0ba5aea2.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "26f980a1dd0d93a38c4a5b7e397210a761efed1f87caadc1a7066bb8ab12efab"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\\julia\\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install (\"julia --version\") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/022a2698c17c0995714d128764de82f1d043e494.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A \t4D1BB29D63D98E422B2113B19334A25F8507EFA5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo 'deb https://repo.percona.com/apt stretch main' > /etc/apt/sources.list.d/percona.list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.7.23-25-1.stretch"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\tfor key in \t\t\tpercona-server-server/root_password \t\t\tpercona-server-server/root_password_again \t\t\t\"percona-server-server-$PERCONA_MAJOR/root-pass\" \t\t\t\"percona-server-server-$PERCONA_MAJOR/re-root-pass\" \t\t; do \t\t\techo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused'; \t\tdone; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\tpercona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/log/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0260b6233ca8f1db14f7626fdacdaea2b661e199.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install --no-cache-dir virtualenv"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/027de8dd9fb86c52209cb18af272ab6958a5eae5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "buster-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/0317161148e8520e89b3b8e508f1772876bb67b6.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ruby"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "2.6-slim-stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r redmine && useradd -r -g redmine redmine"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\twget \t\t\t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tgsfonts \t\timagemagick \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdirmngr \t\tgnupg \t; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \t\texport GOSU_VERSION='1.11'; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\texport TINI_VERSION='0.18.0'; \twget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch\"; \twget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5; \tgpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc; \tchmod +x /usr/local/bin/tini; \ttini -h; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RAILS_ENV"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "production"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/redmine"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/home/redmine"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t[ ! -d \"$HOME\" ]; \tmkdir -p \"$HOME\"; \tchown redmine:redmine \"$HOME\"; \tchmod 1777 \"$HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDMINE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDMINE_DOWNLOAD_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "35a4f60b35fed2b10d14cb12fc8aef50"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "wget -O redmine.tar.gz \"https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz\" \t&& echo \"$REDMINE_DOWNLOAD_MD5 redmine.tar.gz\" | md5sum -c - \t&& tar -xvf redmine.tar.gz --strip-components=1 \t&& rm redmine.tar.gz files/delete.me log/delete.me \t&& mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids \t&& chown -R redmine:redmine ./ \t&& echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb \t&& chmod -R ugo=rwX config db sqlite \t&& find log tmp -type d -exec chmod 1777 '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibmariadbclient-dev \t\tlibpq-dev \t\tlibsqlite3-dev \t\tmake \t\tpatch \t\t\t\tlibssl1.0-dev \t; \trm -rf /var/lib/apt/lists/*; \t\twget -O freetds.tar.bz2 'http://www.freetds.org/files/stable/freetds-1.00.91.tar.bz2'; \techo '8d71f9f29be0fe0637e443dd3807b3fd *freetds.tar.bz2' | md5sum -c -; \tmkdir freetds; \ttar -xf freetds.tar.bz2 -C freetds --strip-components=1; \trm freetds.tar.bz2; \t( cd freetds && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && ./configure --build=\"$gnuArch\" --enable-silent-rules && make -j \"$(nproc)\" && make -C src install && make -C include install ); \trm -rf freetds; \tgosu redmine bundle config build.tiny_tds --enable-system-freetds; \t\tgosu redmine bundle install --without development test; \tfor adapter in mysql2 postgresql sqlserver sqlite3; do \t\techo \"$RAILS_ENV:\" > ./config/database.yml; \t\techo \"  adapter: $adapter\" >> ./config/database.yml; \t\tgosu redmine bundle install --without development test; \t\tcp Gemfile.lock \"Gemfile.lock.${adapter}\"; \tdone; \trm ./config/database.yml; \tchmod -R ugo=rwX Gemfile.lock \"$GEM_HOME\"; \trm -rf ~redmine/.bundle; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| grep -v '^/usr/local/' \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/redmine/files"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rails"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "server"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-b"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "0.0.0.0"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/03d0ce54ce53227355e070a6d0d1ec1cdf986a29.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tgnupg dirmngr \t\tlibcurl4-openssl-dev \t\tlibfreetype6-dev \t\tlibicu-dev \t\tlibjpeg-dev \t\tlibldap2-dev \t\tlibmemcached-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibxml2-dev \t\tunzip \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tdocker-php-ext-configure ldap --with-libdir=\"lib/$debMultiarch\"; \tdocker-php-ext-install -j \"$(nproc)\" \t\texif \t\tgd \t\tintl \t\tldap \t\topcache \t\tpcntl \t\tpdo_mysql \t\tpdo_pgsql \t\tpgsql \t\tzip"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpecl install APCu-5.1.11; \tpecl install memcached-3.0.4; \tpecl install redis-3.1.6; \tdocker-php-ext-enable \t\tapcu \t\tmemcached \t\tredis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.0.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a2efe484678c1659b9640ea247746a2174d77870d29c7d60abd565c20eb5aa84"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tcurl -fL -o owncloud.tar.bz2 \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2\"; \tcurl -fL -o owncloud.tar.bz2.asc \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc\"; \techo \"$OWNCLOUD_SHA256 *owncloud.tar.bz2\" | sha256sum -c -; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26; \tgpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" owncloud.tar.bz2.asc; \ttar -xjf owncloud.tar.bz2 -C /usr/src/; \trm owncloud.tar.bz2"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/041d1e9e6820340964d77f4652f1ae439b1cb1c3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-12"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12.0.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/GA/jdk12.0.1/69cfe15208a647278a19ef0990eea691/12/GPL/openjdk-12.0.1_windows-x64_bin.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "fc7d9eee3c09ea6548b00ca25dbf34a348b3942c815405a1428e0bfef268d08d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java --version'; java --version; \tWrite-Host '  javac --version'; javac --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/04cce459edd8fc781316fa2fd8de4228a53ce38b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "kibana"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "docker.elastic.co"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "dbcaccde1ddc16ab12c841b22b2de1fc5d76de5ff0ac843fc3e825ef96781f80"
                }
            ],
            "type": "DOCKER-FROM"
        }
    ],
    "meta_info": "./dataset/source/064c161996e8213515b4cd5fa3a6cd058a587ebf.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "DIST"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "SUITE"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/06f84e87ed203f84d8bde732f5b7eb0288922735.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ruby"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "2.3"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "bundle config --global frozen 1"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/src/app"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/app"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y nodejs --no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y mysql-client postgresql-client sqlite3 --no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rails"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "server"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-b"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "0.0.0.0"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/07233fabd8dcffb6775b9f06389f23bb1c4cf0ad.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.1-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibmagickwand-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2enmod rewrite expires"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/07e2f7cbc60d7076664743e3f9ea51f0a9d97acc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.0-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tgnupg dirmngr \t\tlibcurl4-openssl-dev \t\tlibfreetype6-dev \t\tlibicu-dev \t\tlibjpeg-dev \t\tlibldap2-dev \t\tlibmcrypt-dev \t\tlibmemcached-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibxml2-dev \t\tunzip \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tdocker-php-ext-configure ldap --with-libdir=\"lib/$debMultiarch\"; \tdocker-php-ext-install -j \"$(nproc)\" \t\texif \t\tgd \t\tintl \t\tldap \t\tmcrypt \t\topcache \t\tpcntl \t\tpdo_mysql \t\tpdo_pgsql \t\tpgsql \t\tzip"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2enmod rewrite"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpecl install APCu-5.1.11; \tpecl install memcached-3.0.4; \tpecl install redis-3.1.6; \tdocker-php-ext-enable \t\tapcu \t\tmemcached \t\tredis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.1.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2b688327a2f986236e14b81dffcf684f730f61946d8035e99a6d032083c1ef19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tcurl -fL -o owncloud.tar.bz2 \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2\"; \tcurl -fL -o owncloud.tar.bz2.asc \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc\"; \techo \"$OWNCLOUD_SHA256 *owncloud.tar.bz2\" | sha256sum -c -; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26; \tgpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" owncloud.tar.bz2.asc; \ttar -xjf owncloud.tar.bz2 -C /usr/src/; \trm owncloud.tar.bz2"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0897f7981c6cb263a322c2c01750c0390933cf6b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "redmine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.4"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PASSENGER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "6.0.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgcc \t\tmake \t; \trm -rf /var/lib/apt/lists/*; \t\tgem install passenger --version \"$PASSENGER_VERSION\"; \tpassenger-config build-native-support; \tif [ -n \"$(passenger-config build-native-support 2>&1)\" ]; then cat /tmp/passenger_native_support-*.log; false; fi; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tpassenger-config install-agent; \tpassenger-config download-nginx-engine"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PASSENGER_PID_FILE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "tmp/pids/server.pid"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "passenger"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "start"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/08d5d7f562cfda3377ce525863f7b1b8d7e9bfb8.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.11.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_TAG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "v${GIT_VERSION}.windows.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "668d16a799dd721ed126cc91bed49eb2c072ba1b25b50048280a4e2c5ed56e59"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \tif ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive -Path git.zip -DestinationPath C:\\git\\.; \t\tWrite-Host 'Removing ...'; \tRemove-Item git.zip -Force; \t\tWrite-Host 'Updating PATH ...'; \t$env:PATH = 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  git --version'; git --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.12.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '9badf7bbc0ed55f2db967434b033a2cddf2e46dbdc5bb8560d8fde019e8e19d3'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/08faf411c5d4601b944a817c4180f94bed33adb2.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "%%REDMINE%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PASSENGER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PASSENGER_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgcc \t\tmake \t; \trm -rf /var/lib/apt/lists/*; \t\tgem install passenger --version \"$PASSENGER_VERSION\"; \tpassenger-config build-native-support; \tif [ -n \"$(passenger-config build-native-support 2>&1)\" ]; then cat /tmp/passenger_native_support-*.log; false; fi; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tpassenger-config install-agent; \tpassenger-config download-nginx-engine"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PASSENGER_PID_FILE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "tmp/pids/server.pid"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "passenger"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "start"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/091a0e38be70217953024d720d56adb19ae83430.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r redis && useradd -r -g redis redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=\" \t\tca-certificates \t\tdirmngr \t\tgnupg \t\twget \t\"; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "http://download.redis.io/releases/redis-4.0.14.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_SHA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tlibc6-i386 \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tbuildDeps=' \t\twget \t\t\t\tgcc \t\tgcc-multilib \t\tlibc6-dev-i386 \t\tmake \t'; \tapt-get update; \tapt-get install -y $buildDeps --no-install-recommends; \trm -rf /var/lib/apt/lists/*; \t\twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | sha256sum -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \trm redis.tar.gz; \t\tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \tsed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \t\tmake -C /usr/src/redis -j \"$(nproc)\" 32bit; \tmake -C /usr/src/redis install; \t\trm -r /usr/src/redis; \t\tapt-get purge -y --auto-remove $buildDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /data && chown redis:redis /data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "6379"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "redis-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/09413865137630b396dd1003a681a31fe0cb6f2e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-openj9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0aa1cd6a00cfe247f17e680d5e2c394b5f0d3edc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "B215C1633BCA0477615F1B35A5B3A004745C015A \tB3C42148A44E6983B3E4CC0793FA9B1AB75C61B8 \t90AA470469D3965A87A5DCB494D03953902C9419 \t80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C \t7F74F97C103468EE5D750B583AB00996FC26A641 \t33C235A34C46AA3FFB293709A328C3A2C3C45C06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_MIRRORS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://ftpmirror.gnu.org/gcc \t\thttps://bigsearcher.com/mirrors/gcc/releases \t\thttps://mirrors-usa.go-parts.com/gcc/releases \t\thttps://mirrors.concertpass.com/gcc/releases \t\thttp://www.netgull.com/gcc/releases"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.3.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tflex \t; \trm -r /var/lib/apt/lists/*; \t\t_fetch() { \t\tlocal fetch=\"$1\"; shift; \t\tlocal file=\"$1\"; shift; \t\tfor mirror in $GCC_MIRRORS; do \t\t\tif curl -fL \"$mirror/$fetch\" -o \"$file\"; then \t\t\t\treturn 0; \t\t\tfi; \t\tdone; \t\techo >&2 \"error: failed to download '$fetch' from several mirrors\"; \t\treturn 1; \t}; \t\t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\" 'gcc.tar.xz.sig' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\"; \t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz'; \tgpg --batch --verify gcc.tar.xz.sig gcc.tar.xz; \tmkdir -p /usr/src/gcc; \ttar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1; \trm gcc.tar.xz*; \t\tcd /usr/src/gcc; \t\t./contrib/download_prerequisites; \t{ rm *.tar.* || true; }; \t\tfor f in config.guess config.sub; do \t\twget -O \"$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \t\tfind -mindepth 2 -name \"$f\" -exec cp -v \"$f\" '{}' ';'; \tdone; \t\tdir=\"$(mktemp -d)\"; \tcd \"$dir\"; \t\textraConfigureArgs=''; \tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tarmel) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv4t --with-float=soft\" \t\t\t;; \t\tarmhf) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb\" \t\t\t;; \t\t\t\ti386) \t\t\tosVersionID=\"$(set -e; . /etc/os-release; echo \"$VERSION_ID\")\"; \t\t\tcase \"$osVersionID\" in \t\t\t\t8) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i586\" ;; \t\t\t\t*) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i686\" ;; \t\t\tesac; \t\t\t;; \tesac; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t/usr/src/gcc/configure \t\t--build=\"$gnuArch\" \t\t--disable-multilib \t\t--enable-languages=c,c++,fortran,go \t\t$extraConfigureArgs \t; \tmake -j \"$(nproc)\"; \tmake install-strip; \t\tcd ..; \t\trm -rf \"$dir\" /usr/src/gcc; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \techo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf; \tldconfig -v"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc; \tdpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++; \tdpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran; \tupdate-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/0b15d39cebd7afc18eded9d4f41d932b00770eed.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0b1975d451426f9858f59b812411970f4e2ac49c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PHP_VERSION%%-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\timagemagick-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .wordpress-phpexts-rundeps $runDeps; \tapk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash \t\tless \t\tmysql-client"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmkdir -p /var/www/html; \tchown -R www-data:www-data /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "63AF7AA15067C05616FDDD88A3A2E8F226F0BC06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%WORDPRESS_CLI_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%WORDPRESS_CLI_SHA512%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t; \t\tcurl -o /usr/local/bin/wp.gpg -fSL \"https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$WORDPRESS_CLI_GPG_KEY\"; \tgpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\" /usr/local/bin/wp.gpg; \t\techo \"$WORDPRESS_CLI_SHA512 */usr/local/bin/wp\" | sha512sum -c -; \tchmod +x /usr/local/bin/wp; \t\tapk del .fetch-deps; \t\twp --allow-root --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "www-data"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "wp"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "shell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0b687ec4b2f490051a53d114bf64242580c32f28.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.13-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "b7cf208f31432fa511273a65a4a983866b98be4f7f5e61c5c99279a873f22b71"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0b90753a7f0376a82b40f6c9e9da67cd38d76f1e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0c1e517ccfa17cd28a2a1e54b6a017b6d7b94f0d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "buster"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/0c2ab277bc1488c0fad85b02a5e5cd4ff967e9d9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/0cee79e6174a0509d5a6f036676d5b86ec0be087.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  javac -version'; javac -version; \tWrite-Host '  java -version'; java -version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/0ee0b0080979a7fae89525da9115076a184a0393.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.11.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_TAG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "v${GIT_VERSION}.windows.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "668d16a799dd721ed126cc91bed49eb2c072ba1b25b50048280a4e2c5ed56e59"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \tif ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive -Path git.zip -DestinationPath C:\\git\\.; \t\tWrite-Host 'Removing ...'; \tRemove-Item git.zip -Force; \t\tWrite-Host 'Updating PATH ...'; \t$env:PATH = 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  git --version'; git --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.12.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '9badf7bbc0ed55f2db967434b033a2cddf2e46dbdc5bb8560d8fde019e8e19d3'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/0f119a2e24c747cd31f8d6da19c93fbcd5ace6bf.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tca-certificates \t\tcurl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0.11.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NPM_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.1.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \t&& curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \t&& gpg --verify SHASUMS256.txt.asc \t&& grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \t&& tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \t&& rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \t&& npm install -g npm@\"$NPM_VERSION\" \t&& npm cache clear"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/100644861884e21cc1e1aa878b21042b810f04f4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%JULIA_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%JULIA_WINDOWS_SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\\julia\\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install (\"julia --version\") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/10a77f7e691683dc2ad5e46043743317eb75f114.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update \t&& apt-get install -y --no-install-recommends \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tlibgdbm3 \t\tlibgmp-dev \t\tlibssl-dev \t\tlibyaml-dev \t\tprocps \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "25da31b9815bfa9bba9f9b793c055a40a35c43c6adfb1fdbd81a09099f9b529c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tautoconf \t\tbison \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibgdbm-dev \t\tlibglib2.0-dev \t\tlibncurses-dev \t\tlibreadline-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tmake \t\truby \t\twget \t\txz-utils \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t\t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/11e26ab5e539a7da8d0853638aeee43d8942bae9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "19.03-rc"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache \t\tbtrfs-progs \t\te2fsprogs \t\te2fsprogs-extra \t\tiptables \t\txfsprogs \t\txz \t\tpigz \t; \tif zfs=\"$(apk info --no-cache --quiet zfs)\" && [ -n \"$zfs\" ]; then \t\tapk add --no-cache zfs; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -S dockremap \t&& adduser -S -G dockremap dockremap \t&& echo 'dockremap:165536:65536' >> /etc/subuid \t&& echo 'dockremap:165536:65536' >> /etc/subgid"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DIND_COMMIT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "37498f009d8bf25fbb6199e8ccd34bed84f2874b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \twget -O /usr/local/bin/dind \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\"; \tchmod +x /usr/local/bin/dind"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "dockerd-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/docker"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2375"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "dockerd-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/14606b8e455c0334cd6c70ff506307793f6ebcb6.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\timagemagick-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .wordpress-phpexts-rundeps $runDeps; \tapk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash \t\tless \t\tmysql-client"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmkdir -p /var/www/html; \tchown -R www-data:www-data /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "63AF7AA15067C05616FDDD88A3A2E8F226F0BC06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.2.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2103f04a5014d629eaa42755815c9cec6bb489ed7b0ea6e77dedb309e8af098ab902b2f9c6369ae4b7cb8cc1f20fbb4dedcda83eb1d0c34b880fa6e8a3ae249d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t; \t\tcurl -o /usr/local/bin/wp.gpg -fSL \"https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$WORDPRESS_CLI_GPG_KEY\"; \tgpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\" /usr/local/bin/wp.gpg; \t\techo \"$WORDPRESS_CLI_SHA512 */usr/local/bin/wp\" | sha512sum -c -; \tchmod +x /usr/local/bin/wp; \t\tapk del .fetch-deps; \t\twp --allow-root --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "www-data"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "wp"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "shell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/15213aaf48bf63d2a45637335186488858171525.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/15a90c79cb48d317ab90e81c839b5006b97eea1d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  javac -version'; javac -version; \tWrite-Host '  java -version'; java -version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/165bdd1370e0509d6367ca159fdba46e0bf8462e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.8.20"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.8/src/haproxy-1.8.20.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3228f78d5fe1dfbaccf41bf387e36b08eeef6e16330053cafde5fa303e262b16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgcc \t\tlibc-dev \t\tlinux-headers \t\tlua5.3-dev \t\tmake \t\topenssl \t\topenssl-dev \t\tpcre2-dev \t\treadline-dev \t\ttar \t\tzlib-dev \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(getconf _NPROCESSORS_ONLN)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .haproxy-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/17ff0edfe17a31c8b18561d5ad1d05a436e9e520.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.7.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.7/src/haproxy-1.7.11.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "d564b8e9429d1e8e13cb648bf4694926b472e36da1079df946bb732927b232ea"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgcc \t\tlibc-dev \t\tlinux-headers \t\tlua5.3-dev \t\tmake \t\topenssl \t\topenssl-dev \t\tpcre2-dev \t\treadline-dev \t\ttar \t\tzlib-dev \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(getconf _NPROCESSORS_ONLN)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .haproxy-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/18f6566c537f1a0e450f5da090d5b32c6e374f9e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7-rc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.0-preview1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8c546df3345398b3edc9d0ab097846f033783d33762889fd0f3dc8bb465c3354"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& buildDeps=' \t\tbison \t\tdpkg-dev \t\tlibgdbm-dev \t\truby \t' \t&& apt-get update \t&& apt-get install -y --no-install-recommends $buildDeps \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-get purge -y --auto-remove $buildDeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/196faae5a123e0619ad20e6ca4712f41a47f171e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/19d401a91dcf290664c82942f0bc0ce327e209b9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mongodb && useradd -r -g mongodb mongodb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tjq \t\tnumactl \t; \tif ! command -v ps > /dev/null; then \t\tapt-get install -y --no-install-recommends procps; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JSYAML_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.13.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\twget \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu --version; \tgosu nobody true; \t\twget -O /js-yaml.js \"https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js\"; \t\tapt-get purge -y --auto-remove wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "E162F504A20CDF15827F718D4B7C549A058F8B6B"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "mongodb-org-unstable"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "repo.mongodb.org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_PACKAGE}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_REPO}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.1.13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://$MONGO_REPO/apt/ubuntu bionic/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse\" | tee \"/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update \t&& apt-get install -y \t\t${MONGO_PACKAGE}=$MONGO_VERSION \t\t${MONGO_PACKAGE}-server=$MONGO_VERSION \t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION \t\t${MONGO_PACKAGE}-mongos=$MONGO_VERSION \t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION \t&& rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mongodb \t&& mv /etc/mongod.conf /etc/mongod.conf.orig"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1ae6fb60aa44225965af5580a60b7b11e92b0ae3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "25da31b9815bfa9bba9f9b793c055a40a35c43c6adfb1fdbd81a09099f9b529c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& buildDeps=' \t\tbison \t\tdpkg-dev \t\tlibgdbm-dev \t\truby \t' \t&& apt-get update \t&& apt-get install -y --no-install-recommends $buildDeps \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-get purge -y --auto-remove $buildDeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1c11182d763188889c00d8f44a91d0df09e0147b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "mariadb"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/1ca94c88d8d78d28383fc7aaad0871805683d630.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tlibexpat1 \t\tlibffi6 \t\tlibgdbm3 \t\tlibsqlite3-0 \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) pypyArch='linux64'; sha256='8014f63b1a34b155548852c7bf73aab2d41ebddf2c8fb603dc9dd8509be93db0' ;; \t\ti386) pypyArch='linux32'; sha256='cb11ef4b0df569c28390b1ee93029159e1b90bfbad98df6abd629d5203b2abd9' ;; \t\ts390x) pypyArch='s390x'; sha256='4a91bf2d9a142b6dbf82b5301cb510535ae9a54e1645546b2e0735a7b5ed85ba' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release\"; exit 1 ;; \tesac; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\twget \t\tlibncurses5 \t; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/pypy3.6-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\tpypy3 --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tapt-get install -y --no-install-recommends gcc libc6-dev libssl-dev; \t\tcd /usr/local/lib_pypy; \t\tpypy3 _ssl_build.py; \tfi; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpypy3 get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \tpypy3 --version; \tpip --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "pypy3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1d1bb50eab9be0de526f64d25ee65a173d4b7bac.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_CHANNEL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "test"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.03.0-rc3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\tarmhf) dockerArch='armel' ;; \t\tarmv7) dockerArch='armhf' ;; \t\taarch64) dockerArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/modprobe"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "modprobe.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "sh"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1d84510aa5ace52345647c21d258c408a02e8c23.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjemalloc1 \t\tprocps \t\tiproute2 \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends \t\t\tdirmngr \t\t\tgnupg \t\t; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "514A2AD631A57A16DD0047EC749D6EEC0353B12C \tA26E528B271F19B9E5D8E19EA278B781FE4B2BDA"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tmkdir -p /usr/share/man/man1/; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386) \t\t\techo 'deb http://www.apache.org/dist/cassandra/debian 30x main' > /etc/apt/sources.list.d/cassandra.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get install -y --no-install-recommends \t\t\t\twget ca-certificates \t\t\t\tdpkg-dev \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tfor pkg in cassandra cassandra-tools; do \t\t\t\tdeb=\"${pkg}_${CASSANDRA_VERSION}_all.deb\"; \t\t\t\twget -O \"$tempDir/$deb\" \"https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb\"; \t\t\tdone; \t\t\t\t\t\tls -lAFh \"$tempDir\"; \t\t\t( cd \"$tempDir\" && dpkg-scanpackages . > Packages ); \t\t\tgrep '^Package: ' \"$tempDir/Packages\"; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y \t\tcassandra=\"$CASSANDRA_VERSION\" \t\tcassandra-tools=\"$CASSANDRA_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/cassandra"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tppc64el) \t\t\tif grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\"; then \t\t\t\tgrep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tsed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tgrep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\telif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; then \t\t\t\tsed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\t\tgrep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\tfi; \t\t\t;; \tesac; \t\tsed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chown -R cassandra:cassandra /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chmod 777 /var/lib/cassandra \"$CASSANDRA_CONFIG\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/cassandra"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "7000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cassandra"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1d8c362e7043d7b78836f06256d0ae9b82561af8.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.5.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9bf6370aaa82c284f193264cc7ca56f202171c32367deceb3599a4f354175d7d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& buildDeps=' \t\tbison \t\tdpkg-dev \t\tlibgdbm-dev \t\truby \t' \t&& apt-get update \t&& apt-get install -y --no-install-recommends $buildDeps \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-get purge -y --auto-remove $buildDeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1d93f626ec36379cf9edd71985595330e63e6c68.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3_7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  javac --version'; javac --version; \tWrite-Host '  java --version'; java --version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1e26f46f65f8b238d8b7c5584b1d740abd9fb91c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql' ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.5.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "dfc940487ed5acd5f657d6d02d53a18f9699888d4b0f820071e4564ed2f9f3dd"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&& apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run \t\tutil-linux-dev \t\tzlib-dev \t\t&& cd /usr/src/postgresql \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t\t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t&& make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&& apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name '*.a' -delete"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1ec74005f1091ce08cdf399e0a8596ab178b0bca.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.8.20"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.8/src/haproxy-1.8.20.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3228f78d5fe1dfbaccf41bf387e36b08eeef6e16330053cafde5fa303e262b16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tgcc \t\tlibc6-dev \t\tliblua5.3-dev \t\tlibpcre2-dev \t\tlibssl-dev \t\tmake \t\twget \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(nproc)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& apt-mark auto '.*' > /dev/null \t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1edd126fbe420ea4eb742b42d08e8b3267c05ad7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibdb-dev \t\tlibgdbm-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/1ef536c220375eba0b89b38c51b7424dd2506dee.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "eoan-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/20bb98f33f239758e2be7cd8b94184bcd90ff01e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%ALPINE-VERSION%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql' ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PG_MAJOR%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PG_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PG_SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&& apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run \t\tutil-linux-dev \t\tzlib-dev \t\ticu-dev \t\t&& cd /usr/src/postgresql \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t\t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t\t--with-icu \t&& make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&& apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name '*.a' -delete"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/217c60ffbc22133df5fc6cffa99426d1b552889d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.4.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.4.21-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "bb6a9781e4e46af3df08ecc40ca32deae97aaaf766586719ba6ad047ba3d13e9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2181d04f6adc4f8385da5fa89e3f63532e34e775.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.12.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache --virtual .build-deps \t\tbash \t\tgcc \t\tmusl-dev \t\topenssl \t\tgo \t; \texport \t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \t\tGOOS=\"$(go env GOOS)\" \t\tGOARCH=\"$(go env GOARCH)\" \t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \t; \tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tarmhf) export GOARM='6' ;; \t\tx86) export GO386='387' ;; \tesac; \t\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \techo 'c96c5ccc7455638ae1a8b7498a030fe653731c8391c5f8e79590bce72f92b4ca *go.tgz' | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tcd /usr/local/go/src; \t./make.bash; \t\trm -rf \t\t/usr/local/go/pkg/bootstrap \t\t/usr/local/go/pkg/obj \t; \tapk del .build-deps; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/21bc31687e218b23614520b7e818ae64f5f3de69.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.2.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/21eb4dc12d6e33e64df31ccb26983bc5109d07f2.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.11.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_TAG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "v${GIT_VERSION}.windows.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "668d16a799dd721ed126cc91bed49eb2c072ba1b25b50048280a4e2c5ed56e59"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \tif ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive -Path git.zip -DestinationPath C:\\git\\.; \t\tWrite-Host 'Removing ...'; \tRemove-Item git.zip -Force; \t\tWrite-Host 'Updating PATH ...'; \t$env:PATH = 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  git --version'; git --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '38018a1a0fa341687cee2f71c0e7578f852bbf017ad48907cda6cc28d1b84140'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/227af16220e52790284b916c6e3b25e1be21400f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibdb-dev \t\tlibgdbm-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/229b897f0d6c9ec1ce6f63d6669ece30d46bbd35.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& gpgconf --kill all \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tpwgen \t\topenssl \t\tperl \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='A4A9406876FCBD3C456770C88C718D3B5072E1F5'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/mysql.gpg; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list > /dev/null"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MYSQL_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MYSQL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.7.26-1debian9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://repo.mysql.com/apt/debian/ stretch mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo mysql-community-server mysql-community-server/data-dir select ''; \t\techo mysql-community-server mysql-community-server/root-pass password ''; \t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \t\techo mysql-community-server mysql-community-server/remove-test-db select false; \t} | debconf-set-selections \t&& apt-get update && apt-get install -y mysql-server=\"${MYSQL_VERSION}\" && rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \t&& chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \t&& chmod 777 /var/run/mysqld \t&& find /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/' \t&& echo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/22ceada67859344dea369ace1713dc8dcd8e9c36.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/22d1d3653e1a34dce6a83b041e5cfe299dda6a50.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgit \t\topenssh-client"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/25ed08cd2d7040314bd3463aa61f310c8ecda418.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ruby"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "2.3"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y nodejs --no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y mysql-client postgresql-client sqlite3 --no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RAILS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.0.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gem install rails --version \"$RAILS_VERSION\""
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/261aa1b50f243ad6f3c993220e6eb2377759f055.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "%%UPSTREAM_IMAGE_DIGEST%%"
                }
            ],
            "type": "DOCKER-FROM"
        }
    ],
    "meta_info": "./dataset/source/265a82af0777c9ab90dd91ca7315276b31f39cee.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0alpha1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\toniguruma-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t\tARGON2_LIBS=\"-largon2\" \t\tARGON2_CFLAGS=\"-I/usr/include\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t\techo 'decorate_workers_output = no'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/27037a3c589746ef3f26cf3f2f290e32b6c75873.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.1-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibmagickwand-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/270c4185c70e6e1ba6a26c75f8e49b0b97647199.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/julia"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JULIA_PATH/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_GPG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3673DF529D9049477F76B37566E3C7DC03D6E495"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%JULIA_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi; \t\t%%ARCH-CASE%%; \t\tfolder=\"$(echo \"$JULIA_VERSION\" | cut -d. -f1-2)\"; \tcurl -fL -o julia.tar.gz.asc \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc\"; \tcurl -fL -o julia.tar.gz     \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz\"; \t\techo \"${sha256} *julia.tar.gz\" | sha256sum -c -; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$JULIA_GPG\"; \tgpg --batch --verify julia.tar.gz.asc julia.tar.gz; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\" julia.tar.gz.asc; \t\tmkdir \"$JULIA_PATH\"; \ttar -xzf julia.tar.gz -C \"$JULIA_PATH\" --strip-components 1; \trm julia.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tjulia --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/281ec5c0177461d29279dd471dd82e7c5dbd526a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\tlibressl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tutil-linux-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2822cecdbb823c5ad6be5072deb79c14eb5959fb.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "addgroup -S redis && adduser -S -G redis redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\t'su-exec>=0.2' \t\ttzdata"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.0.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "http://download.redis.io/releases/redis-5.0.5.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_SHA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2139009799d21d8ff94fc40b7f36ac46699b9e1254086299f8d3b223ca54a375"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\tcoreutils \t\tgcc \t\tlinux-headers \t\tmake \t\tmusl-dev \t; \t\twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | sha256sum -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \trm redis.tar.gz; \t\tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \tsed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \t\tmake -C /usr/src/redis -j \"$(nproc)\"; \tmake -C /usr/src/redis install; \t\trm -r /usr/src/redis; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .redis-rundeps $runDeps; \tapk del .build-deps; \t\tredis-server --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /data && chown redis:redis /data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "6379"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "redis-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/28e8808512c0426b0e8fcb2d5828ea92881655ff.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tgnupg dirmngr \t\tlibcurl4-openssl-dev \t\tlibfreetype6-dev \t\tlibicu-dev \t\tlibjpeg-dev \t\tlibldap2-dev \t\tlibmemcached-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibxml2-dev \t\tunzip \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tdocker-php-ext-configure ldap --with-libdir=\"lib/$debMultiarch\"; \tdocker-php-ext-install -j \"$(nproc)\" \t\texif \t\tgd \t\tintl \t\tldap \t\topcache \t\tpcntl \t\tpdo_mysql \t\tpdo_pgsql \t\tpgsql \t\tzip"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2enmod rewrite"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpecl install APCu-5.1.11; \tpecl install memcached-3.0.4; \tpecl install redis-3.1.6; \tdocker-php-ext-enable \t\tapcu \t\tmemcached \t\tredis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.0.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a2efe484678c1659b9640ea247746a2174d77870d29c7d60abd565c20eb5aa84"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tcurl -fL -o owncloud.tar.bz2 \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2\"; \tcurl -fL -o owncloud.tar.bz2.asc \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc\"; \techo \"$OWNCLOUD_SHA256 *owncloud.tar.bz2\" | sha256sum -c -; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26; \tgpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" owncloud.tar.bz2.asc; \ttar -xjf owncloud.tar.bz2 -C /usr/src/; \trm owncloud.tar.bz2"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2a3462137626813eded1bd822b43c18a20a206ab.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache \t\tbtrfs-progs \t\te2fsprogs \t\te2fsprogs-extra \t\tiptables \t\txfsprogs \t\txz \t\tpigz \t; \tif zfs=\"$(apk info --no-cache --quiet zfs)\" && [ -n \"$zfs\" ]; then \t\tapk add --no-cache zfs; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -S dockremap \t&& adduser -S -G dockremap dockremap \t&& echo 'dockremap:165536:65536' >> /etc/subuid \t&& echo 'dockremap:165536:65536' >> /etc/subgid"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DIND_COMMIT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%DIND-COMMIT%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \twget -O /usr/local/bin/dind \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\"; \tchmod +x /usr/local/bin/dind"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "dockerd-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/docker"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2375"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "dockerd-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2a91d3c169a8d767d8f76f3a62d4743c0cc97027.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tca-certificates \t\tcurl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0.10.35"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NPM_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.1.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \t&& curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \t&& gpg --verify SHASUMS256.txt.asc \t&& grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \t&& tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \t&& rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \t&& npm install -g npm@\"$NPM_VERSION\" \t&& npm cache clear"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2bdfab2e0fa2e5aabb9e76a093ebe233875a464f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-12"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12.0.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/GA/jdk12.0.1/69cfe15208a647278a19ef0990eea691/12/GPL/openjdk-12.0.1_windows-x64_bin.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "fc7d9eee3c09ea6548b00ca25dbf34a348b3942c815405a1428e0bfef268d08d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java --version'; java --version; \tWrite-Host '  javac --version'; javac --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2ce4f5079cbab2becaacee5e2e5feb75b194e478.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.5.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.5/src/haproxy-1.5.19.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "e00ae2a633da614967f2e3ebebdb817ec537cba8383b833fc8d9a506876e0d5e"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tgcc \t\tlibc6-dev \t\tlibpcre2-dev \t\tlibssl1.0-dev \t\tmake \t\twget \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(nproc)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& apt-mark auto '.*' > /dev/null \t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2e5c9eb28b4235d6dfb57261968b1cbbfc68459b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.5-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd user && useradd --create-home --home-dir /home/user -g user user"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/home/user"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CELERY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.1.25"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install celery==\"$CELERY_VERSION\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \techo 'import os'; \techo \"BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'amqp://')\"; } > celeryconfig.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CELERY_BROKER_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "amqp://guest@rabbit"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "user"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "celery"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "worker"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2e672d54850e796c7964a9225edf0aeb4a20ce58.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.09"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgit \t\topenssh-client"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/2e79c608690dd9822593f2493e8adf78991f2e67.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.2.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2eabca83340179215ae61150d93e34da8068c1b3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "E3FF2839C048B25C084DEBE9B26995E310250568"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0b1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tutil-linux-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2eb7928029f64bcd7be4ee740e26d8a1e0236363.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%ALPINE_VERSION%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%GPG_KEYS%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PHP_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_URL%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_ASC_URL%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_SHA256%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_MD5%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\toniguruma-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t\tARGON2_LIBS=\"-largon2\" \t\tARGON2_CFLAGS=\"-I/usr/include\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/2f4b9caf535bcc4fe1ce72c621240d5c89fe0411.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "cassandra"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/2fc5b392e3ec9072112324117c989bdee6934113.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "xenial"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/302deff91fea4c978782e8e7739453dcba14ba61.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.6.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.6/src/haproxy-1.6.14.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "bac949838a3a497221d1a9e937d60cba32156783a216146a524ce40675b6b828"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgcc \t\tlibc-dev \t\tlinux-headers \t\tlua5.3-dev \t\tmake \t\topenssl \t\topenssl-dev \t\tpcre2-dev \t\treadline-dev \t\ttar \t\tzlib-dev \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(getconf _NPROCESSORS_ONLN)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .haproxy-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3051be9bc64318d97db31789bd12eff1cd6a9507.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "2.7-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tgcc \t\tgettext \t\tmysql-client libmysqlclient-dev \t\tpostgresql-client libpq-dev \t\tsqlite3 \t--no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DJANGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install mysqlclient psycopg2 django==\"$DJANGO_VERSION\""
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/3128156d696b289d46243e80ce1ded8639044e45.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.4-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tgcc \t\tgettext \t\tmysql-client libmysqlclient-dev \t\tpostgresql-client libpq-dev \t\tsqlite3 \t--no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DJANGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install mysqlclient psycopg2 django==\"$DJANGO_VERSION\""
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/320a9d79296c2ef3e0a2a1efdd7abb406f0e1feb.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_CONFDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/apache2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_ENVVARS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$APACHE_CONFDIR/envvars"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends apache2; \trm -rf /var/lib/apt/lists/*; \t\tsed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\"; \t\t. \"$APACHE_ENVVARS\"; \tfor dir in \t\t\"$APACHE_LOCK_DIR\" \t\t\"$APACHE_RUN_DIR\" \t\t\"$APACHE_LOG_DIR\" \t; do \t\trm -rvf \"$dir\"; \t\tmkdir -p \"$dir\"; \t\tchown \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \t\tchmod 777 \"$dir\"; \tdone; \t\trm -rvf /var/www/html/*; \t\tln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"; \tchown -R --no-dereference \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$APACHE_LOG_DIR\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2dismod mpm_event && a2enmod mpm_prefork"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo '<FilesMatch \\.php$>'; \t\techo '\\tSetHandler application/x-httpd-php'; \t\techo '</FilesMatch>'; \t\techo; \t\techo 'DirectoryIndex disabled'; \t\techo 'DirectoryIndex index.php index.html'; \t\techo; \t\techo '<Directory /var/www/>'; \t\techo '\\tOptions -Indexes'; \t\techo '\\tAllowOverride All'; \t\techo '</Directory>'; \t} | tee \"$APACHE_CONFDIR/conf-available/docker-php.conf\" \t&& a2enconf docker-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_BUILD_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "apache2-dev"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--with-apxs2 --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.30"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "apache2-foreground"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/323dce497e75fda8cb5233e51e93c37738072668.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates p11-kit \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdirmngr \t\tgnupg \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac --version; \tjava --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/34180704d7e0620fd1e9dc88408a395d9a5e214a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "B215C1633BCA0477615F1B35A5B3A004745C015A \tB3C42148A44E6983B3E4CC0793FA9B1AB75C61B8 \t90AA470469D3965A87A5DCB494D03953902C9419 \t80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C \t7F74F97C103468EE5D750B583AB00996FC26A641 \t33C235A34C46AA3FFB293709A328C3A2C3C45C06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_MIRRORS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://ftpmirror.gnu.org/gcc \t\thttps://bigsearcher.com/mirrors/gcc/releases \t\thttps://mirrors-usa.go-parts.com/gcc/releases \t\thttps://mirrors.concertpass.com/gcc/releases \t\thttp://www.netgull.com/gcc/releases"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tflex \t; \trm -r /var/lib/apt/lists/*; \t\t_fetch() { \t\tlocal fetch=\"$1\"; shift; \t\tlocal file=\"$1\"; shift; \t\tfor mirror in $GCC_MIRRORS; do \t\t\tif curl -fL \"$mirror/$fetch\" -o \"$file\"; then \t\t\t\treturn 0; \t\t\tfi; \t\tdone; \t\techo >&2 \"error: failed to download '$fetch' from several mirrors\"; \t\treturn 1; \t}; \t\t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\" 'gcc.tar.xz.sig' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\"; \t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz'; \tgpg --batch --verify gcc.tar.xz.sig gcc.tar.xz; \tmkdir -p /usr/src/gcc; \ttar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1; \trm gcc.tar.xz*; \t\tcd /usr/src/gcc; \t\t./contrib/download_prerequisites; \t{ rm *.tar.* || true; }; \t\tfor f in config.guess config.sub; do \t\twget -O \"$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \t\tfind -mindepth 2 -name \"$f\" -exec cp -v \"$f\" '{}' ';'; \tdone; \t\tdir=\"$(mktemp -d)\"; \tcd \"$dir\"; \t\textraConfigureArgs=''; \tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tarmel) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv4t --with-float=soft\" \t\t\t;; \t\tarmhf) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb\" \t\t\t;; \t\t\t\ti386) \t\t\tosVersionID=\"$(set -e; . /etc/os-release; echo \"$VERSION_ID\")\"; \t\t\tcase \"$osVersionID\" in \t\t\t\t8) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i586\" ;; \t\t\t\t*) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i686\" ;; \t\t\tesac; \t\t\t;; \tesac; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t/usr/src/gcc/configure \t\t--build=\"$gnuArch\" \t\t--disable-multilib \t\t--enable-languages=c,c++,fortran,go \t\t$extraConfigureArgs \t; \tmake -j \"$(nproc)\"; \tmake install-strip; \t\tcd ..; \t\trm -rf \"$dir\" /usr/src/gcc; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \techo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf; \tldconfig -v"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc; \tdpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++; \tdpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran; \tupdate-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/34c2092d694f316eaee34a7a499e34533d2884ac.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\tunzip \t\txz-utils \t\t\t\tca-certificates p11-kit \t\t\t\tfontconfig libfreetype6 \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac -version; \tjava -version"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/355fb7916b414f29abc1aa1e299ebb3525a2be7e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tutil-linux-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/35d25ab06be81f95ab562767a859d4b1add7e698.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "disco-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/367e81fb3d4a673807437c5d0c5c8a05b868a5d6.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttcl \t\ttk \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) pypyArch='linux64'; sha256='73b09ef0860eb9ad7997af3030b22909806a273d90786d78420926df53279d66' ;; \t\ti386) pypyArch='linux32'; sha256='41ca390a76ca0d47b8353a0d6a20d5aab5fad8b0bb647b960d8c33e873d18ef5' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release\"; exit 1 ;; \tesac; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/pypy2.7-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\tpypy --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tcd /usr/local/lib_pypy; \t\tpypy _ssl_build.py; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpypy get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "pypy"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/378a7c62edffd357ed52adaa3ae38c53f9d3a71c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0alpha1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibonig-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/37a3d9461f3d47924bfdba9598e6ca05403f771e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3870ccc23fd41eddfaf6f7b999e04eea654f52b0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tif command -v a2enmod; then \t\ta2enmod rewrite; \tfi; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.67"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "78b1814e55fdaf40e753fd523d059f8d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/399d2873c6b02d8d3ae96a153728726b76592aea.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache bash"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/39d045da5b4a7f4fdc079af4892a78b93e00a0f4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "percona"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/39e185599cf16fd362d3de0fe92b8200e39898fc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "nanoserver"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "XXX"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "C:"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "hello.txt"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cmd"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/C"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "type C:\\hello.txt"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/39e46b50110219532afd8ac47ca55874926e61cb.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PHP_VERSION%%-%%VARIANT%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .build-deps \t\tcoreutils \t\tfreetype-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t\tlibzip-dev \t\tpostgresql-dev \t&& docker-php-ext-configure gd \t\t--with-freetype-dir=/usr/include/ \t\t--with-jpeg-dir=/usr/include/ \t\t--with-png-dir=/usr/include/ \t&& docker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .drupal-phpexts-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%MD5%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/39e4d70cbae1123b61da51852e72adefe847ae2a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-fpm-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .build-deps \t\tcoreutils \t\tfreetype-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t\tlibzip-dev \t\tpostgresql-dev \t&& docker-php-ext-configure gd \t\t--with-freetype-dir=/usr/include/ \t\t--with-jpeg-dir=/usr/include/ \t\t--with-png-dir=/usr/include/ \t&& docker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .drupal-phpexts-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "bba896a1ed2fbe4a1744d82c036fcfc4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/3a0231bcbed545d27ba73bc28b71b8ca788cccbd.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "PLACEHOLDER"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3a1d8dd926a95fd10100d63ff41009620c2654da.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/openjdk-13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "13-ea+19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/early_access/alpine/19/binaries/openjdk-13-ea+19_linux-x64-musl_bin.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "010ea985fba7e3d89a9170545c4e697da983cffc442b84e65dba3baa771299a5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\twget -O /openjdk.tgz \"$JAVA_URL\"; \techo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c -; \tmkdir -p \"$JAVA_HOME\"; \ttar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1; \trm /openjdk.tgz; \t\tjava -Xshare:dump; \t\tjava --version; \tjavac --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3a2f8467dad8bc2462c9b11ec14ab6e4ab2d4053.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0alpha1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\toniguruma-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t\tARGON2_LIBS=\"-largon2\" \t\tARGON2_CFLAGS=\"-I/usr/include\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3a5075eb360b0022195490f7f4e7d97b61294550.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.2.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3a5669cca7e04e0701f6a3322d9cbef74ffee555.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "0.10.35"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/src/app"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/app"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "npm"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "start"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3aced95e0095dd4b9abe77684bd9b90b54eeff44.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8d26ac8181b2be109ec811767ea87d45afc6e3bc45c56c3cb78df14ca6d8c829"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\\julia\\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install (\"julia --version\") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3be4bb9b6a0b5fd6a8d33122f7855df225dce9ca.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd --system --gid 11211 memcache && useradd --system --gid memcache --uid 11211 memcache"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibsasl2-modules \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MEMCACHED_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.5.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MEMCACHED_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "06a9661638cb20232d0ccea088f52ca10b959968"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update \t&& apt-get install -y --no-install-recommends \t\tca-certificates \t\tdpkg-dev \t\tgcc \t\tlibc6-dev \t\tlibevent-dev \t\tlibsasl2-dev \t\tmake \t\tperl \t\twget \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O memcached.tar.gz \"https://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz\" \t&& echo \"$MEMCACHED_SHA1  memcached.tar.gz\" | sha1sum -c - \t&& mkdir -p /usr/src/memcached \t&& tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1 \t&& rm memcached.tar.gz \t\t&& cd /usr/src/memcached \t\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& enableExtstore=\"$( \t\tcase \"$gnuArch\" in \t\t\ts390x-*) ;; \t\t\t*) echo '--enable-extstore' ;; \t\tesac \t)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-sasl \t\t--enable-sasl-pwdb \t\t$enableExtstore \t&& make -j \"$(nproc)\" \t\t&& make test \t&& make install \t\t&& cd / && rm -rf /usr/src/memcached \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark > /dev/null \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t\t&& memcached -V"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "memcache"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "11211"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "memcached"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3c3a790c2d100c1a02147c2917f018290135bf79.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.1.13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2012plus-4.1.13-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "682c5913d551d3508cb3446fe4929ae97552b5a344469855b58c9473f4f58dd6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3cb889d6a7d0083c91afc00054a5a56b127a2d1a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install --no-cache-dir virtualenv"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/3da1e5be2520174f22c0f29a0078e49569be151d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "redis"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache bash"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/4056aaf2146cf56c81605d5111af61b9aecd9ccc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-fpm-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash \t\tsed"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\timagemagick-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .wordpress-phpexts-rundeps $runDeps; \tapk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/40f6d2c7086f1c3b05f99f574bda975fb1ee2173.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\tunzip \t\txz-utils \t\t\t\tca-certificates p11-kit \t\t\t\tfontconfig libfreetype6 \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/openjdk-11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3_7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac --version; \tjava --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/414576b3fbac94ad205452cbe6ff2706858e3ef6.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/415357ebfcaa7be6dae8d9c6bd30d1a49f8fd469.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "elasticsearch"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "5"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/41b1ea92113092737087f824c4d8ac04ce70f9df.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-openj9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.0.94"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/41d711ae650a667318ebf53c9ba3d5bbdb9bb892.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A \t4D1BB29D63D98E422B2113B19334A25F8507EFA5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo 'deb https://repo.percona.com/apt stretch main' > /etc/apt/sources.list.d/percona.list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.6.41-84.1-1.stretch"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\tfor key in \t\t\tpercona-server-server/root_password \t\t\tpercona-server-server/root_password_again \t\t\t\"percona-server-server-$PERCONA_MAJOR/root-pass\" \t\t\t\"percona-server-server-$PERCONA_MAJOR/re-root-pass\" \t\t; do \t\t\techo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused'; \t\tdone; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\tpercona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/log/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/427ec4d1ce394772f2a2965193c3ad572b7b4a83.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.5-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd user && useradd --create-home --home-dir /home/user -g user user"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/home/user"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CELERY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install celery==\"$CELERY_VERSION\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \techo 'import os'; \techo \"BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'amqp://')\"; } > celeryconfig.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CELERY_BROKER_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "amqp://guest@rabbit"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "user"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "celery"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "worker"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/429f302804ac330f61a61d4e3fe9b2c8a2101e70.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_CONFDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/apache2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_ENVVARS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$APACHE_CONFDIR/envvars"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends apache2; \trm -rf /var/lib/apt/lists/*; \t\tsed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\"; \t\t. \"$APACHE_ENVVARS\"; \tfor dir in \t\t\"$APACHE_LOCK_DIR\" \t\t\"$APACHE_RUN_DIR\" \t\t\"$APACHE_LOG_DIR\" \t; do \t\trm -rvf \"$dir\"; \t\tmkdir -p \"$dir\"; \t\tchown \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \t\tchmod 777 \"$dir\"; \tdone; \t\trm -rvf /var/www/html/*; \t\tln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"; \tchown -R --no-dereference \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$APACHE_LOG_DIR\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2dismod mpm_event && a2enmod mpm_prefork"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo '<FilesMatch \\.php$>'; \t\techo '\\tSetHandler application/x-httpd-php'; \t\techo '</FilesMatch>'; \t\techo; \t\techo 'DirectoryIndex disabled'; \t\techo 'DirectoryIndex index.php index.html'; \t\techo; \t\techo '<Directory /var/www/>'; \t\techo '\\tOptions -Indexes'; \t\techo '\\tAllowOverride All'; \t\techo '</Directory>'; \t} | tee \"$APACHE_CONFDIR/conf-available/docker-php.conf\" \t&& a2enconf docker-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_BUILD_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "apache2-dev"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--with-apxs2 --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0alpha1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibonig-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "apache2-foreground"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4321c86234de9bc95414a1854b42a9f6de5684c4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "mysql"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/43c4e9bd68355188dbe7bbe2543d92671d59f5cf.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.0.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/2.0/src/haproxy-2.0.0.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "fe0a0d69e1091066a91b8d39199c19af8748e0e872961c6fc43c91ec7a28ff20"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgcc \t\tlibc-dev \t\tlinux-headers \t\tlua5.3-dev \t\tmake \t\topenssl \t\topenssl-dev \t\tpcre2-dev \t\treadline-dev \t\ttar \t\tzlib-dev \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux-glibc \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(getconf _NPROCESSORS_ONLN)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .haproxy-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/43e8c881dc3cea8e06c5cde162888a7840a4d60b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_CONFDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/apache2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_ENVVARS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$APACHE_CONFDIR/envvars"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends apache2; \trm -rf /var/lib/apt/lists/*; \t\tsed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\"; \t\t. \"$APACHE_ENVVARS\"; \tfor dir in \t\t\"$APACHE_LOCK_DIR\" \t\t\"$APACHE_RUN_DIR\" \t\t\"$APACHE_LOG_DIR\" \t; do \t\trm -rvf \"$dir\"; \t\tmkdir -p \"$dir\"; \t\tchown \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \t\tchmod 777 \"$dir\"; \tdone; \t\trm -rvf /var/www/html/*; \t\tln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"; \tchown -R --no-dereference \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$APACHE_LOG_DIR\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2dismod mpm_event && a2enmod mpm_prefork"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo '<FilesMatch \\.php$>'; \t\techo '\\tSetHandler application/x-httpd-php'; \t\techo '</FilesMatch>'; \t\techo; \t\techo 'DirectoryIndex disabled'; \t\techo 'DirectoryIndex index.php index.html'; \t\techo; \t\techo '<Directory /var/www/>'; \t\techo '\\tOptions -Indexes'; \t\techo '\\tAllowOverride All'; \t\techo '</Directory>'; \t} | tee \"$APACHE_CONFDIR/conf-available/docker-php.conf\" \t&& a2enconf docker-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_BUILD_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "apache2-dev"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--with-apxs2 --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.2.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "apache2-foreground"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/46146eb0c2ad8dccdf2df8ee87c89605a3180a3d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.11.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_TAG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "v${GIT_VERSION}.windows.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "668d16a799dd721ed126cc91bed49eb2c072ba1b25b50048280a4e2c5ed56e59"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \tif ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive -Path git.zip -DestinationPath C:\\git\\.; \t\tWrite-Host 'Removing ...'; \tRemove-Item git.zip -Force; \t\tWrite-Host 'Updating PATH ...'; \t$env:PATH = 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  git --version'; git --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.12.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '9badf7bbc0ed55f2db967434b033a2cddf2e46dbdc5bb8560d8fde019e8e19d3'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/46842c075051f0e34bd631f906a3a06e430597c1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0b1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/469ca7904aef8a37214031133e98c7635f5030f4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tbzip2 \t\tcurl \t\tgcc \t\tgnupg dirmngr \t\tmake \t\t\t\tbc \t\tcpio \t\tdpkg-dev \t\tg++ \t\tpatch \t\tperl \t\tpython \t\trsync \t\tunzip \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys AB07D806D2CE741FB886EE50B025BA8B59C36319"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUILDROOT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2019.05"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \ttarball=\"buildroot-${BUILDROOT_VERSION}.tar.bz2\"; \tcurl -fL -o buildroot.tar.bz2 \"https://buildroot.org/downloads/$tarball\"; \tcurl -fL -o buildroot.tar.bz2.sign \"https://buildroot.org/downloads/$tarball.sign\"; \tgpg --batch --decrypt --output buildroot.tar.bz2.txt buildroot.tar.bz2.sign; \tawk '$1 == \"SHA1:\" && $2 ~ /^[0-9a-f]+$/ && $3 == \"'\"$tarball\"'\" { print $2, \"*buildroot.tar.bz2\" }' buildroot.tar.bz2.txt > buildroot.tar.bz2.sha1; \ttest -s buildroot.tar.bz2.sha1; \tsha1sum -c buildroot.tar.bz2.sha1; \tmkdir -p /usr/src/buildroot; \ttar -xf buildroot.tar.bz2 -C /usr/src/buildroot --strip-components 1; \trm buildroot.tar.bz2*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tcd /usr/src/buildroot; \t\tsetConfs=' \t\tBR2_STATIC_LIBS=y \t\tBR2_TOOLCHAIN_BUILDROOT_UCLIBC=y \t\tBR2_TOOLCHAIN_BUILDROOT_WCHAR=y \t'; \t\tunsetConfs=' \t\tBR2_SHARED_LIBS \t'; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_x86_64=y \t\t\t\"; \t\t\t;; \t\t\t\t\tarm64) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_aarch64=y \t\t\t\"; \t\t\t;; \t\t\t\t\tarmel) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_arm=y \t\t\t\tBR2_arm926t=y \t\t\t\tBR2_ARM_EABI=y \t\t\t\tBR2_ARM_INSTRUCTIONS_THUMB=y \t\t\t\tBR2_ARM_SOFT_FLOAT=y \t\t\t\"; \t\t\t;; \t\t\t\t\tarmhf) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_arm=y \t\t\t\tBR2_cortex_a9=y \t\t\t\tBR2_ARM_EABIHF=y \t\t\t\tBR2_ARM_ENABLE_VFP=y \t\t\t\tBR2_ARM_FPU_VFPV3D16=y \t\t\t\tBR2_ARM_INSTRUCTIONS_THUMB2=y \t\t\t\"; \t\t\tunsetConfs=\"$unsetConfs BR2_ARM_SOFT_FLOAT\"; \t\t\t;; \t\t\t\t\ti386) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_i386=y \t\t\t\"; \t\t\t;; \t\t\t\t\t\t\t\t\t\t\t*) \t\t\techo >&2 \"error: unsupported architecture '$dpkgArch'!\"; \t\t\texit 1; \t\t\t;; \tesac; \tif [ \"$dpkgArch\" != 'i386' ]; then \t\tunsetConfs=\"$unsetConfs BR2_i386\"; \tfi; \t\tmake defconfig; \t\tfor conf in $unsetConfs; do \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \t\t\t.config; \tdone; \t\tfor confV in $setConfs; do \t\tconf=\"${confV%=*}\"; \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!$confV!\" \t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \t\t\t.config; \t\tif ! grep -q \"^$confV\\$\" .config; then \t\t\techo \"$confV\" >> .config; \t\tfi; \tdone; \t\tmake oldconfig; \t\tfor conf in $unsetConfs; do \t\t! grep -q \"^$conf=\" .config; \tdone; \tfor confV in $setConfs; do \t\tgrep -q \"^$confV\\$\" .config; \tdone;"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tmake -C /usr/src/buildroot HOST_GMP_CONF_OPTS=\"--build='\"$gnuArch\"'\" -j \"$(nproc)\" toolchain"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/src/buildroot/output/host/usr/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUSYBOX_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.31.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \ttarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\"; \tcurl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\"; \tcurl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\"; \tgpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2; \tmkdir -p /usr/src/busybox; \ttar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1; \trm busybox.tar.bz2*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/busybox"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsetConfs=' \t\tCONFIG_AR=y \t\tCONFIG_FEATURE_AR_CREATE=y \t\tCONFIG_FEATURE_AR_LONG_FILENAMES=y \t\tCONFIG_LAST_SUPPORTED_WCHAR=0 \t\tCONFIG_STATIC=y \t'; \t\tunsetConfs=' \t\tCONFIG_FEATURE_SYNC_FANCY \t'; \t\tmake defconfig; \t\tfor conf in $unsetConfs; do \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \t\t\t.config; \tdone; \t\tfor confV in $setConfs; do \t\tconf=\"${confV%=*}\"; \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!$confV!\" \t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \t\t\t.config; \t\tif ! grep -q \"^$confV\\$\" .config; then \t\t\techo \"$confV\" >> .config; \t\tfi; \tdone; \t\tmake oldconfig; \t\tfor conf in $unsetConfs; do \t\t! grep -q \"^$conf=\" .config; \tdone; \tfor confV in $setConfs; do \t\tgrep -q \"^$confV\\$\" .config; \tdone;"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& make -j \"$(nproc)\" \t\tCROSS_COMPILE=\"$(basename /usr/src/buildroot/output/host/usr/*-buildroot-linux-uclibc*)-\" \t\tbusybox \t&& ./busybox --help \t&& mkdir -p rootfs/bin \t&& ln -vL busybox rootfs/bin/ \t\t&& ln -vL ../buildroot/output/target/usr/bin/getconf rootfs/bin/ \t\t&& chroot rootfs /bin/getconf _NPROCESSORS_ONLN \t\t&& chroot rootfs /bin/busybox --install /bin"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmkdir -p rootfs/etc; \tfor f in passwd shadow group; do \t\tln -vL \t\t\t\"../buildroot/system/skeleton/etc/$f\" \t\t\t\"rootfs/etc/$f\"; \tdone; \tgrep -E '^root::' rootfs/etc/shadow; \tsed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; \tgrep -E '^root:[*]:' rootfs/etc/shadow; \tawk ' \t\t!/^#/ { \t\t\tif ($2 != \"d\" && $2 != \"f\") { \t\t\t\tprintf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; \t\t\t\texit 1; \t\t\t} \t\t\tsub(/^\\/?/, \"rootfs/\", $1); \t\t\tif ($2 == \"d\") { \t\t\t\tprintf \"mkdir -p %s\\n\", $1; \t\t\t} \t\t\tprintf \"chmod %s %s\\n\", $3, $1; \t\t} \t' ../buildroot/system/device_table.txt | bash -Eeuo pipefail -x"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd rootfs \t&& for userHome in $(awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd); do \t\tuser=\"${userHome%%=*}\"; \t\thome=\"${userHome#*=}\"; \t\thome=\"./${home#/}\"; \t\tif [ ! -d \"$home\" ]; then \t\t\tmkdir -p \"$home\"; \t\t\tchown \"$user\" \"$home\"; \t\t\tchmod 755 \"$home\"; \t\tfi; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "chroot rootfs /bin/sh -xec 'true'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime; \t[ \"$(chroot rootfs date +%Z)\" = 'UTC' ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cp -L /etc/resolv.conf rootfs/etc/ \t&& chroot rootfs /bin/sh -xec 'nslookup google.com' \t&& rm rootfs/etc/resolv.conf"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/46c3d73b04e8919fb736279d2fb454b2fbc578a1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%DEBIAN_TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PG_MAJOR%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PG_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\t%%ARCH_LIST%%) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ %%DEBIAN_SUITE%%-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ %%DEBIAN_SUITE%%-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian %%DEBIAN_SUITE%%-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\"postgresql-contrib-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4701d3688e38e5ef3c20b0a0cdf9688b28c0f048.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_PREFIX"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/apache2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$HTTPD_PREFIX/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$HTTPD_PREFIX\" \t&& chown www-data:www-data \"$HTTPD_PREFIX\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$HTTPD_PREFIX"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4.39"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "b4ca9d05773aa59b54d66cd8f4744b945289f084d3be17d7981d1783a5decfa2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_PATCHES"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_DIST_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename= \thttps://www-us.apache.org/dist/ \thttps://www.apache.org/dist/ \thttps://archive.apache.org/dist/"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\trunDeps=' \t\tapr-dev \t\tapr-util-dev \t\tapr-util-ldap \t\tperl \t'; \tapk add --no-cache --virtual .build-deps \t\t$runDeps \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tcurl-dev \t\tjansson-dev \t\tlibxml2-dev \t\tlua-dev \t\tmake \t\tnghttp2-dev \t\topenssl \t\topenssl-dev \t\tpcre-dev \t\ttar \t\tzlib-dev \t; \t\tddist() { \t\tlocal f=\"$1\"; shift; \t\tlocal distFile=\"$1\"; shift; \t\tlocal success=; \t\tlocal distUrl=; \t\tfor distUrl in $APACHE_DIST_URLS; do \t\t\tif wget -O \"$f\" \"$distUrl$distFile\" && [ -s \"$f\" ]; then \t\t\t\tsuccess=1; \t\t\t\tbreak; \t\t\tfi; \t\tdone; \t\t[ -n \"$success\" ]; \t}; \t\tddist 'httpd.tar.bz2' \"httpd/httpd-$HTTPD_VERSION.tar.bz2\"; \techo \"$HTTPD_SHA256 *httpd.tar.bz2\" | sha256sum -c -; \t\tddist 'httpd.tar.bz2.asc' \"httpd/httpd-$HTTPD_VERSION.tar.bz2.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in \t\tA93D62ECC3C8EA12DB220EC934EA76E6791485A8 \t\tB9E8213AEFB861AF35A41F2C995E35221AD84DFF \t; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --verify httpd.tar.bz2.asc httpd.tar.bz2; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\" httpd.tar.bz2.asc; \t\tmkdir -p src; \ttar -xf httpd.tar.bz2 -C src --strip-components=1; \trm httpd.tar.bz2; \tcd src; \t\tpatches() { \t\twhile [ \"$#\" -gt 0 ]; do \t\t\tlocal patchFile=\"$1\"; shift; \t\t\tlocal patchSha256=\"$1\"; shift; \t\t\tddist \"$patchFile\" \"httpd/patches/apply_to_$HTTPD_VERSION/$patchFile\"; \t\t\techo \"$patchSha256 *$patchFile\" | sha256sum -c -; \t\t\tpatch -p0 < \"$patchFile\"; \t\t\trm -f \"$patchFile\"; \t\tdone; \t}; \tpatches $HTTPD_PATCHES; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t./configure \t\t--build=\"$gnuArch\" \t\t--prefix=\"$HTTPD_PREFIX\" \t\t--enable-mods-shared=reallyall \t\t--enable-mpms-shared=all \t; \tmake -j \"$(nproc)\"; \tmake install; \t\tcd ..; \trm -r src man manual; \t\tsed -ri \t\t-e 's!^(\\s*CustomLog)\\s+\\S+!\\1 /proc/self/fd/1!g' \t\t-e 's!^(\\s*ErrorLog)\\s+\\S+!\\1 /proc/self/fd/2!g' \t\t-e 's!^(\\s*TransferLog)\\s+\\S+!\\1 /proc/self/fd/1!g' \t\t\"$HTTPD_PREFIX/conf/httpd.conf\" \t\t\"$HTTPD_PREFIX/conf/extra/httpd-ssl.conf\" \t; \t\trunDeps=\"$runDeps $( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .httpd-rundeps $runDeps; \tapk del .build-deps; \t\thttpd -v"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "httpd-foreground"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "httpd-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4706d0327f4f6caad83c9e7d39044a675161e31d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tca-certificates \t\tcurl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0.8.28"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NPM_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.1.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \t&& curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \t&& gpg --verify SHASUMS256.txt.asc \t&& grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \t&& tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \t&& rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \t&& npm install -g npm@1.4.28 \t&& npm install -g npm@\"$NPM_VERSION\" \t&& npm cache clear"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/47fe8dc10fc94ef349f1574dd3c3425cfee37c41.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.04"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgosu \t; \trm -rf /var/lib/apt/lists/*; \tgosu nobody true"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%OPENSSL_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%OPENSSL_SOURCE_SHA256%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%OPENSSL_PGP_KEY_IDS%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%OTP_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%OTP_SOURCE_SHA256%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tautoconf \t\tca-certificates \t\tdpkg-dev \t\tgcc \t\tgnupg \t\tlibncurses5-dev \t\tmake \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_HOST_MULTIARCH)\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\" --libdir=\"lib/$debMultiarch\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \techo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf; \tldconfig; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum --check --strict -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd --gid 999 --system rabbitmq; \tuseradd --uid 999 --system --home-dir \"$RABBITMQ_DATA_DIR\" --gid rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%RABBITMQ_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tca-certificates \t\tgnupg \t\twget \t\txz-utils \t; \trm -rf /var/lib/apt/lists/*; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tgosu rabbitmq rabbitmqctl help; \tgosu rabbitmq rabbitmqctl list_ciphers; \tgosu rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/486c95e2e24a4cdccecf405cf316cd643824650e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\twget -O /openjdk.tgz \"$JAVA_URL\"; \techo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c -; \tmkdir -p \"$JAVA_HOME\"; \ttar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1; \trm /openjdk.tgz; \t\tjava -Xshare:dump; \t\tjava --version; \tjavac --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/48efd6eb73e3f6600782a85e4676f470ec78f13a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t\techo 'decorate_workers_output = no'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4be41c86bcdb6003704817a6f88f2f267040f159.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "scratch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-ADD-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "busybox.tar.xz"
                        }
                    ],
                    "type": "DOCKER-ADD-SOURCE"
                }
            ],
            "type": "DOCKER-ADD"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "sh"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4c1acc7d175b12556509f250ab962f2edb8c5031.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "nanoserver"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "C:"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "hello.txt"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cmd"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/C"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "type C:\\hello.txt"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4c3525ee207b17a93346b54d5abe90fb66f069bb.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "buster-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\twget \t\tapt-transport-https \t\trpm \t\tyum-utils \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapkStaticDist='v3.9'; \tapkStaticVersion='2.10.3-r1'; \tapkStaticArch='x86_64'; \tapkStaticUrl=\"http://dl-cdn.alpinelinux.org/alpine/$apkStaticDist/main/$apkStaticArch/apk-tools-static-$apkStaticVersion.apk\"; \twget -O /tmp/apk-tools-static.apk \"$apkStaticUrl\"; \ttar -xzvf /tmp/apk-tools-static.apk -C /usr/local/ --wildcards '*bin/apk.static'; \tmv /usr/local/*bin/apk.static /usr/local/bin/apk; \trm /tmp/apk-tools-static.apk; \tapk --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": ".local-scripts/*.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "gather.sh"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4c988ac8a92f92d2931bc91bea3e351d32de11ec.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "26f980a1dd0d93a38c4a5b7e397210a761efed1f87caadc1a7066bb8ab12efab"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\\julia\\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install (\"julia --version\") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4d58f6713537a32f575c79f6be91f5ff02bba3fa.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t\ttzdata \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "177F4010FE56CA3336300305F1656F24C74CD1D8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1:10.4.6+maria~bionic"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e;\techo \"deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main\" > /etc/apt/sources.list.d/mariadb.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release o=MariaDB'; \t\techo 'Pin-Priority: 999'; \t} > /etc/apt/preferences.d/mariadb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password password 'unused'; \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password_again password 'unused'; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\t\"mariadb-server=$MARIADB_VERSION\" \t\tmariadb-backup \t\tsocat \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4dd248b341528a57e53608e391cce00b4436d45e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "97FC712E4C024BBEA48A61ED3A5CA953F73C700D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/4ee640d195f408deedaa8080d7e4c78438e1b9e1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "elasticsearch"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "docker.elastic.co"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "974aba875f1ec333f0c2ac7dee1e74d70c5813b039b3a225eb2bf287d4aa5911"
                }
            ],
            "type": "DOCKER-FROM"
        }
    ],
    "meta_info": "./dataset/source/4f7fb16bf9eeec054129ff627de5994df03e69ab.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbzip2 \t\tcoreutils \t\tcurl \t\tgcc \t\tgnupg \t\tlinux-headers \t\tmake \t\tmusl-dev \t\ttzdata"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUSYBOX_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.31.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \ttarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\"; \tcurl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\"; \tcurl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\"; \tgpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2; \tmkdir -p /usr/src/busybox; \ttar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1; \trm busybox.tar.bz2*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/busybox"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -i 's/^struct kconf_id \\*$/static &/g' scripts/kconfig/zconf.hash.c_shipped"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsetConfs=' \t\tCONFIG_AR=y \t\tCONFIG_FEATURE_AR_CREATE=y \t\tCONFIG_FEATURE_AR_LONG_FILENAMES=y \t\tCONFIG_LAST_SUPPORTED_WCHAR=0 \t\tCONFIG_STATIC=y \t'; \t\tunsetConfs=' \t\tCONFIG_FEATURE_SYNC_FANCY \t\t\t\tCONFIG_FEATURE_HAVE_RPC \t\tCONFIG_FEATURE_INETD_RPC \t\tCONFIG_FEATURE_UTMP \t\tCONFIG_FEATURE_WTMP \t'; \t\tmake defconfig; \t\tfor conf in $unsetConfs; do \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \t\t\t.config; \tdone; \t\tfor confV in $setConfs; do \t\tconf=\"${confV%=*}\"; \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!$confV!\" \t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \t\t\t.config; \t\tif ! grep -q \"^$confV\\$\" .config; then \t\t\techo \"$confV\" >> .config; \t\tfi; \tdone; \t\tmake oldconfig; \t\tfor conf in $unsetConfs; do \t\t! grep -q \"^$conf=\" .config; \tdone; \tfor confV in $setConfs; do \t\tgrep -q \"^$confV\\$\" .config; \tdone;"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& make -j \"$(nproc)\" \t\tbusybox \t&& ./busybox --help \t&& mkdir -p rootfs/bin \t&& ln -vL busybox rootfs/bin/ \t&& chroot rootfs /bin/busybox --install /bin"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& aportsVersion=\"v$(cat /etc/alpine-release)\" \t&& curl -fsSL \t\t\"https://git.alpinelinux.org/cgit/aports/plain/main/musl/getconf.c?h=${aportsVersion}\" \t\t-o /usr/src/getconf.c \t&& gcc -o rootfs/bin/getconf -static -Os /usr/src/getconf.c \t&& chroot rootfs /bin/getconf _NPROCESSORS_ONLN"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tbuildrootVersion='2019.05'; \tmkdir -p rootfs/etc; \tfor f in passwd shadow group; do \t\tcurl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\"; \tdone; \tgrep -E '^root::' rootfs/etc/shadow; \tsed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; \tgrep -E '^root:[*]:' rootfs/etc/shadow; \tcurl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\"; \tawk ' \t\t!/^#/ { \t\t\tif ($2 != \"d\" && $2 != \"f\") { \t\t\t\tprintf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; \t\t\t\texit 1; \t\t\t} \t\t\tsub(/^\\/?/, \"rootfs/\", $1); \t\t\tif ($2 == \"d\") { \t\t\t\tprintf \"mkdir -p %s\\n\", $1; \t\t\t} \t\t\tprintf \"chmod %s %s\\n\", $3, $1; \t\t} \t' buildroot-device-table.txt | sh -eux; \trm buildroot-device-table.txt"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd rootfs \t&& for userHome in $(awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd); do \t\tuser=\"${userHome%%=*}\"; \t\thome=\"${userHome#*=}\"; \t\thome=\"./${home#/}\"; \t\tif [ ! -d \"$home\" ]; then \t\t\tmkdir -p \"$home\"; \t\t\tchown \"$user\" \"$home\"; \t\t\tchmod 755 \"$home\"; \t\tfi; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "chroot rootfs /bin/sh -xec 'true'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime; \t[ \"$(chroot rootfs date +%Z)\" = 'UTC' ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cp -L /etc/resolv.conf rootfs/etc/ \t&& chroot rootfs /bin/sh -xec 'nslookup google.com' \t&& rm rootfs/etc/resolv.conf"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/51037ff39053a126c1ff2b054bbfb32bab327536.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.12.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache --virtual .build-deps \t\tbash \t\tgcc \t\tmusl-dev \t\topenssl \t\tgo \t; \texport \t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \t\tGOOS=\"$(go env GOOS)\" \t\tGOARCH=\"$(go env GOARCH)\" \t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \t; \tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tarmhf) export GOARM='6' ;; \t\tx86) export GO386='387' ;; \tesac; \t\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \techo 'c96c5ccc7455638ae1a8b7498a030fe653731c8391c5f8e79590bce72f92b4ca *go.tgz' | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tcd /usr/local/go/src; \t./make.bash; \t\trm -rf \t\t/usr/local/go/pkg/bootstrap \t\t/usr/local/go/pkg/obj \t; \tapk del .build-deps; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/51abb071cfac6c3604f97bff12beb233aba88f0d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0alpha1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\toniguruma-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t\tARGON2_LIBS=\"-largon2\" \t\tARGON2_CFLAGS=\"-I/usr/include\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/51d9804553919b3077f22831b7adcab4858884fa.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tg++ \t\tgcc \t\tlibc6-dev \t\tmake \t\tpkg-config \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) goRelArch='linux-amd64'; goRelSha256='2fd47b824d6e32154b0f6c8742d066d816667715763e06cebb710304b195c775' ;; \t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='c2b882a5fbb3bac5c9cc6d65bfe17a5febfe0251a339fc059306bb825dec9b17' ;; \t\tarm64) goRelArch='linux-arm64'; goRelSha256='5ee39ea08e5d8c017658f36d0f969b17a44d49576214f4a00710f2d98bb773be' ;; \t\ti386) goRelArch='linux-386'; goRelSha256='c711fe5025608e14bcd0efda9403e9b8f05cb4a53a125e296d639c10d280a65f' ;; \t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='98ff7ff2367239e26745231aabeaf9d7e51c40b616bb9aa15d4376792ff581d1' ;; \t\ts390x) goRelArch='linux-s390x'; goRelSha256='d7471874ed396f72dd550c3593c9f42d5e3d38a2cca7658e669305bf9023e6c8' ;; \t\t*) goRelArch='src'; goRelSha256='1fff7c33ef2522e6dfaf6ab96ec4c2a8b76d018aae6fc88ce2bd40f2202d0f8c'; \t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \tesac; \t\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \twget -O go.tgz \"$url\"; \techo \"${goRelSha256} *go.tgz\" | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tif [ \"$goRelArch\" = 'src' ]; then \t\techo >&2; \t\techo >&2 'error: UNIMPLEMENTED'; \t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \t\techo >&2; \t\texit 1; \tfi; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/53b8a8cfc843bc1c9a7bda084e37311ba56ede80.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql' ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.4.23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0d009c08b0c82b12484950bba10ae8bfd6f0c7bafd8f086ab756c483dd231d9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&& apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run \t\tutil-linux-dev \t\tzlib-dev \t\t&& cd /usr/src/postgresql \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t\t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t&& make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&& apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name '*.a' -delete"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/550f0bdf52bb00deca42440760eae0492511d913.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t\t--with-system-expat \t\t--with-system-ffi \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/552549ad0e23e92d9a0bf2483f80a8392021670d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/561a575650d5a3f3f28fe962bf0eeac8646c7b9d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tbzip2 \t\tcurl \t\tgcc \t\tgnupg dirmngr \t\tmake \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUSYBOX_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.31.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \ttarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\"; \tcurl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\"; \tcurl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\"; \tgpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2; \tmkdir -p /usr/src/busybox; \ttar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1; \trm busybox.tar.bz2*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/busybox"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsetConfs=' \t\tCONFIG_AR=y \t\tCONFIG_FEATURE_AR_CREATE=y \t\tCONFIG_FEATURE_AR_LONG_FILENAMES=y \t\tCONFIG_LAST_SUPPORTED_WCHAR=0 \t'; \t\tunsetConfs=' \t\tCONFIG_FEATURE_SYNC_FANCY \t'; \t\tmake defconfig; \t\tfor conf in $unsetConfs; do \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \t\t\t.config; \tdone; \t\tfor confV in $setConfs; do \t\tconf=\"${confV%=*}\"; \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!$confV!\" \t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \t\t\t.config; \t\tif ! grep -q \"^$confV\\$\" .config; then \t\t\techo \"$confV\" >> .config; \t\tfi; \tdone; \t\tmake oldconfig; \t\tfor conf in $unsetConfs; do \t\t! grep -q \"^$conf=\" .config; \tdone; \tfor confV in $setConfs; do \t\tgrep -q \"^$confV\\$\" .config; \tdone;"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& make -j \"$(nproc)\" \t\tbusybox \t&& ./busybox --help \t&& mkdir -p rootfs/bin \t&& ln -vL busybox rootfs/bin/ \t\t&& ln -vL \"$(which getconf)\" rootfs/bin/getconf \t\t&& mkdir -p rootfs/etc \t&& cp /etc/nsswitch.conf rootfs/etc/ \t&& mkdir -p rootfs/lib \t&& ln -sT lib rootfs/lib64 \t&& set -- \t\trootfs/bin/busybox \t\trootfs/bin/getconf \t\t/lib/\"$(gcc -print-multiarch)\"/libnss*.so.* \t\t/lib/\"$(gcc -print-multiarch)\"/libpthread*.so.* \t&& while [ \"$#\" -gt 0 ]; do \t\tf=\"$1\"; shift; \t\tfn=\"$(basename \"$f\")\"; \t\tif [ -e \"rootfs/lib/$fn\" ]; then continue; fi; \t\tif [ \"${f#rootfs/}\" = \"$f\" ]; then \t\t\tif [ \"${fn#ld-}\" = \"$fn\" ]; then \t\t\t\tln -vL \"$f\" \"rootfs/lib/$fn\"; \t\t\telse \t\t\t\tcp -v \"$f\" \"rootfs/lib/$fn\"; \t\t\tfi; \t\tfi; \t\tset -- \"$@\" $(ldd \"$f\" | awk ' \t\t\t$1 ~ /^\\// { print $1; next } \t\t\t$2 == \"=>\" && $3 ~ /^\\// { print $3; next } \t\t'); \tdone \t\t&& chroot rootfs /bin/getconf _NPROCESSORS_ONLN \t\t&& chroot rootfs /bin/busybox --install /bin"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tbuildrootVersion='2019.05'; \tmkdir -p rootfs/etc; \tfor f in passwd shadow group; do \t\tcurl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\"; \tdone; \tgrep -E '^root::' rootfs/etc/shadow; \tsed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; \tgrep -E '^root:[*]:' rootfs/etc/shadow; \tcurl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\"; \tawk ' \t\t!/^#/ { \t\t\tif ($2 != \"d\" && $2 != \"f\") { \t\t\t\tprintf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; \t\t\t\texit 1; \t\t\t} \t\t\tsub(/^\\/?/, \"rootfs/\", $1); \t\t\tif ($2 == \"d\") { \t\t\t\tprintf \"mkdir -p %s\\n\", $1; \t\t\t} \t\t\tprintf \"chmod %s %s\\n\", $3, $1; \t\t} \t' buildroot-device-table.txt | bash -Eeuo pipefail -x; \trm buildroot-device-table.txt"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd rootfs \t&& for userHome in $(awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd); do \t\tuser=\"${userHome%%=*}\"; \t\thome=\"${userHome#*=}\"; \t\thome=\"./${home#/}\"; \t\tif [ ! -d \"$home\" ]; then \t\t\tmkdir -p \"$home\"; \t\t\tchown \"$user\" \"$home\"; \t\t\tchmod 755 \"$home\"; \t\tfi; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "chroot rootfs /bin/sh -xec 'true'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime; \t[ \"$(chroot rootfs date +%Z)\" = 'UTC' ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cp -L /etc/resolv.conf rootfs/etc/ \t&& chroot rootfs /bin/sh -xec 'nslookup google.com' \t&& rm rootfs/etc/resolv.conf"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/563edde6aed306c2ec107283e34155b7757c56dd.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/57b59c26656d8f9032456fe18af97ab5bcd45b4c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update \t&& apt-get install -y --no-install-recommends \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tlibgdbm3 \t\tlibgmp-dev \t\tlibssl-dev \t\tlibyaml-dev \t\tprocps \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "25da31b9815bfa9bba9f9b793c055a40a35c43c6adfb1fdbd81a09099f9b529c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tautoconf \t\tbison \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibgdbm-dev \t\tlibglib2.0-dev \t\tlibncurses-dev \t\tlibreadline-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tmake \t\truby \t\twget \t\txz-utils \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t\t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/57e226605bfd29c975c229d29d2ed5bd7f48afe4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%BASE%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttcl \t\ttk \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PYPY_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PIP_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\t%%ARCH-CASE%%; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/%%TAR%%-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\t%%CMD%% --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tcd /usr/local/lib_pypy; \t\t%%CMD%% _ssl_build.py; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\t%%CMD%% get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "%%CMD%%"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/587a179b228c2b592f30f09d42a1197d853dd665.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "elasticsearch"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "docker.elastic.co"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1084c64eed7d9318d028361c9aee398afdeb70d1816ce81d590b9450ec542c08"
                }
            ],
            "type": "DOCKER-FROM"
        }
    ],
    "meta_info": "./dataset/source/58b65083efac4e0484cc23a6492a598faf72399c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/58f8ed8aa4245b0047cff79606394d57550b4fee.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-fpm-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .build-deps \t\tcoreutils \t\tfreetype-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t\tlibzip-dev \t\tpostgresql-dev \t&& docker-php-ext-configure gd \t\t--with-freetype-dir=/usr/include/ \t\t--with-jpeg-dir=/usr/include/ \t\t--with-png-dir=/usr/include/ \t&& docker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .drupal-phpexts-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.67"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "78b1814e55fdaf40e753fd523d059f8d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/5a7f86c44ab62872429d6a27e5a30094695677ed.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "sid-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/5af70e3f1fd84ad5881d3d2078f18ea885448de3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.7.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.7/src/haproxy-1.7.11.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "d564b8e9429d1e8e13cb648bf4694926b472e36da1079df946bb732927b232ea"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tgcc \t\tlibc6-dev \t\tliblua5.3-dev \t\tlibpcre2-dev \t\tlibssl-dev \t\tmake \t\twget \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(nproc)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& apt-mark auto '.*' > /dev/null \t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/5b360be56e1b120c41c5fb762fd8c9b199b3f6c8.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ruby"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%RUBY_VERSION%%-slim-stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r redmine && useradd -r -g redmine redmine"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\twget \t\t\t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tgsfonts \t\timagemagick \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdirmngr \t\tgnupg \t; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \t\texport GOSU_VERSION='1.11'; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\texport TINI_VERSION='0.18.0'; \twget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch\"; \twget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5; \tgpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc; \tchmod +x /usr/local/bin/tini; \ttini -h; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RAILS_ENV"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "production"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/redmine"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/home/redmine"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t[ ! -d \"$HOME\" ]; \tmkdir -p \"$HOME\"; \tchown redmine:redmine \"$HOME\"; \tchmod 1777 \"$HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDMINE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%REDMINE_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDMINE_DOWNLOAD_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%REDMINE_DOWNLOAD_MD5%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "wget -O redmine.tar.gz \"https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz\" \t&& echo \"$REDMINE_DOWNLOAD_MD5 redmine.tar.gz\" | md5sum -c - \t&& tar -xvf redmine.tar.gz --strip-components=1 \t&& rm redmine.tar.gz files/delete.me log/delete.me \t&& mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids \t&& chown -R redmine:redmine ./ \t&& echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb \t&& chmod -R ugo=rwX config db sqlite \t&& find log tmp -type d -exec chmod 1777 '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibmariadbclient-dev \t\tlibpq-dev \t\tlibsqlite3-dev \t\tmake \t\tpatch \t\t\t\tlibssl1.0-dev \t; \trm -rf /var/lib/apt/lists/*; \t\twget -O freetds.tar.bz2 'http://www.freetds.org/files/stable/freetds-1.00.91.tar.bz2'; \techo '8d71f9f29be0fe0637e443dd3807b3fd *freetds.tar.bz2' | md5sum -c -; \tmkdir freetds; \ttar -xf freetds.tar.bz2 -C freetds --strip-components=1; \trm freetds.tar.bz2; \t( cd freetds && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && ./configure --build=\"$gnuArch\" --enable-silent-rules && make -j \"$(nproc)\" && make -C src install && make -C include install ); \trm -rf freetds; \tgosu redmine bundle config build.tiny_tds --enable-system-freetds; \t\tgosu redmine bundle install --without development test; \tfor adapter in mysql2 postgresql sqlserver sqlite3; do \t\techo \"$RAILS_ENV:\" > ./config/database.yml; \t\techo \"  adapter: $adapter\" >> ./config/database.yml; \t\tgosu redmine bundle install --without development test; \t\tcp Gemfile.lock \"Gemfile.lock.${adapter}\"; \tdone; \trm ./config/database.yml; \tchmod -R ugo=rwX Gemfile.lock \"$GEM_HOME\"; \trm -rf ~redmine/.bundle; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| grep -v '^/usr/local/' \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/redmine/files"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rails"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "server"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-b"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "0.0.0.0"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/5c9705da2554d1ea79b27e40d9c7576a6ab7b7ba.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/5ccadd8b54951897764c7469843fc2a238ed16d5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.30"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/5dc45d76fdf9bc73b2ed3b35defc667aec905c11.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-4.0.10-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "d1ddac7ba6e2fbdfaaa0a787b83c165d4ad61795c051dc0f3142717a0b6a3707"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/5e1f1c1c001fb101ea67b9fe87dcc825d4fdd820.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "perl"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "5.20"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y git vim --no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERL_CPANM_OPT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--verbose --mirror https://cpan.metacpan.org"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm Digest::SHA Module::Signature"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm App::cpanminus"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm Mojolicious@5.80"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm EV"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm IO::Socket::IP"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm --notest IO::Socket::SSL"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm Term::UI"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir ~/.vim ~/.vim/bundle ~/.vim/autoload"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& git clone https://github.com/tpope/vim-pathogen.git ~/.vim/bundle/pathogen \t&& ln -s ../bundle/pathogen/autoload/pathogen.vim ~/.vim/autoload/"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "git clone https://github.com/jtratner/vim-flavored-markdown.git ~/.vim/bundle/ghmarkdown"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "git clone https://github.com/nanotech/jellybeans.vim.git ~/.vim/bundle/jellybeans"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'scriptencoding utf-8'; \t\t\t\techo 'execute pathogen#infect()'; \t\t\t\techo 'syntax on'; \t\techo 'filetype plugin indent on'; \t\techo 'set list listchars=tab:\u00bb\u00b7,nbsp:_,extends:\u00ac noet ts=4 sw=4 nobackup noswapfile'; \t\t\t\techo 'set background=dark'; \t\techo 'colorscheme jellybeans'; \t\t\t\techo 'au FilterWritePre * if &diff | setlocal wrap< | endif'; \t\t\t\techo 'au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown'; \t} > ~/.vimrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/src/docker-library-docs"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "."
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/docker-library-docs"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "./push.pl"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        }
    ],
    "meta_info": "./dataset/source/5ee4ebe99baccc7ac504582d3ac820038862f479.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t\ttzdata \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "177F4010FE56CA3336300305F1656F24C74CD1D8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1:10.1.40+maria-1~bionic"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e;\techo \"deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main\" > /etc/apt/sources.list.d/mariadb.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release o=MariaDB'; \t\techo 'Pin-Priority: 999'; \t} > /etc/apt/preferences.d/mariadb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password password 'unused'; \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password_again password 'unused'; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\t\"mariadb-server=$MARIADB_VERSION\" \t\tmariadb-backup-10.1 \t\tsocat \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/5f830a3312357e66e348b7bd7ce6c1058308ae97.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates p11-kit \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdirmngr \t\tgnupg \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac -version; \tjava -version"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/5ffba4b5a1c36b6f2075af6876813a1b35ae6984.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.2.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/603297d09551b7f42450566eb16dc1682c5a4aed.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tlibexpat1 \t\tlibffi6 \t\tlibgdbm3 \t\tlibsqlite3-0 \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) pypyArch='linux64'; sha256='73b09ef0860eb9ad7997af3030b22909806a273d90786d78420926df53279d66' ;; \t\ti386) pypyArch='linux32'; sha256='41ca390a76ca0d47b8353a0d6a20d5aab5fad8b0bb647b960d8c33e873d18ef5' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release\"; exit 1 ;; \tesac; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\twget \t\tlibncurses5 \t; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/pypy2.7-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\tpypy --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tapt-get install -y --no-install-recommends gcc libc6-dev libssl-dev; \t\tcd /usr/local/lib_pypy; \t\tpypy _ssl_build.py; \tfi; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpypy get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \tpypy --version; \tpip --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "pypy"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/608c4a57573a9a0f9205c3735600fd65b2c9f0af.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tutil-linux-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/60e82ac76be26899ea5e4b2e461f5dcf11ff8021.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/615cb4cf1dc98ef7d39ea96a28e5555ef5b8fd6d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0alpha1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibonig-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t\techo 'decorate_workers_output = no'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/616399084921a46793ffdb124246560f5aec1365.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "SUITE-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/616a77b53720814ade5121f2a348a446c355edf2.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "xenial-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/619546ba38682b3955f384ea45b4b87d0365a8db.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t\t--with-system-expat \t\t--with-system-ffi \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/624b37c0a57a3b868914b276edad7b97bace0b1d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_CHANNEL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "stable"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "18.09.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\tarmhf) dockerArch='armel' ;; \t\tarmv7) dockerArch='armhf' ;; \t\taarch64) dockerArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/modprobe"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "modprobe.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "sh"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/624bebafca8daf9b8284d5200da1c67f301cb2d9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibmagickwand-dev \t\tlibpng-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2enmod rewrite expires"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/636b8940f290f0557d21f498a240cbb2fc89d5a4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache --virtual .build-deps \t\tbash \t\tgcc \t\tmusl-dev \t\topenssl \t\tgo \t; \texport \t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \t\tGOOS=\"$(go env GOOS)\" \t\tGOARCH=\"$(go env GOARCH)\" \t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \t; \tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tarmhf) export GOARM='6' ;; \t\tx86) export GO386='387' ;; \tesac; \t\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \techo '%%SRC-SHA256%% *go.tgz' | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tcd /usr/local/go/src; \t./make.bash; \t\trm -rf \t\t/usr/local/go/pkg/bootstrap \t\t/usr/local/go/pkg/obj \t; \tapk del .build-deps; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/642431f2055fcd5df9db296775466990332526ba.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3_7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  javac --version'; javac --version; \tWrite-Host '  java --version'; java --version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/64df04f3718f888154d294ae972404e422a9f2d7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%SUITE%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t\ttzdata \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "177F4010FE56CA3336300305F1656F24C74CD1D8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%MARIADB_MAJOR%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%MARIADB_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e;\techo \"deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu %%SUITE%% main\" > /etc/apt/sources.list.d/mariadb.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release o=MariaDB'; \t\techo 'Pin-Priority: 999'; \t} > /etc/apt/preferences.d/mariadb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password password 'unused'; \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password_again password 'unused'; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\t\"mariadb-server=$MARIADB_VERSION\" \t\t%%BACKUP_PACKAGE%% \t\tsocat \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/65820722c527343858dd5d0e2a1a560e1721626f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\t'su-exec>=0.2' \t\tbash \t\tprocps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"f6fb3079ad15076154eda9413fed42877d668e7069d9b87396d0804fdb3f4c90\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "22.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"71b2fe49ed5ac386ebc189dd2e5f4b95b11b4427936be0e3c5695a903ea9ffcd\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tautoconf \t\tca-certificates \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\tmkdir /usr/local/src; \t\twget --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum -c -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum -c -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --no-cache --virtual .otp-run-deps $runDeps; \tapk del --no-network .build-deps; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \taddgroup -g 101 -S rabbitmq; \tadduser -u 100 -S -h \"$RABBITMQ_DATA_DIR\" -G rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0-beta.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgnupg \t\txz \t; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapk del .build-deps; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tsu-exec rabbitmq rabbitmqctl help; \tsu-exec rabbitmq rabbitmqctl list_ciphers; \tsu-exec rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6595d479a5a0108d980f35d1bbbf3d8fddfdb02d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_CHANNEL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "test"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "18.09.7-rc1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tx86_64) dockerArch='x86_64' ;; \t\tarmhf) dockerArch='armel' ;; \t\tarmv7) dockerArch='armhf' ;; \t\taarch64) dockerArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture ($apkArch)\"; exit 1 ;;\tesac; \t\tif ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/modprobe"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "modprobe.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "sh"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/67eb39195eb973ca98a67c1f8e73640c5e78893e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%VARIANT%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tgnupg dirmngr \t\tlibcurl4-openssl-dev \t\tlibfreetype6-dev \t\tlibicu-dev \t\tlibjpeg-dev \t\tlibldap2-dev \t\tlibmcrypt-dev \t\tlibmemcached-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibxml2-dev \t\tunzip \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tdocker-php-ext-configure ldap --with-libdir=\"lib/$debMultiarch\"; \tdocker-php-ext-install -j \"$(nproc)\" \t\texif \t\tgd \t\tintl \t\tldap \t\tmcrypt \t\topcache \t\tpcntl \t\tpdo_mysql \t\tpdo_pgsql \t\tpgsql \t\tzip"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2enmod rewrite"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpecl install APCu-5.1.11; \tpecl install memcached-3.0.4; \tpecl install redis-3.1.6; \tdocker-php-ext-enable \t\tapcu \t\tmemcached \t\tredis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tcurl -fL -o owncloud.tar.bz2 \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2\"; \tcurl -fL -o owncloud.tar.bz2.asc \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc\"; \techo \"$OWNCLOUD_SHA256 *owncloud.tar.bz2\" | sha256sum -c -; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26; \tgpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" owncloud.tar.bz2.asc; \ttar -xjf owncloud.tar.bz2 -C /usr/src/; \trm owncloud.tar.bz2"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "%%CMD%%"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/687325d5da6f523881e31dd91523ecb56f6b1f61.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql' ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "958b317fb007e94f3bef7e2a6641875db8f7f9d73db9f283324f3d6e8f5b0f54"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&& apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run \t\tutil-linux-dev \t\tzlib-dev \t\ticu-dev \t\t&& cd /usr/src/postgresql \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t\t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t\t--with-icu \t&& make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&& apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name '*.a' -delete"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/696f61780cc05c8c2600f87f58a6eee8749d29fe.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "xenial"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mongodb && useradd -r -g mongodb mongodb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tjq \t\tnumactl \t; \tif ! command -v ps > /dev/null; then \t\tapt-get install -y --no-install-recommends procps; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JSYAML_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.13.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\twget \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu --version; \tgosu nobody true; \t\twget -O /js-yaml.js \"https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js\"; \t\tapt-get purge -y --auto-remove wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "mongodb-org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "repo.mongodb.org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_PACKAGE}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_REPO}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse\" | tee \"/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update \t&& apt-get install -y \t\t${MONGO_PACKAGE}=$MONGO_VERSION \t\t${MONGO_PACKAGE}-server=$MONGO_VERSION \t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION \t\t${MONGO_PACKAGE}-mongos=$MONGO_VERSION \t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION \t&& rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mongodb \t&& mv /etc/mongod.conf /etc/mongod.conf.orig"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6a0e9db79455bc93b45febf14c8059690589bc48.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t\tuuid-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "E3FF2839C048B25C084DEBE9B26995E310250568"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0b1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6a8a7d9bb06896b525ebe50750cac864aad5a458.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.04"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgosu \t; \trm -rf /var/lib/apt/lists/*; \tgosu nobody true"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"f6fb3079ad15076154eda9413fed42877d668e7069d9b87396d0804fdb3f4c90\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "22.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"71b2fe49ed5ac386ebc189dd2e5f4b95b11b4427936be0e3c5695a903ea9ffcd\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tautoconf \t\tca-certificates \t\tdpkg-dev \t\tgcc \t\tgnupg \t\tlibncurses5-dev \t\tmake \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_HOST_MULTIARCH)\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\" --libdir=\"lib/$debMultiarch\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \techo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf; \tldconfig; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum --check --strict -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd --gid 999 --system rabbitmq; \tuseradd --uid 999 --system --home-dir \"$RABBITMQ_DATA_DIR\" --gid rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.15"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tca-certificates \t\tgnupg \t\twget \t\txz-utils \t; \trm -rf /var/lib/apt/lists/*; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tgosu rabbitmq rabbitmqctl help; \tgosu rabbitmq rabbitmqctl list_ciphers; \tgosu rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6ad95dc504ca4f62519df53626406f221dc9e319.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "10-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache 'su-exec>=0.2'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_ENV"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "production"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tnpm install -g \"ghost-cli@$GHOST_CLI_VERSION\"; \tnpm cache clean --force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_INSTALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CONTENT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost/content"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.25.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$GHOST_INSTALL\"; \tchown node:node \"$GHOST_INSTALL\"; \t\tsu-exec node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\"; \t\tcd \"$GHOST_INSTALL\"; \tsu-exec node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\"; \tsu-exec node ghost config paths.contentPath \"$GHOST_CONTENT\"; \t\tsu-exec node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\"; \treadlink -f \"$GHOST_INSTALL/config.development.json\"; \t\tmv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\"; \tmkdir -p \"$GHOST_CONTENT\"; \tchown node:node \"$GHOST_CONTENT\"; \t\tcd \"$GHOST_INSTALL/current\"; \tsqlite3Version=\"$(npm view . optionalDependencies.sqlite3)\"; \tif ! su-exec node yarn add \"sqlite3@$sqlite3Version\" --force; then \t\tapk add --no-cache --virtual .build-deps python make gcc g++ libc-dev; \t\t\t\tsu-exec node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source; \t\t\t\tapk del --no-network .build-deps; \tfi; \t\tsu-exec node yarn cache clean; \tsu-exec node npm cache clean --force; \tnpm cache clean --force; \trm -rv /tmp/yarn* /tmp/v8*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_INSTALL"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_CONTENT"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2368"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "current/index.js"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6bdc46f23236f247a7df69d0a1a529354924df04.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update \t&& apt-get install -y --no-install-recommends \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tlibgdbm3 \t\tlibgmp-dev \t\tlibssl-dev \t\tlibyaml-dev \t\tprocps \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7-rc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.0-preview1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8c546df3345398b3edc9d0ab097846f033783d33762889fd0f3dc8bb465c3354"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tautoconf \t\tbison \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibgdbm-dev \t\tlibglib2.0-dev \t\tlibncurses-dev \t\tlibreadline-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tmake \t\truby \t\twget \t\txz-utils \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t\t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6bdca75b0e709c3e43ad0799cf046562d6dc70bd.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "xenial-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/6bf403f66af67224bec6c7abf06a2c5641fca4f0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "97FC712E4C024BBEA48A61ED3A5CA953F73C700D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6c40826e9760d951d54212e29bcf4d7accd55a08.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjemalloc1 \t\tprocps \t\tiproute2 \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends \t\t\tdirmngr \t\t\tgnupg \t\t; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "514A2AD631A57A16DD0047EC749D6EEC0353B12C \tA26E528B271F19B9E5D8E19EA278B781FE4B2BDA"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.11.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tmkdir -p /usr/share/man/man1/; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386) \t\t\techo 'deb http://www.apache.org/dist/cassandra/debian 311x main' > /etc/apt/sources.list.d/cassandra.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get install -y --no-install-recommends \t\t\t\twget ca-certificates \t\t\t\tdpkg-dev \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tfor pkg in cassandra cassandra-tools; do \t\t\t\tdeb=\"${pkg}_${CASSANDRA_VERSION}_all.deb\"; \t\t\t\twget -O \"$tempDir/$deb\" \"https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb\"; \t\t\tdone; \t\t\t\t\t\tls -lAFh \"$tempDir\"; \t\t\t( cd \"$tempDir\" && dpkg-scanpackages . > Packages ); \t\t\tgrep '^Package: ' \"$tempDir/Packages\"; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y \t\tcassandra=\"$CASSANDRA_VERSION\" \t\tcassandra-tools=\"$CASSANDRA_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/cassandra"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tppc64el) \t\t\tif grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\"; then \t\t\t\tgrep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tsed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tgrep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\telif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; then \t\t\t\tsed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\t\tgrep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\tfi; \t\t\t;; \tesac; \t\tsed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chown -R cassandra:cassandra /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chmod 777 /var/lib/cassandra \"$CASSANDRA_CONFIG\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/cassandra"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "7000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cassandra"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6c823dbc203f2843b2abfec78c42a1326a0fb782.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "postgres"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache bash"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/6c95188c046b6726f8b562c40e619aab93459685.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "disco-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/6cb165c0091bd3a5dd90187d3327dd5828726d64.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "redmine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "4.0"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PASSENGER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "6.0.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgcc \t\tmake \t; \trm -rf /var/lib/apt/lists/*; \t\tgem install passenger --version \"$PASSENGER_VERSION\"; \tpassenger-config build-native-support; \tif [ -n \"$(passenger-config build-native-support 2>&1)\" ]; then cat /tmp/passenger_native_support-*.log; false; fi; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tpassenger-config install-agent; \tpassenger-config download-nginx-engine"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PASSENGER_PID_FILE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "tmp/pids/server.pid"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "passenger"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "start"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/6d0053fcedb10ee39057cc8b62534edc8d85140d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%SUITE%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "B215C1633BCA0477615F1B35A5B3A004745C015A \tB3C42148A44E6983B3E4CC0793FA9B1AB75C61B8 \t90AA470469D3965A87A5DCB494D03953902C9419 \t80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C \t7F74F97C103468EE5D750B583AB00996FC26A641 \t33C235A34C46AA3FFB293709A328C3A2C3C45C06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_MIRRORS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://ftpmirror.gnu.org/gcc \t\thttps://bigsearcher.com/mirrors/gcc/releases \t\thttps://mirrors-usa.go-parts.com/gcc/releases \t\thttps://mirrors.concertpass.com/gcc/releases \t\thttp://www.netgull.com/gcc/releases"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tflex \t; \trm -r /var/lib/apt/lists/*; \t\t_fetch() { \t\tlocal fetch=\"$1\"; shift; \t\tlocal file=\"$1\"; shift; \t\tfor mirror in $GCC_MIRRORS; do \t\t\tif curl -fL \"$mirror/$fetch\" -o \"$file\"; then \t\t\t\treturn 0; \t\t\tfi; \t\tdone; \t\techo >&2 \"error: failed to download '$fetch' from several mirrors\"; \t\treturn 1; \t}; \t\t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%.sig\" 'gcc.tar.%%TARBALL-COMPRESSION%%.sig' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%.sig\"; \t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%\" 'gcc.tar.%%TARBALL-COMPRESSION%%' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%\" 'gcc.tar.%%TARBALL-COMPRESSION%%'; \tgpg --batch --verify gcc.tar.%%TARBALL-COMPRESSION%%.sig gcc.tar.%%TARBALL-COMPRESSION%%; \tmkdir -p /usr/src/gcc; \ttar -xf gcc.tar.%%TARBALL-COMPRESSION%% -C /usr/src/gcc --strip-components=1; \trm gcc.tar.%%TARBALL-COMPRESSION%%*; \t\tcd /usr/src/gcc; \t\t./contrib/download_prerequisites; \t{ rm *.tar.* || true; }; \t\tfor f in config.guess config.sub; do \t\twget -O \"$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \t\tfind -mindepth 2 -name \"$f\" -exec cp -v \"$f\" '{}' ';'; \tdone; \t\tdir=\"$(mktemp -d)\"; \tcd \"$dir\"; \t\textraConfigureArgs=''; \tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tarmel) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv4t --with-float=soft\" \t\t\t;; \t\tarmhf) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb\" \t\t\t;; \t\t\t\ti386) \t\t\tosVersionID=\"$(set -e; . /etc/os-release; echo \"$VERSION_ID\")\"; \t\t\tcase \"$osVersionID\" in \t\t\t\t8) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i586\" ;; \t\t\t\t*) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i686\" ;; \t\t\tesac; \t\t\t;; \tesac; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t/usr/src/gcc/configure \t\t--build=\"$gnuArch\" \t\t--disable-multilib \t\t--enable-languages=c,c++,fortran,go \t\t$extraConfigureArgs \t; \tmake -j \"$(nproc)\"; \tmake install-strip; \t\tcd ..; \t\trm -rf \"$dir\" /usr/src/gcc; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \techo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf; \tldconfig -v"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc; \tdpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++; \tdpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran; \tupdate-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/6e482708d3cafd1b0361e981702a95b023033688.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "golang"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1.12-alpine3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tfile \t\tgnupg"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/bashbrew"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CGO_ENABLED"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BASHBREW_ARCHES"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "amd64 \t\tarm32v5 \t\tarm32v6 \t\tarm32v7 \t\tarm64v8 \t\tdarwin-amd64 \t\ti386 \t\tppc64le \t\ts390x \t\twindows-amd64"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": ".bashbrew-arch-to-goenv.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MANIFEST_TOOL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.0.0-rc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MANIFEST_TOOL_GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "27F3EA268A97867EAF0BD05C0F386284C03A1162"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -euxo pipefail; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$MANIFEST_TOOL_GPG_KEY\"; \t\tmkdir -p bin; \t\tfor bashbrewArch in $BASHBREW_ARCHES; do \t\t( \t\t\tgoEnv=\"$(.bashbrew-arch-to-goenv.sh \"$bashbrewArch\")\"; eval \"$goEnv\"; \t\t\tsrcBin=\"manifest-tool-$GOOS-$GOARCH\"; \t\t\tif [ \"$GOARCH\" = 'arm' ]; then [ -n \"$GOARM\" ]; srcBin=\"${srcBin}v$GOARM\"; fi; \t\t\t[ \"$GOOS\" = 'windows' ] && ext='.exe' || ext=; \t\t\tsrcBin=\"$srcBin$ext\"; \t\t\ttargetBin=\"bin/manifest-tool-$bashbrewArch$ext\"; \t\t\twget -O \"$targetBin.asc\" \"https://github.com/estesp/manifest-tool/releases/download/v${MANIFEST_TOOL_VERSION}/$srcBin.asc\"; \t\t\twget -O \"$targetBin\" \"https://github.com/estesp/manifest-tool/releases/download/v${MANIFEST_TOOL_VERSION}/$srcBin\"; \t\t\tgpg --batch --verify \"$targetBin.asc\" \"$targetBin\"; \t\t\tls -lAFh \"$targetBin\"*; \t\t\tfile \"$targetBin\"*; \t\t) \tdone; \t\tgpgconf --kill all; \trm -r \"$GNUPGHOME\"; \t\tls -lAFh bin/manifest-tool-*; \tfile bin/manifest-tool-*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "."
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "go"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -euxo pipefail; \t\tmkdir -p bin; \t\tfor bashbrewArch in $BASHBREW_ARCHES; do \t\t( \t\t\tgoEnv=\"$(.bashbrew-arch-to-goenv.sh \"$bashbrewArch\")\"; eval \"$goEnv\"; \t\t\t[ \"$GOOS\" = 'windows' ] && ext='.exe' || ext=; \t\t\t\t\t\ttargetBin=\"bin/bashbrew-$bashbrewArch$ext\"; \t\t\tgo build \t\t\t\t-a -v \t\t\t\t-ldflags '-s -w' \t\t\t\t-tags netgo -installsuffix netgo \t\t\t\t-o \"$targetBin\" \t\t\t\t-mod vendor \t\t\t\tbashbrew/src/bashbrew \t\t\t; \t\t\tls -lAFh \"$targetBin\"; \t\t\tfile \"$targetBin\"; \t\t) \tdone; \t\tls -lAFh bin/bashbrew-*; \tfile bin/bashbrew-*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/6faa0b710bfbadea3bc1261b1bdd5be53d39b703.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-fpm-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .build-deps \t\tcoreutils \t\tfreetype-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t\tlibzip-dev \t\tpostgresql-dev \t&& docker-php-ext-configure gd \t\t--with-freetype-dir=/usr/include/ \t\t--with-jpeg-dir=/usr/include/ \t\t--with-png-dir=/usr/include/ \t&& docker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .drupal-phpexts-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.6.17"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9018a2d11381aeb0e269ca696fed9ac5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/6fac19020a27ced7a02cbd851f58e7886fb848e1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\tunzip \t\txz-utils \t\t\t\tca-certificates p11-kit \t\t\t\tfontconfig libfreetype6 \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjava -version"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/6fcb6fca74010b13e02894d5eea66e07fb0d2d2c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibmagickwand-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7208ac832677fc43416c13820140fba0827f9181.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "kibana"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "docker.elastic.co"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1579f95db4242327cf0637a79cbbe095fcae11a772e324482adf4fe0e0b3ac82"
                }
            ],
            "type": "DOCKER-FROM"
        }
    ],
    "meta_info": "./dataset/source/72fcc1a32446f859ec54b1bd5dec172d910fa238.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\t'su-exec>=0.2' \t\tbash \t\tprocps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"f6fb3079ad15076154eda9413fed42877d668e7069d9b87396d0804fdb3f4c90\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "22.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"71b2fe49ed5ac386ebc189dd2e5f4b95b11b4427936be0e3c5695a903ea9ffcd\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tautoconf \t\tca-certificates \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\tmkdir /usr/local/src; \t\twget --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum -c -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum -c -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --no-cache --virtual .otp-run-deps $runDeps; \tapk del --no-network .build-deps; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \taddgroup -g 101 -S rabbitmq; \tadduser -u 100 -S -h \"$RABBITMQ_DATA_DIR\" -G rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.16-rc.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgnupg \t\txz \t; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapk del .build-deps; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tsu-exec rabbitmq rabbitmqctl help; \tsu-exec rabbitmq rabbitmqctl list_ciphers; \tsu-exec rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/73862997d0efd4fe0044d1385cde7fb4e7effba4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_PREFIX"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/apache2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$HTTPD_PREFIX/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$HTTPD_PREFIX\" \t&& chown www-data:www-data \"$HTTPD_PREFIX\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$HTTPD_PREFIX"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibapr1-dev \t\tlibaprutil1-dev \t\tlibaprutil1-ldap \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4.39"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "b4ca9d05773aa59b54d66cd8f4744b945289f084d3be17d7981d1783a5decfa2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HTTPD_PATCHES"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_DIST_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename= \thttps://www-us.apache.org/dist/ \thttps://www.apache.org/dist/ \thttps://archive.apache.org/dist/"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\techo 'deb http://deb.debian.org/debian stretch-backports main' > /etc/apt/sources.list.d/stretch-backports.list; \tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\tca-certificates \t\tdirmngr \t\tdpkg-dev \t\tgcc \t\tgnupg \t\tlibbrotli-dev \t\tlibcurl4-openssl-dev \t\tlibjansson-dev \t\tliblua5.2-dev \t\tlibnghttp2-dev \t\tlibpcre3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tmake \t\twget \t\tzlib1g-dev \t; \trm -r /var/lib/apt/lists/*; \t\tddist() { \t\tlocal f=\"$1\"; shift; \t\tlocal distFile=\"$1\"; shift; \t\tlocal success=; \t\tlocal distUrl=; \t\tfor distUrl in $APACHE_DIST_URLS; do \t\t\tif wget -O \"$f\" \"$distUrl$distFile\" && [ -s \"$f\" ]; then \t\t\t\tsuccess=1; \t\t\t\tbreak; \t\t\tfi; \t\tdone; \t\t[ -n \"$success\" ]; \t}; \t\tddist 'httpd.tar.bz2' \"httpd/httpd-$HTTPD_VERSION.tar.bz2\"; \techo \"$HTTPD_SHA256 *httpd.tar.bz2\" | sha256sum -c -; \t\tddist 'httpd.tar.bz2.asc' \"httpd/httpd-$HTTPD_VERSION.tar.bz2.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in \t\tA93D62ECC3C8EA12DB220EC934EA76E6791485A8 \t\tB9E8213AEFB861AF35A41F2C995E35221AD84DFF \t; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --verify httpd.tar.bz2.asc httpd.tar.bz2; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\" httpd.tar.bz2.asc; \t\tmkdir -p src; \ttar -xf httpd.tar.bz2 -C src --strip-components=1; \trm httpd.tar.bz2; \tcd src; \t\tpatches() { \t\twhile [ \"$#\" -gt 0 ]; do \t\t\tlocal patchFile=\"$1\"; shift; \t\t\tlocal patchSha256=\"$1\"; shift; \t\t\tddist \"$patchFile\" \"httpd/patches/apply_to_$HTTPD_VERSION/$patchFile\"; \t\t\techo \"$patchSha256 *$patchFile\" | sha256sum -c -; \t\t\tpatch -p0 < \"$patchFile\"; \t\t\trm -f \"$patchFile\"; \t\tdone; \t}; \tpatches $HTTPD_PATCHES; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t./configure \t\t--build=\"$gnuArch\" \t\t--prefix=\"$HTTPD_PREFIX\" \t\t--enable-mods-shared=reallyall \t\t--enable-mpms-shared=all \t; \tmake -j \"$(nproc)\"; \tmake install; \t\tcd ..; \trm -r src man manual; \t\tsed -ri \t\t-e 's!^(\\s*CustomLog)\\s+\\S+!\\1 /proc/self/fd/1!g' \t\t-e 's!^(\\s*ErrorLog)\\s+\\S+!\\1 /proc/self/fd/2!g' \t\t-e 's!^(\\s*TransferLog)\\s+\\S+!\\1 /proc/self/fd/1!g' \t\t\"$HTTPD_PREFIX/conf/httpd.conf\" \t\t\"$HTTPD_PREFIX/conf/extra/httpd-ssl.conf\" \t; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\thttpd -v"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "httpd-foreground"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "httpd-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/739afc86c3f123c01762ebbfa5ab28ddc2520e2d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  javac --version'; javac --version; \tWrite-Host '  java --version'; java --version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/74359040ca634ad279228ef239976005f661b18a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.1-fpm-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash \t\tsed"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\timagemagick-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .wordpress-phpexts-rundeps $runDeps; \tapk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/745d6b2bed6c8379da7ea50a49358dcc5e7bb603.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "buster-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12~beta2-1.pgdg100+1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/746523d4420e299f747110865881e150f072085c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update \t&& apt-get install -y --no-install-recommends \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tlibgdbm3 \t\tlibgmp-dev \t\tlibssl-dev \t\tlibyaml-dev \t\tprocps \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.6.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11a83f85c03d3f0fc9b8a9b6cad1b2674f26c5aaa43ba858d4b0fcc2b54171e1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tautoconf \t\tbison \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibgdbm-dev \t\tlibglib2.0-dev \t\tlibncurses-dev \t\tlibreadline-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tmake \t\truby \t\twget \t\txz-utils \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t\t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/74a2c32926a6d519dd7a7006a09a56c79ee3c60d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "sid"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/754d39f57d97c73b9d42326b5b6dda925ea23380.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t\ttzdata \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "177F4010FE56CA3336300305F1656F24C74CD1D8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1:10.3.16+maria~bionic"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e;\techo \"deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main\" > /etc/apt/sources.list.d/mariadb.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release o=MariaDB'; \t\techo 'Pin-Priority: 999'; \t} > /etc/apt/preferences.d/mariadb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password password 'unused'; \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password_again password 'unused'; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\t\"mariadb-server=$MARIADB_VERSION\" \t\tmariadb-backup \t\tsocat \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/757f7222aeb6a3582f124019bcd85be3ae4b3469.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.7"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "rabbitmq-plugins enable --offline rabbitmq_management"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \terl -noinput -eval ' \t\t{ ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) -> \t\t\tcase Acc of \t\t\t\t\"\" -> \t\t\t\t\tcase lists:suffix(\"/rabbitmqadmin\", FileInArchive) of \t\t\t\t\t\ttrue -> GetBin(); \t\t\t\t\t\tfalse -> Acc \t\t\t\t\tend; \t\t\t\t_ -> Acc \t\t\tend \t\tend, \"\", init:get_plain_arguments()), \t\tio:format(\"~s\", [ AdminBin ]), \t\tinit:stop(). \t' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin; \t[ -s /usr/local/bin/rabbitmqadmin ]; \tchmod +x /usr/local/bin/rabbitmqadmin; \tapt-get update; apt-get install -y --no-install-recommends python; rm -rf /var/lib/apt/lists/*; \trabbitmqadmin --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "15671"
                }
            ],
            "type": "DOCKER-EXPOSE"
        }
    ],
    "meta_info": "./dataset/source/759f48ebc4543ded442647a368a86a2245f04595.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgmp-dev"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%FULL_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%RUBYGEMS%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .ruby-builddeps \t\tautoconf \t\tbison \t\tbzip2 \t\tbzip2-dev \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgdbm-dev \t\tglib-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl \t\topenssl-dev \t\tprocps \t\treadline-dev \t\truby \t\ttar \t\txz \t\tyaml-dev \t\tzlib-dev \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \t&& echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \t&& patch -p1 -i thread-stack-fix.patch \t&& rm thread-stack-fix.patch \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-network --virtual .ruby-rundeps $runDeps \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tprocps \t\tyaml-dev \t\tzlib-dev \t&& apk del --no-network .ruby-builddeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/75bc220aadb51e2b71b6f959ac4244f7e98681bd.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/julia"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JULIA_PATH/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_GPG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3673DF529D9049477F76B37566E3C7DC03D6E495"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) tarArch='x86_64'; dirArch='x64'; sha256='bb9e33d95f47e703d9199f0358c038c61259e2ff9f3fd515c919729ace89443c' ;; \t\tarmhf) tarArch='armv7l'; dirArch='armv7l'; sha256='2e742f4ddf5ac21779b6943ef210d73dc02f1c6de23836b352336a3dcbb18ae6' ;; \t\tarm64) tarArch='aarch64'; dirArch='aarch64'; sha256='7614d4239702c497330c043f37d99600b41e87caa8b92742c7104915eb54648a' ;; \t\ti386) tarArch='i686'; dirArch='x86'; sha256='89b71a3558aa4f515becfd21d19651035d909f5f2e3177ccaec77aee01f962b7' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding Julia binary release\"; exit 1 ;; \tesac; \t\tfolder=\"$(echo \"$JULIA_VERSION\" | cut -d. -f1-2)\"; \tcurl -fL -o julia.tar.gz.asc \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc\"; \tcurl -fL -o julia.tar.gz     \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz\"; \t\techo \"${sha256} *julia.tar.gz\" | sha256sum -c -; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$JULIA_GPG\"; \tgpg --batch --verify julia.tar.gz.asc julia.tar.gz; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\" julia.tar.gz.asc; \t\tmkdir \"$JULIA_PATH\"; \ttar -xzf julia.tar.gz -C \"$JULIA_PATH\" --strip-components 1; \trm julia.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tjulia --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/766fd04d525ca33b97c779bf68ad788563c5fa13.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7674156b6c325138a05ff00d47ebe59c8055a43f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%FULL_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%RUBYGEMS%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& buildDeps=' \t\tbison \t\tdpkg-dev \t\tlibgdbm-dev \t\truby \t' \t&& apt-get update \t&& apt-get install -y --no-install-recommends $buildDeps \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-get purge -y --auto-remove $buildDeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/785213f529f1855dd78041d27adf7bd608070510.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.1.13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2012plus-4.1.13-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "682c5913d551d3508cb3446fe4929ae97552b5a344469855b58c9473f4f58dd6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7859023707bcd78c616294ae903addb521d8584a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.0.94"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/792c137dbc4a0e909b2ae0453b9bcfcf9f9fa324.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-hotspot"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7979b0f753911943ec2d210f4d4705e8fab78d8a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/7a727693b0d5e78a2684b3447fb4969a28bafc55.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgmp-dev"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "25da31b9815bfa9bba9f9b793c055a40a35c43c6adfb1fdbd81a09099f9b529c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .ruby-builddeps \t\tautoconf \t\tbison \t\tbzip2 \t\tbzip2-dev \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgdbm-dev \t\tglib-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl \t\topenssl-dev \t\tprocps \t\treadline-dev \t\truby \t\ttar \t\txz \t\tyaml-dev \t\tzlib-dev \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \t&& echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \t&& patch -p1 -i thread-stack-fix.patch \t&& rm thread-stack-fix.patch \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-network --virtual .ruby-rundeps $runDeps \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tprocps \t\tyaml-dev \t\tzlib-dev \t&& apk del --no-network .ruby-builddeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7abb94f2128445d47f90dff64fb8af6aa148deed.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.30"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7ac2d91f901a59a80cfde3dee6c166799d524942.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.msi'; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'python.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'TARGETDIR=C:\\Python', \t\t\t'ALLUSERS=1', \t\t\t'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install --no-cache-dir virtualenv"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7bf50d0e67ce3ad52809f485d2f5d9fe92788764.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0b1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7cc039c0bd99176291dfed49cdf3c6b44884b9eb.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A \t4D1BB29D63D98E422B2113B19334A25F8507EFA5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo 'deb https://repo.percona.com/apt stretch main' > /etc/apt/sources.list.d/percona.list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.5.62-rel38.14-1.stretch"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\tfor key in \t\t\tpercona-server-server/root_password \t\t\tpercona-server-server/root_password_again \t\t\t\"percona-server-server-$PERCONA_MAJOR/root-pass\" \t\t\t\"percona-server-server-$PERCONA_MAJOR/re-root-pass\" \t\t; do \t\t\techo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused'; \t\tdone; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\tpercona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/log/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7df56ef132177256674ac502c73f7aff60de7a47.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache --virtual .build-deps \t\tbash \t\tgcc \t\tmusl-dev \t\topenssl \t\tgo \t; \texport \t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \t\tGOOS=\"$(go env GOOS)\" \t\tGOARCH=\"$(go env GOARCH)\" \t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \t; \tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tarmhf) export GOARM='6' ;; \t\tx86) export GO386='387' ;; \tesac; \t\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \techo '1fff7c33ef2522e6dfaf6ab96ec4c2a8b76d018aae6fc88ce2bd40f2202d0f8c *go.tgz' | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tcd /usr/local/go/src; \t./make.bash; \t\trm -rf \t\t/usr/local/go/pkg/bootstrap \t\t/usr/local/go/pkg/obj \t; \tapk del .build-deps; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/7eb7e0abb429ee9529661d1f011bc14de9a12cd7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "97FC712E4C024BBEA48A61ED3A5CA953F73C700D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7edc7ba0b796216b04eadfbdf5c32105c9a4de02.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tif command -v a2enmod; then \t\ta2enmod rewrite; \tfi; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "bba896a1ed2fbe4a1744d82c036fcfc4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/7f16f600731d99679160e3c62322a49134218feb.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/7f4e32b8c45332a0eca61f45ef38638feb8c7f2a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.1-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\timagemagick-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .wordpress-phpexts-rundeps $runDeps; \tapk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash \t\tless \t\tmysql-client"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmkdir -p /var/www/html; \tchown -R www-data:www-data /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "63AF7AA15067C05616FDDD88A3A2E8F226F0BC06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.2.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2103f04a5014d629eaa42755815c9cec6bb489ed7b0ea6e77dedb309e8af098ab902b2f9c6369ae4b7cb8cc1f20fbb4dedcda83eb1d0c34b880fa6e8a3ae249d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t; \t\tcurl -o /usr/local/bin/wp.gpg -fSL \"https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$WORDPRESS_CLI_GPG_KEY\"; \tgpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\" /usr/local/bin/wp.gpg; \t\techo \"$WORDPRESS_CLI_SHA512 */usr/local/bin/wp\" | sha512sum -c -; \tchmod +x /usr/local/bin/wp; \t\tapk del .fetch-deps; \t\twp --allow-root --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "www-data"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "wp"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "shell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/801b017cf8115d04a6718b9657ffeb33588e5117.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8-rc-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "rabbitmq-plugins enable --offline rabbitmq_management"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \terl -noinput -eval ' \t\t{ ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) -> \t\t\tcase Acc of \t\t\t\t\"\" -> \t\t\t\t\tcase lists:suffix(\"/rabbitmqadmin\", FileInArchive) of \t\t\t\t\t\ttrue -> GetBin(); \t\t\t\t\t\tfalse -> Acc \t\t\t\t\tend; \t\t\t\t_ -> Acc \t\t\tend \t\tend, \"\", init:get_plain_arguments()), \t\tio:format(\"~s\", [ AdminBin ]), \t\tinit:stop(). \t' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin; \t[ -s /usr/local/bin/rabbitmqadmin ]; \tchmod +x /usr/local/bin/rabbitmqadmin; \tapk add --no-cache python; \trabbitmqadmin --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "15671"
                }
            ],
            "type": "DOCKER-EXPOSE"
        }
    ],
    "meta_info": "./dataset/source/810cb103d44646650add287f7a65c277b86f7169.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.09-rc"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgit \t\topenssh-client"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/86d7ffa5afa668aa812f03e2d02b37deca123b8d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/877f2d486117de298fb595fd554d20fc65ce079e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r redis && useradd -r -g redis redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=\" \t\tca-certificates \t\tdirmngr \t\tgnupg \t\twget \t\"; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.0.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "http://download.redis.io/releases/redis-5.0.5.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_SHA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2139009799d21d8ff94fc40b7f36ac46699b9e1254086299f8d3b223ca54a375"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tbuildDeps=' \t\tca-certificates \t\twget \t\t\t\tgcc \t\tlibc6-dev \t\tmake \t'; \tapt-get update; \tapt-get install -y $buildDeps --no-install-recommends; \trm -rf /var/lib/apt/lists/*; \t\twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | sha256sum -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \trm redis.tar.gz; \t\tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \tsed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \t\tmake -C /usr/src/redis -j \"$(nproc)\"; \tmake -C /usr/src/redis install; \t\trm -r /usr/src/redis; \t\tapt-get purge -y --auto-remove $buildDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /data && chown redis:redis /data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "6379"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "redis-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8791d9966210c09ba5c10f2eba920aa14b5ba683.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjemalloc1 \t\tprocps \t\tiproute2 \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends \t\t\tdirmngr \t\t\tgnupg \t\t; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "514A2AD631A57A16DD0047EC749D6EEC0353B12C \tA26E528B271F19B9E5D8E19EA278B781FE4B2BDA"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.1.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tmkdir -p /usr/share/man/man1/; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386) \t\t\techo 'deb http://www.apache.org/dist/cassandra/debian 21x main' > /etc/apt/sources.list.d/cassandra.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get install -y --no-install-recommends \t\t\t\twget ca-certificates \t\t\t\tdpkg-dev \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tfor pkg in cassandra cassandra-tools; do \t\t\t\tdeb=\"${pkg}_${CASSANDRA_VERSION}_all.deb\"; \t\t\t\twget -O \"$tempDir/$deb\" \"https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb\"; \t\t\tdone; \t\t\t\t\t\tls -lAFh \"$tempDir\"; \t\t\t( cd \"$tempDir\" && dpkg-scanpackages . > Packages ); \t\t\tgrep '^Package: ' \"$tempDir/Packages\"; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y \t\tcassandra=\"$CASSANDRA_VERSION\" \t\tcassandra-tools=\"$CASSANDRA_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/cassandra"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tppc64el) \t\t\tif grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\"; then \t\t\t\tgrep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tsed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tgrep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\telif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; then \t\t\t\tsed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\t\tgrep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\tfi; \t\t\t;; \tesac; \t\tsed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chown -R cassandra:cassandra /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chmod 777 /var/lib/cassandra \"$CASSANDRA_CONFIG\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/cassandra"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "7000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cassandra"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/87a3772b566a14852a9c151a5ddcbb2be063e4e6.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.11.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_TAG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "v${GIT_VERSION}.windows.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "668d16a799dd721ed126cc91bed49eb2c072ba1b25b50048280a4e2c5ed56e59"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \tif ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive -Path git.zip -DestinationPath C:\\git\\.; \t\tWrite-Host 'Removing ...'; \tRemove-Item git.zip -Force; \t\tWrite-Host 'Updating PATH ...'; \t$env:PATH = 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  git --version'; git --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '38018a1a0fa341687cee2f71c0e7578f852bbf017ad48907cda6cc28d1b84140'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/882094de3e02c65c1df4d0eafb636bef1c127762.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\docker;{1}' -f $env:ProgramFiles, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_CHANNEL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%DOCKER-CHANNEL%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%DOCKER-VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://download.docker.com/win/static/{0}/x86_64/docker-{1}.zip' -f $env:DOCKER_CHANNEL, $env:DOCKER_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'docker.zip'; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive docker.zip -DestinationPath $env:ProgramFiles; \t\tWrite-Host 'Removing ...'; \tRemove-Item @( \t\t\t'docker.zip', \t\t\t('{0}\\docker\\dockerd.exe' -f $env:ProgramFiles) \t\t) -Force; \t\tWrite-Host 'Verifying install (\"docker --version\") ...'; \tdocker --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/89ad458cb425e562cbc7fa8d01b1695ba8786c14.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.7-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "rabbitmq-plugins enable --offline rabbitmq_management"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \terl -noinput -eval ' \t\t{ ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) -> \t\t\tcase Acc of \t\t\t\t\"\" -> \t\t\t\t\tcase lists:suffix(\"/rabbitmqadmin\", FileInArchive) of \t\t\t\t\t\ttrue -> GetBin(); \t\t\t\t\t\tfalse -> Acc \t\t\t\t\tend; \t\t\t\t_ -> Acc \t\t\tend \t\tend, \"\", init:get_plain_arguments()), \t\tio:format(\"~s\", [ AdminBin ]), \t\tinit:stop(). \t' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin; \t[ -s /usr/local/bin/rabbitmqadmin ]; \tchmod +x /usr/local/bin/rabbitmqadmin; \tapk add --no-cache python; \trabbitmqadmin --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "15671"
                }
            ],
            "type": "DOCKER-EXPOSE"
        }
    ],
    "meta_info": "./dataset/source/89b73d359d33e928919fb47dd6490a6097e93f35.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/8a0167a203dc75b740e11d8b579c691e3c4b8681.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-fpm-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash \t\tsed"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\timagemagick-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .wordpress-phpexts-rundeps $runDeps; \tapk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8a1398724213e0b23a2c7466622bb4d7123bb742.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache 'su-exec>=0.2'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_ENV"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "production"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tnpm install -g \"ghost-cli@$GHOST_CLI_VERSION\"; \tnpm cache clean --force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_INSTALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CONTENT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost/content"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.25.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$GHOST_INSTALL\"; \tchown node:node \"$GHOST_INSTALL\"; \t\tsu-exec node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\"; \t\tcd \"$GHOST_INSTALL\"; \tsu-exec node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\"; \tsu-exec node ghost config paths.contentPath \"$GHOST_CONTENT\"; \t\tsu-exec node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\"; \treadlink -f \"$GHOST_INSTALL/config.development.json\"; \t\tmv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\"; \tmkdir -p \"$GHOST_CONTENT\"; \tchown node:node \"$GHOST_CONTENT\"; \t\t\"$GHOST_INSTALL/current/node_modules/knex-migrator/bin/knex-migrator\" --version; \t\tcd \"$GHOST_INSTALL/current\"; \tsqlite3Version=\"$(npm view . optionalDependencies.sqlite3)\"; \tif ! su-exec node yarn add \"sqlite3@$sqlite3Version\" --force; then \t\tapk add --no-cache --virtual .build-deps python make gcc g++ libc-dev; \t\t\t\tsu-exec node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source; \t\t\t\tapk del --no-network .build-deps; \tfi; \t\tsu-exec node yarn cache clean; \tsu-exec node npm cache clean --force; \tnpm cache clean --force; \trm -rv /tmp/yarn* /tmp/v8*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:$GHOST_INSTALL/current/node_modules/knex-migrator/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_INSTALL"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_CONTENT"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2368"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "current/index.js"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8a1a0c6f3476cdca9d88fed2addf5677fae90b78.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tlibssl-dev \t\ttk-dev \t\tuuid-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8a6db92d376a34efd593cb985ae031d58b36d5b0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibdb-dev \t\tlibgdbm-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8a96f06d7db90215d7dd133b8cc40e1e961152df.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.11.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_TAG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "v${GIT_VERSION}.windows.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "668d16a799dd721ed126cc91bed49eb2c072ba1b25b50048280a4e2c5ed56e59"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \tif ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive -Path git.zip -DestinationPath C:\\git\\.; \t\tWrite-Host 'Removing ...'; \tRemove-Item git.zip -Force; \t\tWrite-Host 'Updating PATH ...'; \t$env:PATH = 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  git --version'; git --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '38018a1a0fa341687cee2f71c0e7578f852bbf017ad48907cda6cc28d1b84140'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/8ac9866445c4e8958bee4054308433ae7068b989.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t\t--with-system-expat \t\t--with-system-ffi \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8af172f5e4c1ac3e28152454493e529883d8ed0b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttcl \t\ttk \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) pypyArch='linux64'; sha256='8014f63b1a34b155548852c7bf73aab2d41ebddf2c8fb603dc9dd8509be93db0' ;; \t\ti386) pypyArch='linux32'; sha256='cb11ef4b0df569c28390b1ee93029159e1b90bfbad98df6abd629d5203b2abd9' ;; \t\ts390x) pypyArch='s390x'; sha256='4a91bf2d9a142b6dbf82b5301cb510535ae9a54e1645546b2e0735a7b5ed85ba' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release\"; exit 1 ;; \tesac; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/pypy3.6-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\tpypy3 --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tcd /usr/local/lib_pypy; \t\tpypy3 _ssl_build.py; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpypy3 get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "pypy3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8bb0da230203a6be21b4097ef0f79e07406388ab.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "disco"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/8dab23dd23eae1b9ecae8721a3e7efa0c07490b7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "eoan"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/8e3a52c02e855ca2b86a0d3ef20862843c643a9c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.30"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8e4ac4930397fef9fad25ff8820dc6cd1752a503.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "13-ea+26"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/early_access/jdk13/26/GPL/openjdk-13-ea+26_windows-x64_bin.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "945b2957d2600d6bf220442a1c5a4c9acc9f77d4fc26a2039fdfc84affa33668"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java --version'; java --version; \tWrite-Host '  javac --version'; javac --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8e69218c7c47660a155faedd9400432362f667de.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8f6cfd703d8fa6f0d9bd57715d1c836e9aa2d185.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "mongo"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/8fc6779a7d29748e93b3a0a5f7ff59b064ff1955.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0b1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/8ffb1403905edac84b9a4c68f83410062a1bb7fe.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.9-1.pgdg90+1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9052a41b1d11ba74bd59fe07fde0ad163b3f521b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql' ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.6.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3f08c265c9ae814f727461408ab24fdf3d954c4f7ae42d9c97b3c7e03fc31a22"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&& apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run \t\tutil-linux-dev \t\tzlib-dev \t\t&& cd /usr/src/postgresql \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t\t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t&& make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&& apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name '*.a' -delete"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/935fe6457daa80a4725e0e2bcd21db4bdd37cc8f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.9.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.9/src/haproxy-1.9.8.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2d9a3300dbd871bc35b743a83caaf50fecfbf06290610231ca2d334fd04c2aee"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgcc \t\tlibc-dev \t\tlinux-headers \t\tlua5.3-dev \t\tmake \t\topenssl \t\topenssl-dev \t\tpcre2-dev \t\treadline-dev \t\ttar \t\tzlib-dev \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(getconf _NPROCESSORS_ONLN)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .haproxy-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/93a20b18d7a021accb58f703e43fcb7c4d96e8b8.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_CHANNEL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%DOCKER-CHANNEL%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DOCKER_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%DOCKER-VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\t%%ARCH-CASE%%; \t\tif ! wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz\"; then \t\techo >&2 \"error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'\"; \t\texit 1; \tfi; \t\ttar --extract \t\t--file docker.tgz \t\t--strip-components 1 \t\t--directory /usr/local/bin/ \t; \trm docker.tgz; \t\tdockerd --version; \tdocker --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/modprobe"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "modprobe.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "sh"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/947f4cc0989b3cd9d287e966f0e405df315536f7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql' ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12beta2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1738da8e1e59d4f2dc69c216e67100c6d4dad46714cf597cc2db66077204d31f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&& apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run \t\tutil-linux-dev \t\tzlib-dev \t\ticu-dev \t\t&& cd /usr/src/postgresql \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t\t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t\t--with-icu \t&& make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&& apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name '*.a' -delete"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/958b2e8c85c98087d6898aff82c1180df4c59d9a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "buster-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/9767f8f86de6080e7a2a7797d0ee3ae97ae9fcb7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ruby"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "2.4-slim-stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r redmine && useradd -r -g redmine redmine"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\twget \t\t\t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tgsfonts \t\timagemagick \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdirmngr \t\tgnupg \t; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \t\texport GOSU_VERSION='1.11'; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\texport TINI_VERSION='0.18.0'; \twget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch\"; \twget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5; \tgpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc; \tchmod +x /usr/local/bin/tini; \ttini -h; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RAILS_ENV"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "production"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/redmine"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/home/redmine"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t[ ! -d \"$HOME\" ]; \tmkdir -p \"$HOME\"; \tchown redmine:redmine \"$HOME\"; \tchmod 1777 \"$HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDMINE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.4.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDMINE_DOWNLOAD_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "796384ff56d335fe21da65acf4dba747"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "wget -O redmine.tar.gz \"https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz\" \t&& echo \"$REDMINE_DOWNLOAD_MD5 redmine.tar.gz\" | md5sum -c - \t&& tar -xvf redmine.tar.gz --strip-components=1 \t&& rm redmine.tar.gz files/delete.me log/delete.me \t&& mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids \t&& chown -R redmine:redmine ./ \t&& echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb \t&& chmod -R ugo=rwX config db sqlite \t&& find log tmp -type d -exec chmod 1777 '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibmariadbclient-dev \t\tlibpq-dev \t\tlibsqlite3-dev \t\tmake \t\tpatch \t\t\t\tlibssl1.0-dev \t; \trm -rf /var/lib/apt/lists/*; \t\twget -O freetds.tar.bz2 'http://www.freetds.org/files/stable/freetds-1.00.91.tar.bz2'; \techo '8d71f9f29be0fe0637e443dd3807b3fd *freetds.tar.bz2' | md5sum -c -; \tmkdir freetds; \ttar -xf freetds.tar.bz2 -C freetds --strip-components=1; \trm freetds.tar.bz2; \t( cd freetds && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && ./configure --build=\"$gnuArch\" --enable-silent-rules && make -j \"$(nproc)\" && make -C src install && make -C include install ); \trm -rf freetds; \tgosu redmine bundle config build.tiny_tds --enable-system-freetds; \t\tgosu redmine bundle install --without development test; \tfor adapter in mysql2 postgresql sqlserver sqlite3; do \t\techo \"$RAILS_ENV:\" > ./config/database.yml; \t\techo \"  adapter: $adapter\" >> ./config/database.yml; \t\tgosu redmine bundle install --without development test; \t\tcp Gemfile.lock \"Gemfile.lock.${adapter}\"; \tdone; \trm ./config/database.yml; \tchmod -R ugo=rwX Gemfile.lock \"$GEM_HOME\"; \trm -rf ~redmine/.bundle; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| grep -v '^/usr/local/' \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/redmine/files"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rails"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "server"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-b"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "0.0.0.0"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/989a4ef480205668ee5fc33fca77da064933d09d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "0.11.14"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/src/app"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/app"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "npm"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "start"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9978c50d4052917d0853c721a82c509393a2065a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk-openj9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/99c469501fa9a4d96a518b4703bbd7b02a90be42.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java -version'; java -version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/9c56900710dabe4d3f7368b2b1ac0f437aeebcd1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t\ttzdata \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "177F4010FE56CA3336300305F1656F24C74CD1D8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "10.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MARIADB_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1:10.2.25+maria~bionic"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e;\techo \"deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main\" > /etc/apt/sources.list.d/mariadb.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release o=MariaDB'; \t\techo 'Pin-Priority: 999'; \t} > /etc/apt/preferences.d/mariadb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password password 'unused'; \t\techo \"mariadb-server-$MARIADB_MAJOR\" mysql-server/root_password_again password 'unused'; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\t\"mariadb-server=$MARIADB_VERSION\" \t\tmariadb-backup-10.2 \t\tsocat \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9cb7c8c1bc31f5e97f8537c7e700cce8c3b6953f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-maintainer-zts --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.30"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9d2e696a1c6ee5c9136d85f2ba9553f4241119fe.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibmagickwand-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2enmod rewrite expires"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9d4e12d1f12c7255b2ea4f28b4e78df31c8415df.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "97FC712E4C024BBEA48A61ED3A5CA953F73C700D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9d79702c4f38df771ff7213598146f18ee8f3d1b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "wheezy"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tbuild-essential \t\tpkg-config \t\tgit \t\tpython \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0.11.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NPM_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.1.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \t&& curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \t&& gpg --verify SHASUMS256.txt.asc \t&& grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \t&& tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \t&& rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \t&& npm install -g npm@\"$NPM_VERSION\" \t&& npm cache clear"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9df5821e4057dff4a370a6158d88b049bd6337e6.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/9e24d235132ed455d8750d77e9f55091475304f7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/9f6ee6cdba96f89998894778a42796e02404d579.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\timagemagick-dev \t\tlibjpeg-turbo-dev \t\tlibpng-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .wordpress-phpexts-rundeps $runDeps; \tapk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tbash \t\tless \t\tmysql-client"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmkdir -p /var/www/html; \tchown -R www-data:www-data /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "63AF7AA15067C05616FDDD88A3A2E8F226F0BC06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.2.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_CLI_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2103f04a5014d629eaa42755815c9cec6bb489ed7b0ea6e77dedb309e8af098ab902b2f9c6369ae4b7cb8cc1f20fbb4dedcda83eb1d0c34b880fa6e8a3ae249d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t; \t\tcurl -o /usr/local/bin/wp.gpg -fSL \"https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$WORDPRESS_CLI_GPG_KEY\"; \tgpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\" /usr/local/bin/wp.gpg; \t\techo \"$WORDPRESS_CLI_SHA512 */usr/local/bin/wp\" | sha512sum -c -; \tchmod +x /usr/local/bin/wp; \t\tapk del .fetch-deps; \t\twp --allow-root --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "www-data"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "wp"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "shell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a109332df07c7c131654487d3ae5d885f437784e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgmp-dev"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7-rc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.0-preview1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8c546df3345398b3edc9d0ab097846f033783d33762889fd0f3dc8bb465c3354"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .ruby-builddeps \t\tautoconf \t\tbison \t\tbzip2 \t\tbzip2-dev \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgdbm-dev \t\tglib-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl \t\topenssl-dev \t\tprocps \t\treadline-dev \t\truby \t\ttar \t\txz \t\tyaml-dev \t\tzlib-dev \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \t&& echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \t&& patch -p1 -i thread-stack-fix.patch \t&& rm thread-stack-fix.patch \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-network --virtual .ruby-rundeps $runDeps \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tprocps \t\tyaml-dev \t\tzlib-dev \t&& apk del --no-network .ruby-builddeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a1a581c75cee365923e8bb22697e747c1e1009cb.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "E3FF2839C048B25C084DEBE9B26995E310250568"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0b1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tutil-linux-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a27c7d503a860f701d00c563ed695af03a5df72d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.msi'; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'python.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'TARGETDIR=C:\\Python', \t\t\t'ALLUSERS=1', \t\t\t'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install --no-cache-dir virtualenv"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a288f727bd12d38fa02bbb6d6547d23e567a0c46.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a31b702830630aec34c396f7bdcbaf7705bb19ac.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install --no-cache-dir virtualenv"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a38778791e85590f88d617c868fce97c2b4241a2.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHONIOENCODING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\tlibressl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-shared \t\t--enable-unicode=ucs4 \t\t--with-system-expat \t\t--with-system-ffi \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python2 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python2"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a394fb56c15836eaa1d012253738a251b8b4f5fd.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "B215C1633BCA0477615F1B35A5B3A004745C015A \tB3C42148A44E6983B3E4CC0793FA9B1AB75C61B8 \t90AA470469D3965A87A5DCB494D03953902C9419 \t80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C \t7F74F97C103468EE5D750B583AB00996FC26A641 \t33C235A34C46AA3FFB293709A328C3A2C3C45C06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_MIRRORS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://ftpmirror.gnu.org/gcc \t\thttps://bigsearcher.com/mirrors/gcc/releases \t\thttps://mirrors-usa.go-parts.com/gcc/releases \t\thttps://mirrors.concertpass.com/gcc/releases \t\thttp://www.netgull.com/gcc/releases"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.1.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tflex \t; \trm -r /var/lib/apt/lists/*; \t\t_fetch() { \t\tlocal fetch=\"$1\"; shift; \t\tlocal file=\"$1\"; shift; \t\tfor mirror in $GCC_MIRRORS; do \t\t\tif curl -fL \"$mirror/$fetch\" -o \"$file\"; then \t\t\t\treturn 0; \t\t\tfi; \t\tdone; \t\techo >&2 \"error: failed to download '$fetch' from several mirrors\"; \t\treturn 1; \t}; \t\t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\" 'gcc.tar.xz.sig' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\"; \t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz'; \tgpg --batch --verify gcc.tar.xz.sig gcc.tar.xz; \tmkdir -p /usr/src/gcc; \ttar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1; \trm gcc.tar.xz*; \t\tcd /usr/src/gcc; \t\t./contrib/download_prerequisites; \t{ rm *.tar.* || true; }; \t\tfor f in config.guess config.sub; do \t\twget -O \"$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \t\tfind -mindepth 2 -name \"$f\" -exec cp -v \"$f\" '{}' ';'; \tdone; \t\tdir=\"$(mktemp -d)\"; \tcd \"$dir\"; \t\textraConfigureArgs=''; \tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tarmel) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv4t --with-float=soft\" \t\t\t;; \t\tarmhf) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb\" \t\t\t;; \t\t\t\ti386) \t\t\tosVersionID=\"$(set -e; . /etc/os-release; echo \"$VERSION_ID\")\"; \t\t\tcase \"$osVersionID\" in \t\t\t\t8) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i586\" ;; \t\t\t\t*) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i686\" ;; \t\t\tesac; \t\t\t;; \tesac; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t/usr/src/gcc/configure \t\t--build=\"$gnuArch\" \t\t--disable-multilib \t\t--enable-languages=c,c++,fortran,go \t\t$extraConfigureArgs \t; \tmake -j \"$(nproc)\"; \tmake install-strip; \t\tcd ..; \t\trm -rf \"$dir\" /usr/src/gcc; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \techo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf; \tldconfig -v"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc; \tdpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++; \tdpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran; \tupdate-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/a3c536a8ce341afa25419bbc10d0d982155e104c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  javac -version'; javac -version; \tWrite-Host '  java -version'; java -version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/a40a1e8d49483249db47a31eb89d548899de56dc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "perl"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "5.28-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\twget \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERL_CPANM_OPT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--verbose --mirror https://cpan.metacpan.org"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm App::cpanminus"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgcc \t\tlibc-dev \t\tlibssl-dev \t\tzlib1g-dev \t; \trm -rf /var/lib/apt/lists/*; \tcpanm \t\tEV \t\tIO::Socket::IP \t\tIO::Socket::Socks \t\tNet::DNS::Native \t; \tcpanm --notest IO::Socket::SSL; \tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark > /dev/null; \tapt-get purge -y --auto-remove"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LIBEV_FLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm Mojolicious@8.15"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "put-multiarch.pl"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "put-multiarch.pl"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        }
    ],
    "meta_info": "./dataset/source/a46047bb3a77f474f33bddee82433f3702685f4d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%ALPINE_VERSION%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%HAPROXY_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%HAPROXY_URL%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%HAPROXY_SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgcc \t\tlibc-dev \t\tlinux-headers \t\tlua5.3-dev \t\tmake \t\topenssl \t\topenssl-dev \t\tpcre2-dev \t\treadline-dev \t\ttar \t\tzlib-dev \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux-glibc \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(getconf _NPROCESSORS_ONLN)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .haproxy-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a4dda53b1febd447de29764072188a29f720f919.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\tuuid-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a62087e4b0d69dd5fe7e9a825f2c66e555d882d3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.4"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/src/app"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/app"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tgcc \t\tgettext \t\tmysql-client libmysqlclient-dev \t\tpostgresql-client libpq-dev \t\tsqlite3 \t--no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "manage.py"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "runserver"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "0.0.0.0:8000"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a69caadf53b9d161fb2fd80096456fcb14429b25.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "13-ea+26"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/early_access/jdk13/26/GPL/openjdk-13-ea+26_windows-x64_bin.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "945b2957d2600d6bf220442a1c5a4c9acc9f77d4fc26a2039fdfc84affa33668"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java --version'; java --version; \tWrite-Host '  javac --version'; javac --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a80fec6e5db7c6fa38203d95599936fe21963aab.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tif command -v a2enmod; then \t\ta2enmod rewrite; \tfi; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.6.17"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9018a2d11381aeb0e269ca696fed9ac5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/a8b5be123d92f7858a5ce93f935f0997b589b8b1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/a8f77acefc49fc3cd97ae0fd6cbdf3c18212dc67.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.6.14-1.pgdg90+1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\"postgresql-contrib-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/aa0fbdbac532f5324b4871fb570d58d7b0ac09f3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/aaf505fc6efd672143ac63292122207db3f8b19b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.2.0-rc1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2012plus-4.2.0-rc1-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "379bcf1725c19c6ff2f2f159ef4e22c9a4ba32692a994e809457f1053c50066f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/acaf1c9d122b90ff54035206a1cff12c4fbb02f9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r redis && useradd -r -g redis redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=\" \t\tca-certificates \t\tdirmngr \t\tgnupg \t\twget \t\"; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.0.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "http://download.redis.io/releases/redis-5.0.5.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_SHA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2139009799d21d8ff94fc40b7f36ac46699b9e1254086299f8d3b223ca54a375"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tlibc6-i386 \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tbuildDeps=' \t\tca-certificates \t\twget \t\t\t\tgcc \t\tgcc-multilib \t\tlibc6-dev-i386 \t\tmake \t'; \tapt-get update; \tapt-get install -y $buildDeps --no-install-recommends; \trm -rf /var/lib/apt/lists/*; \t\twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | sha256sum -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \trm redis.tar.gz; \t\tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \tsed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \t\tmake -C /usr/src/redis -j \"$(nproc)\" 32bit; \tmake -C /usr/src/redis install; \t\trm -r /usr/src/redis; \t\tapt-get purge -y --auto-remove $buildDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /data && chown redis:redis /data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "6379"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "redis-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/ad0439ae23c671b94dc271c34a9962321a0e08d7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibmagickwand-dev \t\tlibpng-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install \t\tbcmath \t\texif \t\tgd \t\tmysqli \t\topcache \t\tzip \t; \tpecl install imagick-3.4.4; \tdocker-php-ext-enable imagick; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=2'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'error_reporting = 4339'; \t\techo 'display_errors = Off'; \t\techo 'display_startup_errors = Off'; \t\techo 'log_errors = On'; \t\techo 'error_log = /dev/stderr'; \t\techo 'log_errors_max_len = 1024'; \t\techo 'ignore_repeated_errors = On'; \t\techo 'ignore_repeated_source = Off'; \t\techo 'html_errors = Off'; \t} > /usr/local/etc/php/conf.d/error-logging.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.2.2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "WORDPRESS_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3605bcbe9ea48d714efa59b0eb2d251657e7d5b0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \ttar -xzf wordpress.tar.gz -C /usr/src/; \trm wordpress.tar.gz; \tchown -R www-data:www-data /usr/src/wordpress"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/af756098f19f4156a00579320f686199cb8818ac.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.6.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.6/src/haproxy-1.6.14.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "bac949838a3a497221d1a9e937d60cba32156783a216146a524ce40675b6b828"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tgcc \t\tlibc6-dev \t\tliblua5.3-dev \t\tlibpcre2-dev \t\tlibssl1.0-dev \t\tmake \t\twget \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(nproc)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& apt-mark auto '.*' > /dev/null \t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/afa13a41669dda197c319642fd695ee79b5b8c1a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "B215C1633BCA0477615F1B35A5B3A004745C015A \tB3C42148A44E6983B3E4CC0793FA9B1AB75C61B8 \t90AA470469D3965A87A5DCB494D03953902C9419 \t80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C \t7F74F97C103468EE5D750B583AB00996FC26A641 \t33C235A34C46AA3FFB293709A328C3A2C3C45C06"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_MIRRORS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://ftpmirror.gnu.org/gcc \t\thttps://bigsearcher.com/mirrors/gcc/releases \t\thttps://mirrors-usa.go-parts.com/gcc/releases \t\thttps://mirrors.concertpass.com/gcc/releases \t\thttp://www.netgull.com/gcc/releases"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GCC_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "6.5.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tflex \t; \trm -r /var/lib/apt/lists/*; \t\t_fetch() { \t\tlocal fetch=\"$1\"; shift; \t\tlocal file=\"$1\"; shift; \t\tfor mirror in $GCC_MIRRORS; do \t\t\tif curl -fL \"$mirror/$fetch\" -o \"$file\"; then \t\t\t\treturn 0; \t\t\tfi; \t\tdone; \t\techo >&2 \"error: failed to download '$fetch' from several mirrors\"; \t\treturn 1; \t}; \t\t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\" 'gcc.tar.xz.sig' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig\"; \t_fetch \"gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz' \t\t|| _fetch \"$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\" 'gcc.tar.xz'; \tgpg --batch --verify gcc.tar.xz.sig gcc.tar.xz; \tmkdir -p /usr/src/gcc; \ttar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1; \trm gcc.tar.xz*; \t\tcd /usr/src/gcc; \t\t./contrib/download_prerequisites; \t{ rm *.tar.* || true; }; \t\tfor f in config.guess config.sub; do \t\twget -O \"$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \t\tfind -mindepth 2 -name \"$f\" -exec cp -v \"$f\" '{}' ';'; \tdone; \t\tdir=\"$(mktemp -d)\"; \tcd \"$dir\"; \t\textraConfigureArgs=''; \tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tarmel) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv4t --with-float=soft\" \t\t\t;; \t\tarmhf) \t\t\textraConfigureArgs=\"$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb\" \t\t\t;; \t\t\t\ti386) \t\t\tosVersionID=\"$(set -e; . /etc/os-release; echo \"$VERSION_ID\")\"; \t\t\tcase \"$osVersionID\" in \t\t\t\t8) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i586\" ;; \t\t\t\t*) extraConfigureArgs=\"$extraConfigureArgs --with-arch-32=i686\" ;; \t\t\tesac; \t\t\t;; \tesac; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t/usr/src/gcc/configure \t\t--build=\"$gnuArch\" \t\t--disable-multilib \t\t--enable-languages=c,c++,fortran,go \t\t$extraConfigureArgs \t; \tmake -j \"$(nproc)\"; \tmake install-strip; \t\tcd ..; \t\trm -rf \"$dir\" /usr/src/gcc; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \techo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf; \tldconfig -v"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc; \tdpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++; \tdpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran; \tupdate-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/b043f7fc1cbaa463a9fdcd621f584feda373d430.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates p11-kit \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/openjdk-11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3_7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdirmngr \t\tgnupg \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac --version; \tjava --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b22a5cf73b87d2a1bc3cf126c617a12fcf856964.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf && gpgconf --kill all || :; } \t&& rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_ENV"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "production"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tnpm install -g \"ghost-cli@$GHOST_CLI_VERSION\"; \tnpm cache clean --force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_INSTALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CONTENT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost/content"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.25.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$GHOST_INSTALL\"; \tchown node:node \"$GHOST_INSTALL\"; \t\tgosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\"; \t\tcd \"$GHOST_INSTALL\"; \tgosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\"; \tgosu node ghost config paths.contentPath \"$GHOST_CONTENT\"; \t\tgosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\"; \treadlink -f \"$GHOST_INSTALL/config.development.json\"; \t\tmv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\"; \tmkdir -p \"$GHOST_CONTENT\"; \tchown node:node \"$GHOST_CONTENT\"; \t\t\"$GHOST_INSTALL/current/node_modules/knex-migrator/bin/knex-migrator\" --version; \t\tcd \"$GHOST_INSTALL/current\"; \tsqlite3Version=\"$(npm view . optionalDependencies.sqlite3)\"; \tif ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force; then \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \t\tapt-get install -y --no-install-recommends python make gcc g++ libc-dev; \t\trm -rf /var/lib/apt/lists/*; \t\t\t\tgosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source; \t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \t\tapt-get purge -y --auto-remove; \tfi; \t\tgosu node yarn cache clean; \tgosu node npm cache clean --force; \tnpm cache clean --force; \trm -rv /tmp/yarn* /tmp/v8*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:$GHOST_INSTALL/current/node_modules/knex-migrator/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_INSTALL"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_CONTENT"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2368"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "current/index.js"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b28dcc0d74e235364ea39ccf37fa7fe244f7cde7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tif command -v a2enmod; then \t\ta2enmod rewrite; \tfi; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.6.17"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9018a2d11381aeb0e269ca696fed9ac5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/b2b8124148b7b7957caf9938331bdddeef695089.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "SUITE-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/b2f58bbcdc35a3ffb08424af86215b8fdc8fc0ad.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "addgroup -S redis && adduser -S -G redis redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\t'su-exec>=0.2' \t\ttzdata"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "http://download.redis.io/releases/redis-4.0.14.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_SHA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapk add --no-cache --virtual .build-deps \t\tcoreutils \t\tgcc \t\tlinux-headers \t\tmake \t\tmusl-dev \t; \t\twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | sha256sum -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \trm redis.tar.gz; \t\tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \tsed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \t\tmake -C /usr/src/redis -j \"$(nproc)\"; \tmake -C /usr/src/redis install; \t\trm -r /usr/src/redis; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --virtual .redis-rundeps $runDeps; \tapk del .build-deps; \t\tredis-server --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /data && chown redis:redis /data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "6379"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "redis-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b3ac93e9b8fb881194aef47612fc929b1bdf9628.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r redis && useradd -r -g redis redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=\" \t\tca-certificates \t\tdirmngr \t\tgnupg \t\twget \t\"; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tgpgconf --kill all; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "http://download.redis.io/releases/redis-4.0.14.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "REDIS_DOWNLOAD_SHA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tbuildDeps=' \t\twget \t\t\t\tgcc \t\tlibc6-dev \t\tmake \t'; \tapt-get update; \tapt-get install -y $buildDeps --no-install-recommends; \trm -rf /var/lib/apt/lists/*; \t\twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \techo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | sha256sum -c -; \tmkdir -p /usr/src/redis; \ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \trm redis.tar.gz; \t\tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \tsed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \tgrep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \t\tmake -C /usr/src/redis -j \"$(nproc)\"; \tmake -C /usr/src/redis install; \t\trm -r /usr/src/redis; \t\tapt-get purge -y --auto-remove $buildDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /data && chown redis:redis /data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "6379"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "redis-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b3cbe2ad86d0995b2f25339d4e8e54dc671f6f84.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk-openj9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b429b4f7bc19e622222c9f285e2c29eaaef440e5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.0.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/2.0/src/haproxy-2.0.0.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "fe0a0d69e1091066a91b8d39199c19af8748e0e872961c6fc43c91ec7a28ff20"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tgcc \t\tlibc6-dev \t\tliblua5.3-dev \t\tlibpcre2-dev \t\tlibssl-dev \t\tmake \t\twget \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux-glibc \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(nproc)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& apt-mark auto '.*' > /dev/null \t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b5277da344727e7ea4c44999b4e306e7da036adf.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.7-rc-alpine"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "rabbitmq-plugins enable --offline rabbitmq_management"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \terl -noinput -eval ' \t\t{ ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) -> \t\t\tcase Acc of \t\t\t\t\"\" -> \t\t\t\t\tcase lists:suffix(\"/rabbitmqadmin\", FileInArchive) of \t\t\t\t\t\ttrue -> GetBin(); \t\t\t\t\t\tfalse -> Acc \t\t\t\t\tend; \t\t\t\t_ -> Acc \t\t\tend \t\tend, \"\", init:get_plain_arguments()), \t\tio:format(\"~s\", [ AdminBin ]), \t\tinit:stop(). \t' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin; \t[ -s /usr/local/bin/rabbitmqadmin ]; \tchmod +x /usr/local/bin/rabbitmqadmin; \tapk add --no-cache python; \trabbitmqadmin --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "15671"
                }
            ],
            "type": "DOCKER-EXPOSE"
        }
    ],
    "meta_info": "./dataset/source/b5487f01519c626455dc09d1cd32d69e22cec326.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "wheezy"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tbuild-essential \t\tpkg-config \t\tgit \t\tpython \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0.8.28"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NPM_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.1.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \t&& curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \t&& gpg --verify SHASUMS256.txt.asc \t&& grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \t&& tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \t&& rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \t&& npm install -g npm@1.4.28 \t&& npm install -g npm@\"$NPM_VERSION\" \t&& npm cache clear"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b5a8cf20b4b34f76bcb30f26da18fd6d057a0bea.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "bionic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mongodb && useradd -r -g mongodb mongodb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tjq \t\tnumactl \t; \tif ! command -v ps > /dev/null; then \t\tapt-get install -y --no-install-recommends procps; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JSYAML_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.13.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\twget \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu --version; \tgosu nobody true; \t\twget -O /js-yaml.js \"https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js\"; \t\tapt-get purge -y --auto-remove wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "E162F504A20CDF15827F718D4B7C549A058F8B6B"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "mongodb-org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "repo.mongodb.org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_PACKAGE}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_REPO}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "testing"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.2.0~rc1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://$MONGO_REPO/apt/ubuntu bionic/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse\" | tee \"/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update \t&& apt-get install -y \t\t${MONGO_PACKAGE}=$MONGO_VERSION \t\t${MONGO_PACKAGE}-server=$MONGO_VERSION \t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION \t\t${MONGO_PACKAGE}-mongos=$MONGO_VERSION \t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION \t&& rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mongodb \t&& mv /etc/mongod.conf /etc/mongod.conf.orig"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b5cb1d87f05145eb6e4dab1b0220ec7d8b871ef9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk-hotspot"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b61557beb7305fe3949e001d81e2f8377f55302f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "cosmic"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tnetbase \t\twget \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/b81a8cc88472825e4abe5335dca61a42c05b9b08.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java --version'; java --version; \tWrite-Host '  javac --version'; javac --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/b82db444ec87fa7e2912b4e6be106f58701d7062.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/ba805b53bf85b9b973529e6b258030334378c7fc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "19.03-rc"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgit \t\topenssh-client"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/ba9c3e9705b98ebdc72ef3a4c15f62934149e290.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.30"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bb646a346a60864ca472dfc2f617d3f016dea887.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t\techo 'decorate_workers_output = no'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bc36c2aee99918e02b2043f59879d9dc038101fc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.7.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.msi'; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'python.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'TARGETDIR=C:\\Python', \t\t\t'ALLUSERS=1', \t\t\t'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install --no-cache-dir virtualenv"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bc480ee23d6959deb602db20d7dd28ffc488b38d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update \t&& apt-get install -y --no-install-recommends \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tlibgdbm3 \t\tlibgmp-dev \t\tlibssl-dev \t\tlibyaml-dev \t\tprocps \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.5.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9bf6370aaa82c284f193264cc7ca56f202171c32367deceb3599a4f354175d7d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tautoconf \t\tbison \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibgdbm-dev \t\tlibglib2.0-dev \t\tlibncurses-dev \t\tlibreadline-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tmake \t\truby \t\twget \t\txz-utils \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t\t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bceec186f87e9e6f2a0df69bb1c7685f5ee58232.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.2-apache"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tif command -v a2enmod; then \t\ta2enmod rewrite; \tfi; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.67"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "78b1814e55fdaf40e753fd523d059f8d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/be08873a4009fc8281d926bb0e49772e5ba958c5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.5-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd user && useradd --create-home --home-dir /home/user -g user user"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/home/user"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install redis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CELERY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install celery==\"$CELERY_VERSION\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \techo 'import os'; \techo \"BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'amqp://')\"; } > celeryconfig.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CELERY_BROKER_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "amqp://guest@rabbit"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "user"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "celery"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "worker"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/be587a3d07a8671848b3c9261cb846bfa54edd20.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "wheezy"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t\tbuild-essential \t\tpkg-config \t\tgit \t\tpython \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0.10.35"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NPM_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.1.18"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \t&& curl -SLO \"http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \t&& gpg --verify SHASUMS256.txt.asc \t&& grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \t&& tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \t&& rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \t&& npm install -g npm@\"$NPM_VERSION\" \t&& npm cache clear"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bed9c0d43acadbd0e3b65c2f5f653ad0f7af0c05.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "oraclelinux"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tyum install -y \t\tgzip \t\ttar \t\t\t\tfreetype fontconfig \t; \trm -rf /var/cache/yum"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tcurl -fL -o /openjdk.tgz \"$JAVA_URL\"; \techo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c -; \tmkdir -p \"$JAVA_HOME\"; \ttar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1; \trm /openjdk.tgz; \t\tln -sfT \"$JAVA_HOME\" /usr/java/default; \tln -sfT \"$JAVA_HOME\" /usr/java/latest; \tfor bin in \"$JAVA_HOME/bin/\"*; do \t\tbase=\"$(basename \"$bin\")\"; \t\t[ ! -e \"/usr/bin/$base\" ]; \t\talternatives --install \"/usr/bin/$base\" \"$base\" \"$bin\" 20000; \tdone; \t\tjava -Xshare:dump; \t\tjava --version; \tjavac --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bf248f1881c333b991ddb208e8ae6351eb2f8b7e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/bf27418566d9440a1e9cec1d88e7354f095e01df.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "0.8.28"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/src/app"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/app"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "npm"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "start"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bf89d91801e1c1cfa28783cd85363de47a103441.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpostgresHome=\"$(getent passwd postgres)\"; \tpostgresHome=\"$(echo \"$postgresHome\" | cut -d: -f6)\"; \t[ \"$postgresHome\" = '/var/lib/postgresql' ]; \tmkdir -p \"$postgresHome\"; \tchown -R postgres:postgres \"$postgresHome\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "02802ddffd1590805beddd1e464dd28a46a41a5f1e1df04bab4f46663195cc8b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .fetch-deps \t\tca-certificates \t\topenssl \t\ttar \t\t&& wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \t&& echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \t&& mkdir -p /usr/src/postgresql \t&& tar \t\t--extract \t\t--file postgresql.tar.bz2 \t\t--directory /usr/src/postgresql \t\t--strip-components 1 \t&& rm postgresql.tar.bz2 \t\t&& apk add --no-cache --virtual .build-deps \t\tbison \t\tcoreutils \t\tdpkg-dev dpkg \t\tflex \t\tgcc \t\tlibc-dev \t\tlibedit-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\topenssl-dev \t\tperl-utils \t\tperl-ipc-run \t\tutil-linux-dev \t\tzlib-dev \t\ticu-dev \t\t&& cd /usr/src/postgresql \t&& awk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \t&& grep '/var/run/postgresql' src/include/pg_config_manual.h.new \t&& mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-integer-datetimes \t\t--enable-thread-safety \t\t--enable-tap-tests \t\t--disable-rpath \t\t--with-uuid=e2fs \t\t--with-gnu-ld \t\t--with-pgport=5432 \t\t--with-system-tzdata=/usr/share/zoneinfo \t\t--prefix=/usr/local \t\t--with-includes=/usr/local/include \t\t--with-libraries=/usr/local/lib \t\t\t\t--with-openssl \t\t--with-libxml \t\t--with-libxslt \t\t--with-icu \t&& make -j \"$(nproc)\" world \t&& make install-world \t&& make -C contrib install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache --virtual .postgresql-rundeps \t\t$runDeps \t\tbash \t\tsu-exec \t\ttzdata \t&& apk del .fetch-deps .build-deps \t&& cd / \t&& rm -rf \t\t/usr/src/postgresql \t\t/usr/local/share/doc \t\t/usr/local/share/man \t&& find /usr/local -name '*.a' -delete"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/bfc79d5d002dfe2f3ac9e92b3106224886d06ef0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/c02dd2c0d98daf146ff8a2e53cd4efa5d0436528.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "xenial"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mongodb && useradd -r -g mongodb mongodb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tjq \t\tnumactl \t; \tif ! command -v ps > /dev/null; then \t\tapt-get install -y --no-install-recommends procps; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JSYAML_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.13.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\twget \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu --version; \tgosu nobody true; \t\twget -O /js-yaml.js \"https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js\"; \t\tapt-get purge -y --auto-remove wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0C49F3730359A14518585931BC711F9BA15703C6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "mongodb-org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "repo.mongodb.org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_PACKAGE}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_REPO}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.4.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse\" | tee \"/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update \t&& apt-get install -y \t\t${MONGO_PACKAGE}=$MONGO_VERSION \t\t${MONGO_PACKAGE}-server=$MONGO_VERSION \t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION \t\t${MONGO_PACKAGE}-mongos=$MONGO_VERSION \t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION \t&& rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mongodb \t&& mv /etc/mongod.conf /etc/mongod.conf.orig"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat (3.4)"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c13cc3df57368fc86fc4072508c8e1999dda5ddc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.1.30"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c178dfacc06d00ef7a899370d758e45cb33d675b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t\tuuid-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c180a006e0c16851fbae758c7e816a9a6aa6bb7d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8d26ac8181b2be109ec811767ea87d45afc6e3bc45c56c3cb78df14ca6d8c829"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\\julia\\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install (\"julia --version\") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c19c90b0860ad68e32585ef463598d58fffc238b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "2.7"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/src/app"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/app"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\tgcc \t\tgettext \t\tmysql-client libmysqlclient-dev \t\tpostgresql-client libpq-dev \t\tsqlite3 \t--no-install-recommends && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "manage.py"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "runserver"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "0.0.0.0:8000"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c2cde455227c02697571d97c3f3dedf64e9ddf36.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.0.3_7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  javac --version'; javac --version; \tWrite-Host '  java --version'; java --version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c4362f36a65a6ea57741c2ba4150ba5d93763b48.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\tuuid-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c436603b43f440409f12218bdd73bdfbc421ba65.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker-tianon"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "tianon"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\twget \t\tgit \t; \tsuite=\"$(awk '$1 == \"deb\" && $4 == \"main\" && $3 !~ /[\\/-]/ { print $3; exit }' /etc/apt/sources.list)\"; \techo \"deb http://deb.debian.org/debian $suite-backports main\" > /etc/apt/sources.list.d/backports.list; \tapt-get update; \tapt-get install -y --no-install-recommends -t \"$suite-backports\" \t\tgolang-go \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/src/official-images"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$DIR/bashbrew/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BASHBREW_LIBRARY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$DIR/library"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BASHBREW_CACHE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/bashbrew-cache"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$BASHBREW_CACHE\" \t&& chmod 1777 \"$BASHBREW_CACHE\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$DIR"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "$DIR"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "."
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tCGO_ENABLED=0 ./bashbrew/bashbrew.sh --help > /dev/null; \tcp -vL bashbrew/go/bin/bashbrew /usr/local/bin/"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$BASHBREW_CACHE"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s \"$PWD/bashbrew/bashbrew-entrypoint.sh\" /usr/local/bin/bashbrew-entrypoint.sh"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "bashbrew-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        }
    ],
    "meta_info": "./dataset/source/c492dadb9187b5b71192ce2402f439cf355345ab.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.0.94"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c4b4fdb47013100e26fb37dc9d819171341e9784.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "xenial"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mongodb && useradd -r -g mongodb mongodb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tjq \t\tnumactl \t; \tif ! command -v ps > /dev/null; then \t\tapt-get install -y --no-install-recommends procps; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JSYAML_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.13.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\twget \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu --version; \tgosu nobody true; \t\twget -O /js-yaml.js \"https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js\"; \t\tapt-get purge -y --auto-remove wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9DA31620334BD75D9DCB49F368818C72E52529D4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "mongodb-org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "repo.mongodb.org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_PACKAGE}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_REPO}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse\" | tee \"/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update \t&& apt-get install -y \t\t${MONGO_PACKAGE}=$MONGO_VERSION \t\t${MONGO_PACKAGE}-server=$MONGO_VERSION \t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION \t\t${MONGO_PACKAGE}-mongos=$MONGO_VERSION \t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION \t&& rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mongodb \t&& mv /etc/mongod.conf /etc/mongod.conf.orig"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c5a6f3fc4363d8fcc011a7faa54c40f0d2d71b22.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.6.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11a83f85c03d3f0fc9b8a9b6cad1b2674f26c5aaa43ba858d4b0fcc2b54171e1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& buildDeps=' \t\tbison \t\tdpkg-dev \t\tlibgdbm-dev \t\truby \t' \t&& apt-get update \t&& apt-get install -y --no-install-recommends $buildDeps \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-get purge -y --auto-remove $buildDeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c6045ad41af5196a887e2888eb5296706f8b7855.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%DEBIAN_VERSION%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%HAPROXY_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%HAPROXY_URL%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%HAPROXY_SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tgcc \t\tlibc6-dev \t\tliblua5.3-dev \t\tlibpcre2-dev \t\tlibssl-dev \t\tmake \t\twget \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux-glibc \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(nproc)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& apt-mark auto '.*' > /dev/null \t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c72e58023cf8ccd5265aee852cf201685eface3e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tcurl \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/julia"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JULIA_PATH/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_GPG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3673DF529D9049477F76B37566E3C7DC03D6E495"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JULIA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) tarArch='x86_64'; dirArch='x64'; sha256='f0a83a139a89a2ccf2316814e5ee1c0c809fca02cbaf4baf3c1fd8eb71594f06' ;; \t\tarm64) tarArch='aarch64'; dirArch='aarch64'; sha256='3d9ba9c2204ea920006b3a91ecd2803cac808b29250f2120000e29fc0384099a' ;; \t\ti386) tarArch='i686'; dirArch='x86'; sha256='3e6941326522ac4bc34c5663c2c5752417e92677ff9befc56ba264eb283f37f1' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding Julia binary release\"; exit 1 ;; \tesac; \t\tfolder=\"$(echo \"$JULIA_VERSION\" | cut -d. -f1-2)\"; \tcurl -fL -o julia.tar.gz.asc \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc\"; \tcurl -fL -o julia.tar.gz     \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz\"; \t\techo \"${sha256} *julia.tar.gz\" | sha256sum -c -; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$JULIA_GPG\"; \tgpg --batch --verify julia.tar.gz.asc julia.tar.gz; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\" julia.tar.gz.asc; \t\tmkdir \"$JULIA_PATH\"; \ttar -xzf julia.tar.gz -C \"$JULIA_PATH\" --strip-components 1; \trm julia.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tjulia --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "julia"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c73d9783e23e52ebcce9ddde9ac9b391bab5cc15.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tlibexpat1 \t\tlibffi6 \t\tlibgdbm3 \t\tlibsqlite3-0 \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.0.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) pypyArch='linux64'; sha256='729e3c54325969c98bd3658c6342b9f5987b96bad1d6def04250a08401b54c4b' ;; \t\ti386) pypyArch='linux32'; sha256='b8db8fbca9621de8ea8cd7184b322f2dddb2f385e8e5a63dfb75bb3fea4b2e3f' ;; \t\tppc64el) pypyArch='ppc64le'; sha256='2912884da05abc2cdf71dd337c3f280095351312c1a1732a52b6878174a0fd02' ;; \t\ts390x) pypyArch='s390x'; sha256='d588b045cc0d3a75c31fce54c1d181b1206ad9a5dd272fe79160a6268401605f' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release\"; exit 1 ;; \tesac; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\twget \t\tlibncurses5 \t; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/pypy3.5-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\tpypy3 --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tapt-get install -y --no-install-recommends gcc libc6-dev libssl-dev; \t\tcd /usr/local/lib_pypy; \t\tpypy3 _ssl_build.py; \tfi; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpypy3 get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \tpypy3 --version; \tpip --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "pypy3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c74e0a15fc91452b4053a65749b0be0862b66510.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%SUITE%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjemalloc1 \t\tprocps \t\tiproute2 \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends \t\t\tdirmngr \t\t\tgnupg \t\t; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "514A2AD631A57A16DD0047EC749D6EEC0353B12C \tA26E528B271F19B9E5D8E19EA278B781FE4B2BDA"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%CASSANDRA_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tmkdir -p /usr/share/man/man1/; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386) \t\t\techo 'deb http://www.apache.org/dist/cassandra/debian %%CASSANDRA_DIST%%x main' > /etc/apt/sources.list.d/cassandra.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get install -y --no-install-recommends \t\t\t\twget ca-certificates \t\t\t\tdpkg-dev \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tfor pkg in cassandra cassandra-tools; do \t\t\t\tdeb=\"${pkg}_${CASSANDRA_VERSION}_all.deb\"; \t\t\t\twget -O \"$tempDir/$deb\" \"https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb\"; \t\t\tdone; \t\t\t\t\t\tls -lAFh \"$tempDir\"; \t\t\t( cd \"$tempDir\" && dpkg-scanpackages . > Packages ); \t\t\tgrep '^Package: ' \"$tempDir/Packages\"; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y \t\tcassandra=\"$CASSANDRA_VERSION\" \t\tcassandra-tools=\"$CASSANDRA_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/cassandra"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tppc64el) \t\t\tif grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\"; then \t\t\t\tgrep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tsed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tgrep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\telif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; then \t\t\t\tsed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\t\tgrep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\tfi; \t\t\t;; \tesac; \t\tsed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chown -R cassandra:cassandra /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chmod 777 /var/lib/cassandra \"$CASSANDRA_CONFIG\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/cassandra"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "7000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cassandra"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c7dceeceb6a3dbedd26e1243868b82426711a4b1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev dpkg \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkgconf \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates \t\tcurl \t\ttar \t\txz \t\topenssl"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -g 82 -S www-data \t&& adduser -u 82 -D -S -G www-data www-data"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.2.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tapk add --no-cache --virtual .fetch-deps \t\tgnupg \t\twget \t; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapk del --no-network .fetch-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe \t&& apk add --no-cache --virtual .build-deps \t\t$PHPIZE_DEPS \t\targon2-dev \t\tcoreutils \t\tcurl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibxml2-dev \t\topenssl-dev \t\tsqlite-dev \t\t&& export CFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t&& docker-php-source extract \t&& cd /usr/src/php \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t\t\t$PHP_EXTRA_CONFIGURE_ARGS \t&& make -j \"$(nproc)\" \t&& find -type f -name '*.a' -delete \t&& make install \t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \t&& make clean \t\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \t\t&& cd / \t&& docker-php-source delete \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-cache $runDeps \t\t&& apk del --no-network .build-deps \t\t&& pecl update-channels \t&& rm -rf /tmp/pear ~/.pearrc \t&& php --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c8f7e39cc87328ebd91d63dbc764ad7d73be3be9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-hotspot"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/c9ce9ac0f2dad0276f3fc558dfc4cb123b42b357.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PHP_VERSION%%-%%VARIANT%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tif command -v a2enmod; then \t\ta2enmod rewrite; \tfi; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%MD5%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/ca4acdafd2a1886c6fe0440e939eded376856338.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "redis"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/ca4c40d8641448c600ca2dc20dda7d57b0a973f5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjemalloc1 \t\tprocps \t\tiproute2 \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends \t\t\tdirmngr \t\t\tgnupg \t\t; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "514A2AD631A57A16DD0047EC749D6EEC0353B12C \tA26E528B271F19B9E5D8E19EA278B781FE4B2BDA"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.2.14"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tmkdir -p /usr/share/man/man1/; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386) \t\t\techo 'deb http://www.apache.org/dist/cassandra/debian 22x main' > /etc/apt/sources.list.d/cassandra.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get install -y --no-install-recommends \t\t\t\twget ca-certificates \t\t\t\tdpkg-dev \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tfor pkg in cassandra cassandra-tools; do \t\t\t\tdeb=\"${pkg}_${CASSANDRA_VERSION}_all.deb\"; \t\t\t\twget -O \"$tempDir/$deb\" \"https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb\"; \t\t\tdone; \t\t\t\t\t\tls -lAFh \"$tempDir\"; \t\t\t( cd \"$tempDir\" && dpkg-scanpackages . > Packages ); \t\t\tgrep '^Package: ' \"$tempDir/Packages\"; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y \t\tcassandra=\"$CASSANDRA_VERSION\" \t\tcassandra-tools=\"$CASSANDRA_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CASSANDRA_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/cassandra"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tppc64el) \t\t\tif grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\"; then \t\t\t\tgrep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tsed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\t\tgrep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\"; \t\t\telif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; then \t\t\t\tsed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\t\tgrep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \t\t\tfi; \t\t\t;; \tesac; \t\tsed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chown -R cassandra:cassandra /var/lib/cassandra \"$CASSANDRA_CONFIG\" \t&& chmod 777 /var/lib/cassandra \"$CASSANDRA_CONFIG\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/cassandra"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "7000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cassandra"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/caeb86e7660131ab5d245f23b00c9beab2c309f0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "eoan-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/caf96cfb2b704ef91fd01eff03c38e9ee43d7ad8.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& gpgconf --kill all \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tpwgen \t\tperl \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='A4A9406876FCBD3C456770C88C718D3B5072E1F5'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/mysql.gpg; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list > /dev/null"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MYSQL_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MYSQL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "5.6.44-1debian9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://repo.mysql.com/apt/debian/ stretch mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo mysql-community-server mysql-community-server/data-dir select ''; \t\techo mysql-community-server mysql-community-server/root-pass password ''; \t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \t\techo mysql-community-server mysql-community-server/remove-test-db select false; \t} | debconf-set-selections \t&& apt-get update && apt-get install -y mysql-server=\"${MYSQL_VERSION}\" && rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \t&& chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \t&& chmod 777 /var/run/mysqld \t&& find /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/' \t&& echo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cb159711f8fc0f0e82c1eeaca66744a7e11f41bc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cb385ff8dfce0d06be081b5f759b99676509f5c4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.09"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache \t\tbtrfs-progs \t\te2fsprogs \t\te2fsprogs-extra \t\tiptables \t\txfsprogs \t\txz \t\tpigz \t; \tif zfs=\"$(apk info --no-cache --quiet zfs)\" && [ -n \"$zfs\" ]; then \t\tapk add --no-cache zfs; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -S dockremap \t&& adduser -S -G dockremap dockremap \t&& echo 'dockremap:165536:65536' >> /etc/subuid \t&& echo 'dockremap:165536:65536' >> /etc/subgid"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DIND_COMMIT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "37498f009d8bf25fbb6199e8ccd34bed84f2874b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \twget -O /usr/local/bin/dind \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\"; \tchmod +x /usr/local/bin/dind"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "dockerd-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/docker"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2375"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "dockerd-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cb7d8e3b16a8e5273808c27db2d73bff8a6717e3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.0-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzip2 \t\tgnupg dirmngr \t\tlibcurl4-openssl-dev \t\tlibfreetype6-dev \t\tlibicu-dev \t\tlibjpeg-dev \t\tlibldap2-dev \t\tlibmcrypt-dev \t\tlibmemcached-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibxml2-dev \t\tunzip \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tdocker-php-ext-configure ldap --with-libdir=\"lib/$debMultiarch\"; \tdocker-php-ext-install -j \"$(nproc)\" \t\texif \t\tgd \t\tintl \t\tldap \t\tmcrypt \t\topcache \t\tpcntl \t\tpdo_mysql \t\tpdo_pgsql \t\tpgsql \t\tzip"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tpecl install APCu-5.1.11; \tpecl install memcached-3.0.4; \tpecl install redis-3.1.6; \tdocker-php-ext-enable \t\tapcu \t\tmemcached \t\tredis"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.1.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OWNCLOUD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2b688327a2f986236e14b81dffcf684f730f61946d8035e99a6d032083c1ef19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tcurl -fL -o owncloud.tar.bz2 \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2\"; \tcurl -fL -o owncloud.tar.bz2.asc \"https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc\"; \techo \"$OWNCLOUD_SHA256 *owncloud.tar.bz2\" | sha256sum -c -; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26; \tgpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" owncloud.tar.bz2.asc; \ttar -xjf owncloud.tar.bz2 -C /usr/src/; \trm owncloud.tar.bz2"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cc1412b12402d604598fda73b21de8261caffb36.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update \t&& apt-get install -y --no-install-recommends \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tlibgdbm3 \t\tlibgmp-dev \t\tlibssl-dev \t\tlibyaml-dev \t\tprocps \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%FULL_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%SHA256%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%RUBYGEMS%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tautoconf \t\tbison \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibgdbm-dev \t\tlibglib2.0-dev \t\tlibncurses-dev \t\tlibreadline-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tmake \t\truby \t\twget \t\txz-utils \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t\t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/ccbe8b728573688d9b87ae8c1502d32e360cecb2.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "sid-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/cd2a3a46f3506b42364af3796a8fdc8d4157dcc5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\t'su-exec>=0.2' \t\tbash \t\tprocps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"f6fb3079ad15076154eda9413fed42877d668e7069d9b87396d0804fdb3f4c90\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "22.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"71b2fe49ed5ac386ebc189dd2e5f4b95b11b4427936be0e3c5695a903ea9ffcd\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tautoconf \t\tca-certificates \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\tmkdir /usr/local/src; \t\twget --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum -c -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum -c -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --no-cache --virtual .otp-run-deps $runDeps; \tapk del --no-network .build-deps; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \taddgroup -g 101 -S rabbitmq; \tadduser -u 100 -S -h \"$RABBITMQ_DATA_DIR\" -G rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.15"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgnupg \t\txz \t; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapk del .build-deps; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tsu-exec rabbitmq rabbitmqctl help; \tsu-exec rabbitmq rabbitmqctl list_ciphers; \tsu-exec rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cd636feca30c0fecd812864b5381dd5d16c8e15a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "cosmic-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/ce656e8be56807ffb44d922d9f807fd16bbd1c5d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgmp-dev"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.5.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9bf6370aaa82c284f193264cc7ca56f202171c32367deceb3599a4f354175d7d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .ruby-builddeps \t\tautoconf \t\tbison \t\tbzip2 \t\tbzip2-dev \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgdbm-dev \t\tglib-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl \t\topenssl-dev \t\tprocps \t\treadline-dev \t\truby \t\ttar \t\txz \t\tyaml-dev \t\tzlib-dev \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \t&& echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \t&& patch -p1 -i thread-stack-fix.patch \t&& rm thread-stack-fix.patch \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-network --virtual .ruby-rundeps $runDeps \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tprocps \t\tyaml-dev \t\tzlib-dev \t&& apk del --no-network .ruby-builddeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cecf2549b8c4a4e1f54014f2d14711dc76b7ccf7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "%%UPSTREAM_IMAGE_DIGEST%%"
                }
            ],
            "type": "DOCKER-FROM"
        }
    ],
    "meta_info": "./dataset/source/cedb64810583e77fe93e428c9f835fa0fb2b37d5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.exe'; \t\tWrite-Host 'Installing ...'; \tStart-Process python.exe -Wait \t\t-ArgumentList @( \t\t\t'/quiet', \t\t\t'InstallAllUsers=1', \t\t\t'TargetDir=C:\\Python', \t\t\t'PrependPath=1', \t\t\t'Shortcuts=0', \t\t\t'Include_doc=0', \t\t\t'Include_pip=0', \t\t\t'Include_test=0' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.exe -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cf0924b0a27c703236a1107be25c0b4730003420.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tfontconfig-config \t\tfonts-dejavu-core \t\tgeoip-database \t\tinit-system-helpers \t\tlibarchive-extract-perl \t\tlibexpat1 \t\tlibfontconfig1 \t\tlibfreetype6 \t\tlibgcrypt11 \t\tlibgd3 \t\tlibgdbm3 \t\tlibgeoip1 \t\tlibgpg-error0 \t\tlibjbig0 \t\tlibjpeg8 \t\tliblog-message-perl \t\tliblog-message-simple-perl \t\tlibmodule-pluggable-perl \t\tlibpng12-0 \t\tlibpod-latex-perl \t\tlibssl1.0.0 \t\tlibterm-ui-perl \t\tlibtext-soundex-perl \t\tlibtiff5 \t\tlibvpx1 \t\tlibx11-6 \t\tlibx11-data \t\tlibxau6 \t\tlibxcb1 \t\tlibxdmcp6 \t\tlibxml2 \t\tlibxpm4 \t\tlibxslt1.1 \t\tperl \t\tperl-modules \t\trename \t\tsgml-base \t\tucf \t\txml-core \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pgp.mit.edu --recv-key \tA09CD539B8BB8CBE96E82BDFABD4D3B3F5806B4D \t4C2C85E705DC730833990C38A9376139A524C53E \tB0F4253373F8F6F510D42178520A9993A1C052F8 \t65506C02EFC250F1B7A3D694ECF0E90B2C172083 \t7338973069ED3F443F4D37DFA64FD5B17ADB39A8 \t6E067260B83DCF2CA93C566F518509686C7E5E82 \t573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NGINX_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.6.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "buildDeps=\" \t\tca-certificates \t\tcurl \t\tgcc \t\tlibc-dev-bin \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibfontconfig1-dev \t\tlibfreetype6-dev \t\tlibgd-dev \t\tlibgd2-dev \t\tlibgeoip-dev \t\tlibice-dev \t\tlibjbig-dev \t\tlibjpeg8-dev \t\tliblzma-dev \t\tlibpcre3-dev \t\tlibperl-dev \t\tlibpng12-dev \t\tlibpthread-stubs0-dev \t\tlibsm-dev \t\tlibssl-dev \t\tlibssl-dev \t\tlibtiff5-dev \t\tlibvpx-dev \t\tlibx11-dev \t\tlibxau-dev \t\tlibxcb1-dev \t\tlibxdmcp-dev \t\tlibxml2-dev \t\tlibxpm-dev \t\tlibxslt1-dev \t\tlibxt-dev \t\tlinux-libc-dev \t\tmake \t\tmanpages-dev \t\tx11proto-core-dev \t\tx11proto-input-dev \t\tx11proto-kb-dev \t\txtrans-dev \t\tzlib1g-dev \t\"; \tapt-get update && apt-get install -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/* \t&& curl -SL \"http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz\" -o nginx.tar.gz \t&& curl -SL \"http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc\" -o nginx.tar.gz.asc \t&& gpg --verify nginx.tar.gz.asc \t&& mkdir -p /usr/src/nginx \t&& tar -xvf nginx.tar.gz -C /usr/src/nginx --strip-components=1 \t&& rm nginx.tar.gz* \t&& cd /usr/src/nginx \t&& ./configure \t\t--user=www-data \t\t--group=www-data \t\t--prefix=/usr/local/nginx \t\t--conf-path=/etc/nginx.conf \t\t--http-log-path=/proc/self/fd/1 \t\t--error-log-path=/proc/self/fd/2 \t\t--with-http_addition_module \t\t--with-http_auth_request_module \t\t--with-http_dav_module \t\t--with-http_geoip_module \t\t--with-http_gzip_static_module \t\t--with-http_image_filter_module \t\t--with-http_perl_module \t\t--with-http_realip_module \t\t--with-http_spdy_module \t\t--with-http_ssl_module \t\t--with-http_stub_status_module \t\t--with-http_sub_module \t\t--with-http_xslt_module \t\t--with-ipv6 \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-pcre-jit \t&& make -j\"$(nproc)\" \t&& make install \t&& cd / \t&& rm -r /usr/src/nginx \t&& chown -R www-data:www-data /usr/local/nginx \t&& { \t\techo; \t\techo '# stay in the foreground so Docker has a process to track'; \t\techo 'daemon off;'; \t} >> /etc/nginx.conf \t&& apt-get purge -y --auto-remove $buildDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/nginx/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/local/nginx/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "nginx"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cfa010365b9f903d883efc52e77151ab2f3eb0a0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/cfa350e2d2e394c52f79496814526eaad196ccdc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\t'su-exec>=0.2' \t\tbash \t\tprocps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%OPENSSL_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%OPENSSL_SOURCE_SHA256%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%OPENSSL_PGP_KEY_IDS%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%OTP_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%OTP_SOURCE_SHA256%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tautoconf \t\tca-certificates \t\tdpkg-dev dpkg \t\tgcc \t\tgnupg \t\tlibc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\tmkdir /usr/local/src; \t\twget --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum -c -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum -c -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\trunDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"; \tapk add --no-cache --virtual .otp-run-deps $runDeps; \tapk del --no-network .build-deps; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \taddgroup -g 101 -S rabbitmq; \tadduser -u 100 -S -h \"$RABBITMQ_DATA_DIR\" -G rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%RABBITMQ_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tapk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgnupg \t\txz \t; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapk del .build-deps; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tsu-exec rabbitmq rabbitmqctl help; \tsu-exec rabbitmq rabbitmqctl list_ciphers; \tsu-exec rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d0a7a33cad90bc506788da62fe4617372159cce0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr && rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& gpgconf --kill all \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tpwgen \t\topenssl \t\tperl \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='A4A9406876FCBD3C456770C88C718D3B5072E1F5'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/mysql.gpg; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list > /dev/null"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MYSQL_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MYSQL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.0.16-2debian9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://repo.mysql.com/apt/debian/ stretch mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo mysql-community-server mysql-community-server/data-dir select ''; \t\techo mysql-community-server mysql-community-server/root-pass password ''; \t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \t\techo mysql-community-server mysql-community-server/remove-test-db select false; \t} | debconf-set-selections \t&& apt-get update && apt-get install -y mysql-community-client=\"${MYSQL_VERSION}\" mysql-community-server-core=\"${MYSQL_VERSION}\" && rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \t&& chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \t&& chmod 777 /var/run/mysqld"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/etc/mysql/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "config/"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d2e24a2d521fbf95e99ecc3610e004bd4e016de6.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%TAG%%-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tg++ \t\tgcc \t\tlibc6-dev \t\tmake \t\tpkg-config \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\t%%ARCH-CASE%%; \t\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \twget -O go.tgz \"$url\"; \techo \"${goRelSha256} *go.tgz\" | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tif [ \"$goRelArch\" = 'src' ]; then \t\techo >&2; \t\techo >&2 'error: UNIMPLEMENTED'; \t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \t\techo >&2; \t\texit 1; \tfi; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/d2f9c0f45279cb6e06d2569450a20665db5f6f5b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "oraclelinux"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tyum install -y \t\tgzip \t\ttar \t\t\t\tfreetype fontconfig \t; \trm -rf /var/cache/yum"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/java/openjdk-13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "13-ea+26"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/early_access/jdk13/26/GPL/openjdk-13-ea+26_linux-x64_bin.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0265bee8f6606ba9bb766d078a609f96fdad34735d16ab620005b407233f0f8a"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tcurl -fL -o /openjdk.tgz \"$JAVA_URL\"; \techo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c -; \tmkdir -p \"$JAVA_HOME\"; \ttar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1; \trm /openjdk.tgz; \t\tln -sfT \"$JAVA_HOME\" /usr/java/default; \tln -sfT \"$JAVA_HOME\" /usr/java/latest; \tfor bin in \"$JAVA_HOME/bin/\"*; do \t\tbase=\"$(basename \"$bin\")\"; \t\t[ ! -e \"/usr/bin/$base\" ]; \t\talternatives --install \"/usr/bin/$base\" \"$base\" \"$bin\" 20000; \tdone; \t\tjava -Xshare:dump; \t\tjava --version; \tjavac --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d3caf936bb62a53f65b90fc2307c8b3780534c85.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d484a0083b78d7421d5ab436d0d26c1c679507d1.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%BASE%%-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tlibexpat1 \t\tlibffi6 \t\tlibgdbm3 \t\tlibsqlite3-0 \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PYPY_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PIP_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\t%%ARCH-CASE%%; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\twget \t\tlibncurses5 \t; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/%%TAR%%-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\t%%CMD%% --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tapt-get install -y --no-install-recommends gcc libc6-dev libssl-dev; \t\tcd /usr/local/lib_pypy; \t\t%%CMD%% _ssl_build.py; \tfi; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\t%%CMD%% get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t%%CMD%% --version; \tpip --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "%%CMD%%"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d4f3d3f9b582896cc98c9a924d9ab5898db341f8.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "scratch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "hello"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/hello"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d4ff707c42cf128f24b1173701328ab2d9f264b4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%MICROSOFT-TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.11.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_TAG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "v${GIT_VERSION}.windows.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GIT_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "668d16a799dd721ed126cc91bed49eb2c072ba1b25b50048280a4e2c5ed56e59"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \tif ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive -Path git.zip -DestinationPath C:\\git\\.; \t\tWrite-Host 'Removing ...'; \tRemove-Item git.zip -Force; \t\tWrite-Host 'Updating PATH ...'; \t$env:PATH = 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  git --version'; git --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \t[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '%%WIN-SHA256%%'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/d5961fd38ce041403d89e6beaa0c7bcd6908d261.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-12"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12.0.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/GA/jdk12.0.1/69cfe15208a647278a19ef0990eea691/12/GPL/openjdk-12.0.1_windows-x64_bin.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "fc7d9eee3c09ea6548b00ca25dbf34a348b3942c815405a1428e0bfef268d08d"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java --version'; java --version; \tWrite-Host '  javac --version'; javac --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d62114ed89d85d3a9eac861b67e97ade975787a9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11.4-1.pgdg90+1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d6f85f1617563bfd343e56223d2e67388128eb40.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tgmp-dev"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.6.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "11a83f85c03d3f0fc9b8a9b6cad1b2674f26c5aaa43ba858d4b0fcc2b54171e1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& apk add --no-cache --virtual .ruby-builddeps \t\tautoconf \t\tbison \t\tbzip2 \t\tbzip2-dev \t\tca-certificates \t\tcoreutils \t\tdpkg-dev dpkg \t\tgcc \t\tgdbm-dev \t\tglib-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl \t\topenssl-dev \t\tprocps \t\treadline-dev \t\truby \t\ttar \t\txz \t\tyaml-dev \t\tzlib-dev \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \t&& echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \t&& patch -p1 -i thread-stack-fix.patch \t&& rm thread-stack-fix.patch \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --no-network --virtual .ruby-rundeps $runDeps \t\tbzip2 \t\tca-certificates \t\tlibffi-dev \t\tprocps \t\tyaml-dev \t\tzlib-dev \t&& apk del --no-network .ruby-builddeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d81fcee655ef5116135f0e27bc8adaaa1f51e8a4.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.4.23-1.pgdg90+1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\"postgresql-contrib-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d87cba9dda97b8ae229d1bc92fd6beae7ca73269.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tautoconf \t\tautomake \t\tbzip2 \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\timagemagick \t\tlibbz2-dev \t\tlibc6-dev \t\tlibcurl4-openssl-dev \t\tlibdb-dev \t\tlibevent-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tlibgeoip-dev \t\tlibglib2.0-dev \t\tlibgmp-dev \t\tlibjpeg-dev \t\tlibkrb5-dev \t\tliblzma-dev \t\tlibmagickcore-dev \t\tlibmagickwand-dev \t\tlibncurses5-dev \t\tlibncursesw5-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibtool \t\tlibwebp-dev \t\tlibxml2-dev \t\tlibxslt-dev \t\tlibyaml-dev \t\tmake \t\tpatch \t\tunzip \t\txz-utils \t\tzlib1g-dev \t\t\t\t$( \t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \t\t\t\techo 'default-libmysqlclient-dev'; \t\t\telse \t\t\t\techo 'libmysqlclient-dev'; \t\t\tfi \t\t) \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/d937e90f1f8e4abca68c848519709e7472edb1a7.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "10-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf && gpgconf --kill all || :; } \t&& rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NODE_ENV"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "production"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CLI_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tnpm install -g \"ghost-cli@$GHOST_CLI_VERSION\"; \tnpm cache clean --force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_INSTALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_CONTENT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/ghost/content"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GHOST_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.25.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$GHOST_INSTALL\"; \tchown node:node \"$GHOST_INSTALL\"; \t\tgosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\"; \t\tcd \"$GHOST_INSTALL\"; \tgosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\"; \tgosu node ghost config paths.contentPath \"$GHOST_CONTENT\"; \t\tgosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\"; \treadlink -f \"$GHOST_INSTALL/config.development.json\"; \t\tmv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\"; \tmkdir -p \"$GHOST_CONTENT\"; \tchown node:node \"$GHOST_CONTENT\"; \t\tcd \"$GHOST_INSTALL/current\"; \tsqlite3Version=\"$(npm view . optionalDependencies.sqlite3)\"; \tif ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force; then \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \t\tapt-get install -y --no-install-recommends python make gcc g++ libc-dev; \t\trm -rf /var/lib/apt/lists/*; \t\t\t\tgosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source; \t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \t\tapt-get purge -y --auto-remove; \tfi; \t\tgosu node yarn cache clean; \tgosu node npm cache clean --force; \tnpm cache clean --force; \trm -rv /tmp/yarn* /tmp/v8*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_INSTALL"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GHOST_CONTENT"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2368"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "node"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "current/index.js"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/d9b087bdfe0fb6f18d180555027ee465135bf1f2.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-hotspot"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.0.94"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/dbebb44810509bb658addd43afc37e33570edf02.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "docker"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.09-rc"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache \t\tbtrfs-progs \t\te2fsprogs \t\te2fsprogs-extra \t\tiptables \t\txfsprogs \t\txz \t\tpigz \t; \tif zfs=\"$(apk info --no-cache --quiet zfs)\" && [ -n \"$zfs\" ]; then \t\tapk add --no-cache zfs; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& addgroup -S dockremap \t&& adduser -S -G dockremap dockremap \t&& echo 'dockremap:165536:65536' >> /etc/subuid \t&& echo 'dockremap:165536:65536' >> /etc/subgid"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DIND_COMMIT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "37498f009d8bf25fbb6199e8ccd34bed84f2874b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \twget -O /usr/local/bin/dind \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\"; \tchmod +x /usr/local/bin/dind"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "dockerd-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/docker"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "2375"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "dockerd-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/de59f21899db127a5e47243865feb556ebf86c02.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java -version'; java -version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/deffa499aee69cd9bb38f2164899101c7701b09d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttcl \t\ttk \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYPY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.0.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) pypyArch='linux64'; sha256='729e3c54325969c98bd3658c6342b9f5987b96bad1d6def04250a08401b54c4b' ;; \t\ti386) pypyArch='linux32'; sha256='b8db8fbca9621de8ea8cd7184b322f2dddb2f385e8e5a63dfb75bb3fea4b2e3f' ;; \t\tppc64el) pypyArch='ppc64le'; sha256='2912884da05abc2cdf71dd337c3f280095351312c1a1732a52b6878174a0fd02' ;; \t\ts390x) pypyArch='s390x'; sha256='d588b045cc0d3a75c31fce54c1d181b1206ad9a5dd272fe79160a6268401605f' ;; \t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release\"; exit 1 ;; \tesac; \t\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/pypy3.5-v${PYPY_VERSION}-${pypyArch}.tar.bz2\" --progress=dot:giga; \techo \"$sha256 *pypy.tar.bz2\" | sha256sum -c; \ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \trm pypy.tar.bz2; \t\tpypy3 --version; \t\tif [ -f /usr/local/lib_pypy/_ssl_build.py ]; then \t\tcd /usr/local/lib_pypy; \t\tpypy3 _ssl_build.py; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpypy3 get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "pypy3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/df14a602bcd653559e635eb000a9a48180add800.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/df5ae7e3b19c41a4abf4f3283834a13b70c58938.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "perl"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "5.28"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERL_CPANM_OPT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--verbose --mirror https://cpan.metacpan.org"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm Digest::SHA Module::Signature"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm App::cpanminus"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm EV"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm IO::Socket::IP"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm IO::Socket::Socks"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm Net::DNS::Native"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm --notest IO::Socket::SSL"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LIBEV_FLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cpanm Mojolicious@8.13"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MOJO_INACTIVITY_TIMEOUT"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "120"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/remote.pl"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": ".remote.pl"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "remote.pl"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        }
    ],
    "meta_info": "./dataset/source/e28e813f16e025ef47ba8701945ff898b2760c1b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "nanoserver"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "C:"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "hello.txt"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "cmd"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/C"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "type C:\\hello.txt"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/e336da21113fd665625a08de98a84229ac9a81e5.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "97FC712E4C024BBEA48A61ED3A5CA953F73C700D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/e371bf8a59e3f00fdb4561894e6f71464067b78c.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1803"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.2.0-rc1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2012plus-4.2.0-rc1-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "379bcf1725c19c6ff2f2f159ef4e22c9a4ba32692a994e809457f1053c50066f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/e5cbf7591de032e59bfd3ebd9bcc8caa543642f0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.5.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.5/src/haproxy-1.5.19.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "e00ae2a633da614967f2e3ebebdb817ec537cba8383b833fc8d9a506876e0d5e"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tgcc \t\tlibc-dev \t\tlinux-headers \t\tmake \t\topenssl \t\topenssl-dev \t\tpcre2-dev \t\treadline-dev \t\ttar \t\tzlib-dev \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(getconf _NPROCESSORS_ONLN)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .haproxy-rundeps $runDeps \t&& apk del .build-deps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/e661514bacc52caa46ef11be3f1b631373e8ef77.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%SUITE%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mysql && useradd -r -g mysql mysql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tapt-get update; \tif ! which gpg; then \t\tapt-get install -y --no-install-recommends gnupg; \tfi; \tif ! gpg --version | grep -q '^gpg (GnuPG) 1\\.'; then \t\t apt-get install -y --no-install-recommends dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tfetchDeps=' \t\tca-certificates \t\twget \t'; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \t\tchmod +x /usr/local/bin/gosu; \tgosu nobody true; \t\tapt-get purge -y --auto-remove $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tapt-transport-https ca-certificates \t\tpwgen \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A \t4D1BB29D63D98E422B2113B19334A25F8507EFA5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo 'deb https://repo.percona.com/apt %%SUITE%% main' > /etc/apt/sources.list.d/percona.list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PERCONA_MAJOR%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PERCONA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PERCONA_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t{ \t\tfor key in \t\t\tpercona-server-server/root_password \t\t\tpercona-server-server/root_password_again \t\t\t\"percona-server-server-$PERCONA_MAJOR/root-pass\" \t\t\t\"percona-server-server-$PERCONA_MAJOR/re-root-pass\" \t\t; do \t\t\techo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused'; \t\tdone; \t} | debconf-set-selections; \tapt-get update; \tapt-get install -y \t\tpercona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION \t; \trm -rf /var/lib/apt/lists/*; \tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf; \trm -rf /var/lib/mysql; \tmkdir -p /var/lib/mysql /var/run/mysqld; \tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \tchmod 777 /var/run/mysqld; \tfind /etc/mysql/ -name '*.cnf' -print0 \t\t| xargs -0 grep -lZE '^(bind-address|log)' \t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/log/mysql"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "3306"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mysqld"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/e895200f2b9f9fc48e0d02be4c15ef81ff2b6b17.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk-openj9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/e96933abf04e0e1ec99933662b90e047583655dc.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tif ! command -v gpg > /dev/null; then \t\tapt-get update; \t\tapt-get install -y --no-install-recommends \t\t\tgnupg \t\t\tdirmngr \t\t; \t\trm -rf /var/lib/apt/lists/*; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd -r postgres --gid=999; \tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \tmkdir -p /var/lib/postgresql; \tchown -R postgres:postgres /var/lib/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \t&& chmod +x /usr/local/bin/gosu \t&& gosu nobody true \t&& apt-get purge -y --auto-remove ca-certificates wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \tfi; \tapt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*; \tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.utf8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends libnss-wrapper; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.5"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.5.18-1.pgdg90+1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\texport PYTHONDONTWRITEBYTECODE=1; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64|i386|ppc64el) \t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\tapt-get update; \t\t\t;; \t\t*) \t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t\tcase \"$PG_MAJOR\" in \t\t\t\t9.* | 10 ) ;; \t\t\t\t*) \t\t\t\t\techo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list; \t\t\t\t\t;; \t\t\tesac; \t\t\t\t\t\ttempDir=\"$(mktemp -d)\"; \t\t\tcd \"$tempDir\"; \t\t\t\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\t\t\t\t\tapt-get update; \t\t\tapt-get build-dep -y \t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \t\t\t\tapt-get source --compile \t\t\t\t\tpostgresql-common pgdg-keyring \t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\t; \t\t\t\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \t\t\tapt-mark manual $savedAptMark; \t\t\t\t\t\tls -lAFh; \t\t\tdpkg-scanpackages . > Packages; \t\t\tgrep '^Package: ' Packages; \t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \t\t\tapt-get -o Acquire::GzipIndexes=false update; \t\t\t;; \tesac; \t\tapt-get install -y postgresql-common; \tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \tapt-get install -y \t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \t\t\"postgresql-contrib-$PG_MAJOR=$PG_VERSION\" \t; \t\trm -rf /var/lib/apt/lists/*; \t\tif [ -n \"$tempDir\" ]; then \t\tapt-get purge -y --auto-remove; \t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \tfi; \t\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$PATH:/usr/lib/postgresql/$PG_MAJOR/bin"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGDATA"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/lib/postgresql/data"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "5432"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/ea454ad2a9a42446cb9c57497d05b72d04de1249.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_CONFDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/etc/apache2"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "APACHE_ENVVARS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$APACHE_CONFDIR/envvars"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends apache2; \trm -rf /var/lib/apt/lists/*; \t\tsed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\"; \t\t. \"$APACHE_ENVVARS\"; \tfor dir in \t\t\"$APACHE_LOCK_DIR\" \t\t\"$APACHE_RUN_DIR\" \t\t\"$APACHE_LOG_DIR\" \t; do \t\trm -rvf \"$dir\"; \t\tmkdir -p \"$dir\"; \t\tchown \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \t\tchmod 777 \"$dir\"; \tdone; \t\trm -rvf /var/www/html/*; \t\tln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\"; \tln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"; \tchown -R --no-dereference \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$APACHE_LOG_DIR\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "a2dismod mpm_event && a2enmod mpm_prefork"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo '<FilesMatch \\.php$>'; \t\techo '\\tSetHandler application/x-httpd-php'; \t\techo '</FilesMatch>'; \t\techo; \t\techo 'DirectoryIndex disabled'; \t\techo 'DirectoryIndex index.php index.html'; \t\techo; \t\techo '<Directory /var/www/>'; \t\techo '\\tOptions -Indexes'; \t\techo '\\tAllowOverride All'; \t\techo '</Directory>'; \t} | tee \"$APACHE_CONFDIR/conf-available/docker-php.conf\" \t&& a2enconf docker-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_BUILD_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "apache2-dev"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--with-apxs2 --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.3.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "apache2-foreground"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "apache2-foreground"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/eab40b98d7262999d0228b8c94462fed0cc9f61e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "postgres"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-healthcheck"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        }
    ],
    "meta_info": "./dataset/source/eb77747a36230585c09b5ee100571651c4d3798f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache \t\tca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapk add --no-cache --virtual .build-deps \t\tbash \t\tgcc \t\tmusl-dev \t\topenssl \t\tgo \t; \texport \t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \t\tGOOS=\"$(go env GOOS)\" \t\tGOARCH=\"$(go env GOARCH)\" \t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \t; \tapkArch=\"$(apk --print-arch)\"; \tcase \"$apkArch\" in \t\tarmhf) export GOARM='6' ;; \t\tx86) export GO386='387' ;; \tesac; \t\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \techo '1fff7c33ef2522e6dfaf6ab96ec4c2a8b76d018aae6fc88ce2bd40f2202d0f8c *go.tgz' | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tcd /usr/local/go/src; \t./make.bash; \t\trm -rf \t\t/usr/local/go/pkg/bootstrap \t\t/usr/local/go/pkg/obj \t; \tapk del .build-deps; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/ebf02b0f02a5595fb2947830aab5df21082e1640.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\ttk-dev \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "97FC712E4C024BBEA48A61ED3A5CA953F73C700D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/ec192b43b26da9b086084ad9f4c351016440af3d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-placeholder"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tbzip2 \t\tunzip \t\txz-utils \t\t\t\tca-certificates p11-kit \t\t\t\tfontconfig libfreetype6 \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjavac --version; \tjava --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/eca1d4de1d678c3a629dfd9fcabec0168ca6f699.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.7-rc"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "rabbitmq-plugins enable --offline rabbitmq_management"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \terl -noinput -eval ' \t\t{ ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) -> \t\t\tcase Acc of \t\t\t\t\"\" -> \t\t\t\t\tcase lists:suffix(\"/rabbitmqadmin\", FileInArchive) of \t\t\t\t\t\ttrue -> GetBin(); \t\t\t\t\t\tfalse -> Acc \t\t\t\t\tend; \t\t\t\t_ -> Acc \t\t\tend \t\tend, \"\", init:get_plain_arguments()), \t\tio:format(\"~s\", [ AdminBin ]), \t\tinit:stop(). \t' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin; \t[ -s /usr/local/bin/rabbitmqadmin ]; \tchmod +x /usr/local/bin/rabbitmqadmin; \tapt-get update; apt-get install -y --no-install-recommends python; rm -rf /var/lib/apt/lists/*; \trabbitmqadmin --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "15671"
                }
            ],
            "type": "DOCKER-EXPOSE"
        }
    ],
    "meta_info": "./dataset/source/ef76cc811dd1f4593b4675ac554db73bc39d5ace.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "nanoserver"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%MICROSOFT-TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\gopath"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;C:\\go\\bin;{1}' -f $env:GOPATH, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath;"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \tInvoke-WebRequest -Uri $url -OutFile 'go.zip'; \t\t$sha256 = '%%WIN-SHA256%%'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $sha256); \tif ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tExpand-Archive go.zip -DestinationPath C:\\; \t\tWrite-Host 'Verifying install (\"go version\") ...'; \tgo version; \t\tWrite-Host 'Removing ...'; \tRemove-Item go.zip -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/f0312db0ff05b6f3b0baa2b8f558fa7da84cbe69.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_RELEASE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'python.msi'; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'python.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'TARGETDIR=C:\\Python', \t\t\t'ALLUSERS=1', \t\t\t'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath' \t\t); \t\t$env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  python --version'; python --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item python.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PLACEHOLDER%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py'; \tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t('pip=={0}' -f $env:PYTHON_PIP_VERSION) \t; \tRemove-Item get-pip.py -Force; \t\tWrite-Host 'Verifying pip install ...'; \tpip --version; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "pip install --no-cache-dir virtualenv"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f0fe4e6060a4956829a304574591ce1247d63fa0.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "groupadd -r mongodb && useradd -r -g mongodb mongodb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates \t\tjq \t\tnumactl \t; \tif ! command -v ps > /dev/null; then \t\tapt-get install -y --no-install-recommends procps; \tfi; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOSU_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.11"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JSYAML_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.13.0"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\twget \t; \tif ! command -v gpg > /dev/null; then \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \tfi; \trm -rf /var/lib/apt/lists/*; \t\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \tchmod +x /usr/local/bin/gosu; \tgosu --version; \tgosu nobody true; \t\twget -O /js-yaml.js \"https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js\"; \t\tapt-get purge -y --auto-remove wget"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir /docker-entrypoint-initdb.d"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -r \"$GNUPGHOME\"; \tapt-key list"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "repo.mongodb.org"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_PACKAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_PACKAGE}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_REPO"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${MONGO_REPO}"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "placeholder"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "echo \"deb http://$MONGO_REPO/apt/%%DISTRO%% %%SUITE%%/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR %%COMPONENT%%\" | tee \"/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t&& apt-get update \t&& apt-get install -y \t\t${MONGO_PACKAGE}=$MONGO_VERSION \t\t${MONGO_PACKAGE}-server=$MONGO_VERSION \t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION \t\t${MONGO_PACKAGE}-mongos=$MONGO_VERSION \t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION \t&& rm -rf /var/lib/apt/lists/* \t&& rm -rf /var/lib/mongodb \t&& mv /etc/mongod.conf /etc/mongod.conf.orig"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/data/configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat (3.4)"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f12f36677f020c3c14c334ae04983862f63c64e3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.6.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\tlibressl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f12f3f99f90a19f255e1db9e78f64b0d687c8225.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.10"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "addgroup -g 11211 memcache && adduser -D -u 11211 -G memcache memcache"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache cyrus-sasl-plain"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MEMCACHED_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.5.16"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MEMCACHED_SHA1"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "06a9661638cb20232d0ccea088f52ca10b959968"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& apk add --no-cache --virtual .build-deps \t\tca-certificates \t\tcoreutils \t\tcyrus-sasl-dev \t\tdpkg-dev dpkg \t\tgcc \t\tlibc-dev \t\tlibevent-dev \t\tlinux-headers \t\tmake \t\topenssl \t\tperl \t\tperl-utils \t\ttar \t\twget \t\t&& wget -O memcached.tar.gz \"https://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz\" \t&& echo \"$MEMCACHED_SHA1  memcached.tar.gz\" | sha1sum -c - \t&& mkdir -p /usr/src/memcached \t&& tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1 \t&& rm memcached.tar.gz \t\t&& cd /usr/src/memcached \t\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& enableExtstore=\"$( \t\tcase \"$gnuArch\" in \t\t\ts390x-*) ;; \t\t\t*) echo '--enable-extstore' ;; \t\tesac \t)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-sasl \t\t--enable-sasl-pwdb \t\t$enableExtstore \t&& make -j \"$(nproc)\" \t\t&& make test \t&& make install \t\t&& cd / && rm -rf /usr/src/memcached \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\" \t&& apk add --virtual .memcached-rundeps $runDeps \t&& apk del .build-deps \t\t&& memcached -V"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "memcache"
                }
            ],
            "type": "DOCKER-USER"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "11211"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "memcached"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f1729d216dbce8d635b54a9351bc15a0a9f34ef9.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "dpkg --add-architecture i386"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tgcc \t\tlibc6-dev \t\tmake \t\t\t\tlibc6-dev:i386 \t\tlibgcc-6-dev:i386 \t\t\t\tlibc6-dev-arm64-cross \t\tlibc6-dev-armel-cross \t\tlibc6-dev-armhf-cross \t\tlibc6-dev-ppc64el-cross \t\tlibc6-dev-s390x-cross \t\t\t\tgcc-aarch64-linux-gnu \t\tgcc-arm-linux-gnueabi \t\tgcc-arm-linux-gnueabihf \t\tgcc-powerpc64le-linux-gnu \t\tgcc-s390x-linux-gnu \t\t\t\tfile \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/src/hello"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "."
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "."
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmake clean all test \t\tTARGET_ARCH='amd64' \t\tCC='x86_64-linux-gnu-gcc' \t\tSTRIP='x86_64-linux-gnu-strip'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmake clean all \t\tTARGET_ARCH='arm32v5' \t\tCC='arm-linux-gnueabi-gcc' \t\tSTRIP='arm-linux-gnueabi-strip'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmake clean all \t\tTARGET_ARCH='arm32v7' \t\tCC='arm-linux-gnueabihf-gcc' \t\tSTRIP='arm-linux-gnueabihf-strip'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmake clean all \t\tTARGET_ARCH='arm64v8' \t\tCC='aarch64-linux-gnu-gcc' \t\tSTRIP='aarch64-linux-gnu-strip'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmake clean all test \t\tTARGET_ARCH='i386' \t\tCC='gcc -m32 -L/usr/lib/gcc/i686-linux-gnu/6' \t\tSTRIP='x86_64-linux-gnu-strip'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmake clean all \t\tTARGET_ARCH='ppc64le' \t\tCC='powerpc64le-linux-gnu-gcc' \t\tSTRIP='powerpc64le-linux-gnu-strip'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \tmake clean all \t\tTARGET_ARCH='s390x' \t\tCC='s390x-linux-gnu-gcc' \t\tSTRIP='s390x-linux-gnu-strip'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "find \\( -name 'hello' -or -name 'hello.txt' \\) -exec file '{}' + -exec ls -lh '{}' +"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "./amd64/hello-world/hello"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f2353b5b9cddc3ace84dbabc27dfb4a98d7992d3.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_EXTRA_CONFIGURE_ARGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.2.19"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& cd /usr/local/etc \t&& if [ -d php-fpm.d ]; then \t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \telse \t\tmkdir php-fpm.d; \t\tcp php-fpm.conf.default php-fpm.d/www.conf; \t\t{ \t\t\techo '[global]'; \t\t\techo 'include=etc/php-fpm.d/*.conf'; \t\t} | tee php-fpm.conf; \tfi \t&& { \t\techo '[global]'; \t\techo 'error_log = /proc/self/fd/2'; \t\techo; \t\techo '[www]'; \t\techo '; if we send this to /proc/self/fd/1, it never appears'; \t\techo 'access.log = /proc/self/fd/2'; \t\techo; \t\techo 'clear_env = no'; \t\techo; \t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \t\techo 'catch_workers_output = yes'; \t} | tee php-fpm.d/docker.conf \t&& { \t\techo '[global]'; \t\techo 'daemonize = no'; \t\techo; \t\techo '[www]'; \t\techo 'listen = 9000'; \t} | tee php-fpm.d/zz-docker.conf"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "9000"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php-fpm"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f2c4ef8ee1edbe763faea5aa121e00b5d4ff7e5a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tnetbase \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "E3FF2839C048B25C084DEBE9B26995E310250568"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0b1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibbz2-dev \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibffi-dev \t\tlibgdbm-dev \t\tliblzma-dev \t\tlibncursesw5-dev \t\tlibreadline-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tmake \t\ttk-dev \t\tuuid-dev \t\twget \t\txz-utils \t\tzlib1g-dev \t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t&& make install \t&& ldconfig \t\t&& apt-mark auto '.*' > /dev/null \t&& apt-mark manual $savedAptMark \t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \t&& rm -rf /var/lib/apt/lists/* \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends wget; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f2c99f669e9c2e6d850aa91eb82fef724455013f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "cosmic-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/f2d4c7be7769812f39a0ad8eb1039978d5c8342a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7.3-fpm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\tif command -v a2enmod; then \t\ta2enmod rewrite; \tfi; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \t\tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibjpeg-dev \t\tlibpng-dev \t\tlibpq-dev \t\tlibzip-dev \t; \t\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \tdocker-php-ext-install -j \"$(nproc)\" \t\tgd \t\topcache \t\tpdo_mysql \t\tpdo_pgsql \t\tzip \t; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \t\t| awk '/=>/ { print $3 }' \t\t| sort -u \t\t| xargs -r dpkg-query -S \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -rt apt-mark manual; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ \t\techo 'opcache.memory_consumption=128'; \t\techo 'opcache.interned_strings_buffer=8'; \t\techo 'opcache.max_accelerated_files=4000'; \t\techo 'opcache.revalidate_freq=60'; \t\techo 'opcache.fast_shutdown=1'; \t\techo 'opcache.enable_cli=1'; \t} > /usr/local/etc/php/conf.d/opcache-recommended.ini"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/var/www/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "DRUPAL_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "bba896a1ed2fbe4a1744d82c036fcfc4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "curl -fSL \"https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz\" -o drupal.tar.gz \t&& echo \"${DRUPAL_MD5} *drupal.tar.gz\" | md5sum -c - \t&& tar -xz --strip-components=1 -f drupal.tar.gz \t&& rm drupal.tar.gz \t&& chown -R www-data:www-data sites modules themes"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/f354c70e9575c0c0fe38d13ad62f9a69fef7d794.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \t$tls12RegBase = 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.2'; \tif (Test-Path $tls12RegBase) { throw ('\"{0}\" already exists!' -f $tls12RegBase) }; \tNew-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \tNew-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \tNew-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-13"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "13-ea+26"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/early_access/jdk13/26/GPL/openjdk-13-ea+26_windows-x64_bin.zip"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "945b2957d2600d6bf220442a1c5a4c9acc9f77d4fc26a2039fdfc84affa33668"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:JAVA_URL); \tInvoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip'; \tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256); \tif ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java --version'; java --version; \tWrite-Host '  javac --version'; javac --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f361fc5d8adf63d92b899752c21a86b1ce2f8d08.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p /usr/local/etc \t&& { \t\techo 'install: --no-document'; \t\techo 'update: --no-document'; \t} >> /usr/local/etc/gemrc"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2.4.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBY_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "25da31b9815bfa9bba9f9b793c055a40a35c43c6adfb1fdbd81a09099f9b529c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RUBYGEMS_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.0.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t\t&& buildDeps=' \t\tbison \t\tdpkg-dev \t\tlibgdbm-dev \t\truby \t' \t&& apt-get update \t&& apt-get install -y --no-install-recommends $buildDeps \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \t&& echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \t\t&& mkdir -p /usr/src/ruby \t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \t&& rm ruby.tar.xz \t\t&& cd /usr/src/ruby \t\t&& { \t\techo '#define ENABLE_PATH_CHECK 0'; \t\techo; \t\tcat file.c; \t} > file.c.new \t&& mv file.c.new file.c \t\t&& autoconf \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--disable-install-doc \t\t--enable-shared \t&& make -j \"$(nproc)\" \t&& make install \t\t&& apt-get purge -y --auto-remove $buildDeps \t&& cd / \t&& rm -r /usr/src/ruby \t&& ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -r /root/.gem/ \t&& ruby --version && gem --version && bundle --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GEM_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bundle"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_SILENCE_ROOT_WARNING"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "BUNDLE_APP_CONFIG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "irb"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f41b7df15ec0f174eace4b87954b705fed7c9b37.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "oraclelinux"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "7-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tyum install -y \t\tgzip \t\ttar \t\t\t\tfreetype fontconfig \t; \trm -rf /var/cache/yum"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "en_US.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/java/openjdk-12"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "12.0.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://download.java.net/java/GA/jdk12.0.1/69cfe15208a647278a19ef0990eea691/12/GPL/openjdk-12.0.1_linux-x64_bin.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "151eb4ec00f82e5e951126f572dc9116104c884d97f91be14ec11e85fc2dd626"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tcurl -fL -o /openjdk.tgz \"$JAVA_URL\"; \techo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c -; \tmkdir -p \"$JAVA_HOME\"; \ttar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1; \trm /openjdk.tgz; \t\tln -sfT \"$JAVA_HOME\" /usr/java/default; \tln -sfT \"$JAVA_HOME\" /usr/java/latest; \tfor bin in \"$JAVA_HOME/bin/\"*; do \t\tbase=\"$(basename \"$bin\")\"; \t\t[ ! -e \"/usr/bin/$base\" ]; \t\talternatives --install \"/usr/bin/$base\" \"$base\" \"$bin\" 20000; \tdone; \t\tjava -Xshare:dump; \t\tjava --version; \tjavac --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "jshell"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f551eeb95c152f5ae65414af3ecf8132462fec77.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlibnsl-dev \t\tlibtirpc-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\tutil-linux-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f5cb1dcf6e839e51e9440c761838df24ec697e7f.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f5feef919b780337cee4ab89e23696098e5f4374.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "%%DEBIAN_TAG%%"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%GPG_KEYS%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "%%PHP_VERSION%%"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_URL%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_ASC_URL%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_SHA256%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"%%PHP_MD5%%\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibonig-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/%%DEBIAN_SUITE%%/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tpecl update-channels; \trm -rf /tmp/pear ~/.pearrc; \tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f663b60ed3809c09c900fe3993aee68a4202306b.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "servercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "mcr.microsoft.com"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "1809"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C:\\\\openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$newPath = ('{0}\\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \tWrite-Host ('Updating PATH: {0}' -f $newPath); \tsetx /M PATH $newPath"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \tWrite-Host ('Downloading {0} ...' -f $url); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \tInvoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \t\tWrite-Host 'Expanding ...'; \tNew-Item -ItemType Directory -Path C:\\temp | Out-Null; \tExpand-Archive openjdk.zip -DestinationPath C:\\temp; \tMove-Item -Path C:\\temp\\* -Destination $env:JAVA_HOME; \tRemove-Item C:\\temp; \t\tWrite-Host 'Removing ...'; \tRemove-Item openjdk.zip -Force; \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  java -version'; java -version; \t\tWrite-Host 'Complete.'"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/f693f21916b5ed7e760a4c9799399561bd9c842a.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "adoptopenjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "11-jdk-hotspot"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "9.0.21"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f6df21e5d70674ef19087375c50d5453ec49fd0d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-curl"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tbzr \t\tgit \t\tmercurial \t\topenssh-client \t\tsubversion \t\t\t\tprocps \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/f7013934d35b82b7f0f84ca6284ad5b558b6f611.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "alpine"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.9"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apk add --no-cache ca-certificates"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEY"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "97FC712E4C024BBEA48A61ED3A5CA953F73C700D"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.5.7"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex \t&& apk add --no-cache --virtual .fetch-deps \t\tgnupg \t\ttar \t\txz \t\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \t&& mkdir -p /usr/src/python \t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \t&& rm python.tar.xz \t\t&& apk add --no-cache --virtual .build-deps  \t\tbzip2-dev \t\tcoreutils \t\tdpkg-dev dpkg \t\texpat-dev \t\tfindutils \t\tgcc \t\tgdbm-dev \t\tlibc-dev \t\tlibffi-dev \t\tlinux-headers \t\tmake \t\tncurses-dev \t\topenssl-dev \t\tpax-utils \t\treadline-dev \t\tsqlite-dev \t\ttcl-dev \t\ttk \t\ttk-dev \t\txz-dev \t\tzlib-dev \t&& apk del .fetch-deps \t\t&& cd /usr/src/python \t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \t&& ./configure \t\t--build=\"$gnuArch\" \t\t--enable-loadable-sqlite-extensions \t\t--enable-shared \t\t--with-system-expat \t\t--with-system-ffi \t\t--without-ensurepip \t&& make -j \"$(nproc)\" \t\tEXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \t&& make install \t\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \t\t| tr ',' '\\n' \t\t| sort -u \t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t\t| xargs -rt apk add --no-cache --virtual .python-rundeps \t&& apk del .build-deps \t\t&& find /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' + \t&& rm -rf /usr/src/python \t\t&& python3 --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "cd /usr/local/bin \t&& ln -s idle3 idle \t&& ln -s pydoc3 pydoc \t&& ln -s python3 python \t&& ln -s python3-config python-config"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PYTHON_PIP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "19.1.1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -ex; \t\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \t\tpython get-pip.py \t\t--disable-pip-version-check \t\t--no-cache-dir \t\t\"pip==$PYTHON_PIP_VERSION\" \t; \tpip --version; \t\tfind /usr/local -depth \t\t\\( \t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \t\t\t-o \t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \t\t\\) -exec rm -rf '{}' +; \trm -f get-pip.py"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "python3"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f7e61e38c6d73f1d9184719e4c50b2deaba13d76.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.04"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgosu \t; \trm -rf /var/lib/apt/lists/*; \tgosu nobody true"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"f6fb3079ad15076154eda9413fed42877d668e7069d9b87396d0804fdb3f4c90\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "22.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"71b2fe49ed5ac386ebc189dd2e5f4b95b11b4427936be0e3c5695a903ea9ffcd\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tautoconf \t\tca-certificates \t\tdpkg-dev \t\tgcc \t\tgnupg \t\tlibncurses5-dev \t\tmake \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_HOST_MULTIARCH)\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\" --libdir=\"lib/$debMultiarch\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \techo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf; \tldconfig; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum --check --strict -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd --gid 999 --system rabbitmq; \tuseradd --uid 999 --system --home-dir \"$RABBITMQ_DATA_DIR\" --gid rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.7.16-rc.3"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tca-certificates \t\tgnupg \t\twget \t\txz-utils \t; \trm -rf /var/lib/apt/lists/*; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tgosu rabbitmq rabbitmqctl help; \tgosu rabbitmq rabbitmqctl list_ciphers; \tgosu rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/f87620773f45a893a8f97cb87d38dfa557a92171.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "buildpack-deps"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-scm"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tg++ \t\tgcc \t\tlibc6-dev \t\tmake \t\tpkg-config \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOLANG_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.12.6"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"${dpkgArch##*-}\" in \t\tamd64) goRelArch='linux-amd64'; goRelSha256='dbcf71a3c1ea53b8d54ef1b48c85a39a6c9a935d01fc8291ff2b92028e59913c' ;; \t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='0708fbc125e7b782b44d450f3a3864859419b3691121ad401f1b9f00e488bddb' ;; \t\tarm64) goRelArch='linux-arm64'; goRelSha256='8f4e3909c74b4f3f3956715f32419b28d32a4ad57dbd79f74b7a8a920b21a1a3' ;; \t\ti386) goRelArch='linux-386'; goRelSha256='7aaf25164a9ab5e1005c15535ed16ee122df50ac192c2d79b7940315c2b74f2c' ;; \t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='67eacb68c1e251c1428e588776c5a02e287a508e3d44f940d31d8ff5d57f0eef' ;; \t\ts390x) goRelArch='linux-s390x'; goRelSha256='c14baa10b87a38e56f28a176fae8a839e9052b0e691bdc0461677d4bcedea9aa' ;; \t\t*) goRelArch='src'; goRelSha256='c96c5ccc7455638ae1a8b7498a030fe653731c8391c5f8e79590bce72f92b4ca'; \t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \tesac; \t\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \twget -O go.tgz \"$url\"; \techo \"${goRelSha256} *go.tgz\" | sha256sum -c -; \ttar -C /usr/local -xzf go.tgz; \trm go.tgz; \t\tif [ \"$goRelArch\" = 'src' ]; then \t\techo >&2; \t\techo >&2 'error: UNIMPLEMENTED'; \t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \t\techo >&2; \t\texit 1; \tfi; \t\texport PATH=\"/usr/local/go/bin:$PATH\"; \tgo version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GOPATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/go"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$GOPATH/bin:/usr/local/go/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$GOPATH"
                }
            ],
            "type": "DOCKER-WORKDIR"
        }
    ],
    "meta_info": "./dataset/source/fb2a610c44fa451e1d0057f9e2bf7296c430e149.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "openjdk"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "8-jdk"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "CATALINA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/tomcat"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "mkdir -p \"$CATALINA_HOME\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$CATALINA_HOME"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_NATIVE_LIBDIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$CATALINA_HOME/native-jni-lib"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LD_LIBRARY_PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_MAJOR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8.5.42"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_SHA512"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_TGZ_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "TOMCAT_ASC_URLS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \t\tapt-get install -y --no-install-recommends gnupg dirmngr; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $GPG_KEYS; do \t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \tdone; \t\tapt-get install -y --no-install-recommends wget ca-certificates; \t\tsuccess=; \tfor url in $TOMCAT_TGZ_URLS; do \t\tif wget -O tomcat.tar.gz \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\techo \"$TOMCAT_SHA512 *tomcat.tar.gz\" | sha512sum --strict --check -; \t\tsuccess=; \tfor url in $TOMCAT_ASC_URLS; do \t\tif wget -O tomcat.tar.gz.asc \"$url\"; then \t\t\tsuccess=1; \t\t\tbreak; \t\tfi; \tdone; \t[ -n \"$success\" ]; \t\tgpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \ttar -xvf tomcat.tar.gz --strip-components=1; \trm bin/*.bat; \trm tomcat.tar.gz*; \tcommand -v gpgconf && gpgconf --kill all || :; \trm -rf \"$GNUPGHOME\"; \t\tnativeBuildDir=\"$(mktemp -d)\"; \ttar -xvf bin/tomcat-native.tar.gz -C \"$nativeBuildDir\" --strip-components=1; \tapt-get install -y --no-install-recommends \t\tdpkg-dev \t\tgcc \t\tlibapr1-dev \t\tlibssl-dev \t\tmake \t; \t( \t\texport CATALINA_HOME=\"$PWD\"; \t\tcd \"$nativeBuildDir/native\"; \t\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \t\taprConfig=\"$(which apr-1-config)\"; \t\t./configure \t\t\t--build=\"$gnuArch\" \t\t\t--libdir=\"$TOMCAT_NATIVE_LIBDIR\" \t\t\t--prefix=\"$CATALINA_HOME\" \t\t\t--with-apr=\"$aprConfig\" \t\t\t--with-java-home=\"$JAVA_HOME\" \t\t\t--with-ssl=yes; \t\tmake -j \"$(nproc)\"; \t\tmake install; \t); \trm -rf \"$nativeBuildDir\"; \trm bin/tomcat-native.tar.gz; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tfind \"$TOMCAT_NATIVE_LIBDIR\" -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \trm -rf /var/lib/apt/lists/*; \t\tfind ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \t\tchmod -R +rX .; \tchmod 777 logs work"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -e \t&& nativeLines=\"$(catalina.sh configtest 2>&1)\" \t&& nativeLines=\"$(echo \"$nativeLines\" | grep 'Apache Tomcat Native')\" \t&& nativeLines=\"$(echo \"$nativeLines\" | sort -u)\" \t&& if ! echo \"$nativeLines\" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \t\techo >&2 \"$nativeLines\"; \t\texit 1; \tfi"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "8080"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "catalina.sh"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "run"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/fb3c3ccd5a9312fffe30d2202d04f86f7c1fdd21.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "rabbitmq"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "3.8-rc"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "rabbitmq-plugins enable --offline rabbitmq_management"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \terl -noinput -eval ' \t\t{ ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) -> \t\t\tcase Acc of \t\t\t\t\"\" -> \t\t\t\t\tcase lists:suffix(\"/rabbitmqadmin\", FileInArchive) of \t\t\t\t\t\ttrue -> GetBin(); \t\t\t\t\t\tfalse -> Acc \t\t\t\t\tend; \t\t\t\t_ -> Acc \t\t\tend \t\tend, \"\", init:get_plain_arguments()), \t\tio:format(\"~s\", [ AdminBin ]), \t\tinit:stop(). \t' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin; \t[ -s /usr/local/bin/rabbitmqadmin ]; \tchmod +x /usr/local/bin/rabbitmqadmin; \tapt-get update; apt-get install -y --no-install-recommends python; rm -rf /var/lib/apt/lists/*; \trabbitmqadmin --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "15671"
                }
            ],
            "type": "DOCKER-EXPOSE"
        }
    ],
    "meta_info": "./dataset/source/fb5ab76d76d2ea95c14bc4b981248622d8cd7250.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.9.8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://www.haproxy.org/download/1.9/src/haproxy-1.9.8.tar.gz"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HAPROXY_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "2d9a3300dbd871bc35b743a83caaf50fecfbf06290610231ca2d334fd04c2aee"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -x \t\t&& savedAptMark=\"$(apt-mark showmanual)\" \t&& apt-get update && apt-get install -y --no-install-recommends \t\tca-certificates \t\tgcc \t\tlibc6-dev \t\tliblua5.3-dev \t\tlibpcre2-dev \t\tlibssl-dev \t\tmake \t\twget \t\tzlib1g-dev \t&& rm -rf /var/lib/apt/lists/* \t\t&& wget -O haproxy.tar.gz \"$HAPROXY_URL\" \t&& echo \"$HAPROXY_SHA256 *haproxy.tar.gz\" | sha256sum -c \t&& mkdir -p /usr/src/haproxy \t&& tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \t&& rm haproxy.tar.gz \t\t&& makeOpts=' \t\tTARGET=linux2628 \t\tUSE_LUA=1 LUA_INC=/usr/include/lua5.3 \t\tUSE_GETADDRINFO=1 \t\tUSE_OPENSSL=1 \t\tUSE_PCRE2=1 USE_PCRE2_JIT=1 \t\tUSE_ZLIB=1 \t' \t&& make -C /usr/src/haproxy -j \"$(nproc)\" all $makeOpts \t&& make -C /usr/src/haproxy install-bin $makeOpts \t\t&& mkdir -p /usr/local/etc/haproxy \t&& cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors \t&& rm -rf /usr/src/haproxy \t\t&& apt-mark auto '.*' > /dev/null \t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \t&& find /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "/docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "haproxy"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-f"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "/usr/local/etc/haproxy/haproxy.cfg"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/fc886263c542f332095ff2a3e1a74325ecec5a40.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "ubuntu"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "18.04"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tgosu \t; \trm -rf /var/lib/apt/lists/*; \tgosu nobody true"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PGP_KEYSERVER"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "ha.pool.sks-keyservers.net"
                }
            ],
            "type": "DOCKER-ARG"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.1.1c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"f6fb3079ad15076154eda9413fed42877d668e7069d9b87396d0804fdb3f4c90\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OPENSSL_PGP_KEY_IDS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "22.0.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "OTP_SOURCE_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"71b2fe49ed5ac386ebc189dd2e5f4b95b11b4427936be0e3c5695a903ea9ffcd\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tautoconf \t\tca-certificates \t\tdpkg-dev \t\tgcc \t\tgnupg \t\tlibncurses5-dev \t\tmake \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \t\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \texport GNUPGHOME=\"$(mktemp -d)\"; \tfor key in $OPENSSL_PGP_KEY_IDS; do \t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \tdone; \tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \techo \"$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \tmkdir -p \"$OPENSSL_PATH\"; \ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; \t\tcd \"$OPENSSL_PATH\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_HOST_MULTIARCH)\"; \tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \tRELEASE=\"4.x.y-z\" \tSYSTEM='Linux' \tBUILD='???' \t./config --openssldir=\"$OPENSSL_CONFIG_DIR\" --libdir=\"lib/$debMultiarch\"; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \tmake install_sw install_ssldirs; \tcd ..; \trm -rf \"$OPENSSL_PATH\"*; \techo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf; \tldconfig; \trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \topenssl version; \t\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \t\tmkdir -p \"$OTP_PATH\"; \twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \techo \"$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz\" | sha256sum --check --strict -; \ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \t\tcd \"$OTP_PATH\"; \texport ERL_TOP=\"$OTP_PATH\"; \t./otp_build autoconf; \tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \t./configure \t\t--host=\"$hostArch\" \t\t--build=\"$buildArch\" \t\t--disable-dynamic-ssl-lib \t\t--disable-hipe \t\t--disable-sctp \t\t--disable-silent-rules \t\t--enable-clock-gettime \t\t--enable-hybrid-heap \t\t--enable-kernel-poll \t\t--enable-shared-zlib \t\t--enable-smp-support \t\t--enable-threads \t\t--with-microstate-accounting=extra \t\t--without-common_test \t\t--without-debugger \t\t--without-dialyzer \t\t--without-diameter \t\t--without-edoc \t\t--without-erl_docgen \t\t--without-erl_interface \t\t--without-et \t\t--without-eunit \t\t--without-ftp \t\t--without-hipe \t\t--without-jinterface \t\t--without-megaco \t\t--without-observer \t\t--without-odbc \t\t--without-reltool \t\t--without-ssh \t\t--without-tftp \t\t--without-wx \t; \tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \tmake install; \tcd ..; \trm -rf \t\t\"$OTP_PATH\"* \t\t/usr/local/lib/erlang/lib/*/examples \t\t/usr/local/lib/erlang/lib/*/src \t; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\topenssl version; \terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_DATA_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/var/lib/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tgroupadd --gid 999 --system rabbitmq; \tuseradd --uid 999 --system --home-dir \"$RABBITMQ_DATA_DIR\" --gid rabbitmq rabbitmq; \tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "3.8.0-beta.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_PGP_KEY_ID"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/opt/rabbitmq"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_HOME/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "RABBITMQ_SASL_LOGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "-"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install --yes --no-install-recommends \t\tca-certificates \t\tgnupg \t\twget \t\txz-utils \t; \trm -rf /var/lib/apt/lists/*; \t\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \t\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$RABBITMQ_HOME\"; \ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; \trm -rf \"$RABBITMQ_PATH\"*; \tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \t\tapt-mark auto '.*' > /dev/null; \tapt-mark manual $savedAptMark; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \tgosu rabbitmq rabbitmqctl help; \tgosu rabbitmq rabbitmqctl list_ciphers; \tgosu rabbitmq rabbitmq-plugins list; \trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\""
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "ln -sf /opt/rabbitmq/plugins /plugins"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "$RABBITMQ_DATA_DIR"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANGUAGE"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LC_ALL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-entrypoint.sh"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-entrypoint.sh"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "4369"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "rabbitmq-server"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/fcea31b3ea7e640c7f50aa03f7735d0add18f72e.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t{ \t\techo 'Package: php*'; \t\techo 'Pin: release *'; \t\techo 'Pin-Priority: -1'; \t} > /etc/apt/preferences.d/no-debian-php"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHPIZE_DEPS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "autoconf \t\tdpkg-dev \t\tfile \t\tg++ \t\tgcc \t\tlibc-dev \t\tmake \t\tpkg-config \t\tre2c"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y \t\t$PHPIZE_DEPS \t\tca-certificates \t\tcurl \t\txz-utils \t--no-install-recommends && rm -r /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_INI_DIR"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/etc/php"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tmkdir -p \"$PHP_INI_DIR/conf.d\"; \t[ ! -d /var/www/html ]; \tmkdir -p /var/www/html; \tchown www-data:www-data /var/www/html; \tchmod 777 /var/www/html"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-fstack-protector-strong -fpic -fpie -O2\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_CPPFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"$PHP_CFLAGS\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_LDFLAGS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"-Wl,-O1 -Wl,--hash-style=both -pie\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "GPG_KEYS"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "7.4.0alpha1"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_ASC_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PHP_MD5"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "\"\""
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -xe; \t\tfetchDeps=' \t\twget \t'; \tif ! command -v gpg > /dev/null; then \t\tfetchDeps=\"$fetchDeps \t\t\tdirmngr \t\t\tgnupg \t\t\"; \tfi; \tapt-get update; \tapt-get install -y --no-install-recommends $fetchDeps; \trm -rf /var/lib/apt/lists/*; \t\tmkdir -p /usr/src; \tcd /usr/src; \t\twget -O php.tar.xz \"$PHP_URL\"; \t\tif [ -n \"$PHP_SHA256\" ]; then \t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \tfi; \tif [ -n \"$PHP_MD5\" ]; then \t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \tfi; \t\tif [ -n \"$PHP_ASC_URL\" ]; then \t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \t\tfor key in $GPG_KEYS; do \t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \t\tdone; \t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \t\trm -rf \"$GNUPGHOME\"; \tfi; \t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-source"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tlibcurl4-openssl-dev \t\tlibedit-dev \t\tlibonig-dev \t\tlibsodium-dev \t\tlibsqlite3-dev \t\tlibssl-dev \t\tlibxml2-dev \t\tzlib1g-dev \t\t${PHP_EXTRA_BUILD_DEPS:-} \t; \tsed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \t{ \t\techo 'Package: *'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: -10'; \t\techo; \t\techo 'Package: libargon2*'; \t\techo 'Pin: release n=buster'; \t\techo 'Pin-Priority: 990'; \t} > /etc/apt/preferences.d/argon2-buster; \tapt-get update; \tapt-get install -y --no-install-recommends libargon2-dev; \trm -rf /var/lib/apt/lists/*; \t\texport \t\tCFLAGS=\"$PHP_CFLAGS\" \t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \t\tLDFLAGS=\"$PHP_LDFLAGS\" \t; \tdocker-php-source extract; \tcd /usr/src/php; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \tif [ ! -d /usr/include/curl ]; then \t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \tfi; \t./configure \t\t--build=\"$gnuArch\" \t\t--with-config-file-path=\"$PHP_INI_DIR\" \t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \t\t\t\t--enable-option-checking=fatal \t\t\t\t--with-mhash \t\t\t\t--enable-ftp \t\t--enable-mbstring \t\t--enable-mysqlnd \t\t--with-password-argon2 \t\t--with-sodium=shared \t\t\t\t--with-curl \t\t--with-libedit \t\t--with-openssl \t\t--with-zlib \t\t\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \t\t--with-libdir=\"lib/$debMultiarch\" \t\t\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \t; \tmake -j \"$(nproc)\"; \tfind -type f -name '*.a' -delete; \tmake install; \tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \tmake clean; \t\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \t\tcd /; \tdocker-php-source delete; \t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \tfind /usr/local -type f -executable -exec ldd '{}' ';' \t\t| awk '/=>/ { print $(NF-1) }' \t\t| sort -u \t\t| xargs -r dpkg-query --search \t\t| cut -d: -f1 \t\t| sort -u \t\t| xargs -r apt-mark manual \t; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\tphp --version"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "/usr/local/bin/"
                        }
                    ],
                    "type": "DOCKER-COPY-TARGET"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-ext-*"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                },
                {
                    "children": [
                        {
                            "children": [],
                            "type": "DOCKER-PATH",
                            "value": "docker-php-entrypoint"
                        }
                    ],
                    "type": "DOCKER-COPY-SOURCE"
                }
            ],
            "type": "DOCKER-COPY"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "docker-php-ext-enable sodium"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                    "value": "docker-php-entrypoint"
                }
            ],
            "type": "DOCKER-ENTRYPOINT"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "php"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "-a"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/fde149cf0d61cde97b466113500467b09aa9e8ba.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "windowsservercore"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-REPO",
                    "value": "microsoft"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "ltsc2016"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-SHELL-EXECUTABLE",
                    "value": "powershell"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "-Command"
                },
                {
                    "children": [],
                    "type": "DOCKER-SHELL-ARG",
                    "value": "$ErrorActionPreference = 'Stop';"
                }
            ],
            "type": "DOCKER-SHELL"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "4.0.10"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-4.0.10-signed.msi"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "MONGO_DOWNLOAD_SHA256"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "d1ddac7ba6e2fbdfaaa0a787b83c165d4ad61795c051dc0f3142717a0b6a3707"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL); \t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \t(New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi'); \t\tWrite-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256); \tif ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) { \t\tWrite-Host 'FAILED!'; \t\texit 1; \t}; \t\tWrite-Host 'Installing ...'; \tStart-Process msiexec -Wait \t\t-ArgumentList @( \t\t\t'/i', \t\t\t'mongo.msi', \t\t\t'/quiet', \t\t\t'/qn', \t\t\t'INSTALLLOCATION=C:\\mongodb', \t\t\t'ADDLOCAL=all' \t\t); \t$env:PATH = 'C:\\mongodb\\bin;' + $env:PATH; \t[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \t\tWrite-Host 'Verifying install ...'; \tWrite-Host '  mongo --version'; mongo --version; \tWrite-Host '  mongod --version'; mongod --version; \t\tWrite-Host 'Removing ...'; \tRemove-Item C:\\mongodb\\bin\\*.pdb -Force; \tRemove-Item C:\\windows\\installer\\*.msi -Force; \tRemove-Item mongo.msi -Force; \t\tWrite-Host 'Complete.';"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\db"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "C:\\\\data\\\\configdb"
                }
            ],
            "type": "DOCKER-VOLUME"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "27017"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "mongod"
                },
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "--bind_ip_all"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/fee303fefee84741948868344b872e0e0671020d.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "stretch-slim"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tca-certificates p11-kit \t; \trm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "LANG"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "C.UTF-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_HOME"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/openjdk-8"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "$JAVA_HOME/bin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "{ echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212-b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_BASE_URL"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "JAVA_URL_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "8u212b04"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "set -eux; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) upstreamArch='x64' ;; \t\tarm64) upstreamArch='aarch64' ;; \t\t*) echo >&2 \"error: unsupported architecture: $dpkgArch\" ;; \tesac; \t\tsavedAptMark=\"$(apt-mark showmanual)\"; \tapt-get update; \tapt-get install -y --no-install-recommends \t\tdirmngr \t\tgnupg \t\twget \t; \trm -rf /var/lib/apt/lists/*; \t\twget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\"; \twget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga; \t\texport GNUPGHOME=\"$(mktemp -d)\"; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \tgpgconf --kill all; \trm -rf \"$GNUPGHOME\"; \t\tmkdir -p \"$JAVA_HOME\"; \ttar --extract \t\t--file openjdk.tgz \t\t--directory \"$JAVA_HOME\" \t\t--strip-components 1 \t\t--no-same-owner \t; \trm openjdk.tgz*; \t\t\tapt-mark auto '.*' > /dev/null; \t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \t\t{ \t\techo '#!/usr/bin/env bash'; \t\techo 'set -Eeuo pipefail'; \t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \t} > /etc/ca-certificates/update.d/docker-openjdk; \tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \t/etc/ca-certificates/update.d/docker-openjdk; \t\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \tldconfig; \t\tjava -version"
                }
            ],
            "type": "DOCKER-RUN"
        }
    ],
    "meta_info": "./dataset/source/ff952dd922c364107cfccba49c45c0ce2a379c12.Dockerfile\n",
    "type": "DOCKER-FILE"
},
{
    "children": [
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-NAME",
                    "value": "debian"
                },
                {
                    "children": [],
                    "type": "DOCKER-IMAGE-TAG",
                    "value": "jessie"
                }
            ],
            "type": "DOCKER-FROM"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "apt-get update && apt-get install -y --no-install-recommends \t\tfontconfig-config \t\tfonts-dejavu-core \t\tgeoip-database \t\tinit-system-helpers \t\tlibarchive-extract-perl \t\tlibexpat1 \t\tlibfontconfig1 \t\tlibfreetype6 \t\tlibgcrypt11 \t\tlibgd3 \t\tlibgdbm3 \t\tlibgeoip1 \t\tlibgpg-error0 \t\tlibjbig0 \t\tlibjpeg8 \t\tliblog-message-perl \t\tliblog-message-simple-perl \t\tlibmodule-pluggable-perl \t\tlibpng12-0 \t\tlibpod-latex-perl \t\tlibssl1.0.0 \t\tlibterm-ui-perl \t\tlibtext-soundex-perl \t\tlibtiff5 \t\tlibvpx1 \t\tlibx11-6 \t\tlibx11-data \t\tlibxau6 \t\tlibxcb1 \t\tlibxdmcp6 \t\tlibxml2 \t\tlibxpm4 \t\tlibxslt1.1 \t\tperl \t\tperl-modules \t\trename \t\tsgml-base \t\tucf \t\txml-core \t&& rm -rf /var/lib/apt/lists/*"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "gpg --keyserver pgp.mit.edu --recv-key \tA09CD539B8BB8CBE96E82BDFABD4D3B3F5806B4D \t4C2C85E705DC730833990C38A9376139A524C53E \tB0F4253373F8F6F510D42178520A9993A1C052F8 \t65506C02EFC250F1B7A3D694ECF0E90B2C172083 \t7338973069ED3F443F4D37DFA64FD5B17ADB39A8 \t6E067260B83DCF2CA93C566F518509686C7E5E82 \t573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "NGINX_VERSION"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "1.7.4"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "MAYBE-BASH",
                    "value": "buildDeps=\" \t\tca-certificates \t\tcurl \t\tgcc \t\tlibc-dev-bin \t\tlibc6-dev \t\tlibexpat1-dev \t\tlibfontconfig1-dev \t\tlibfreetype6-dev \t\tlibgd-dev \t\tlibgd2-dev \t\tlibgeoip-dev \t\tlibice-dev \t\tlibjbig-dev \t\tlibjpeg8-dev \t\tliblzma-dev \t\tlibpcre3-dev \t\tlibperl-dev \t\tlibpng12-dev \t\tlibpthread-stubs0-dev \t\tlibsm-dev \t\tlibssl-dev \t\tlibssl-dev \t\tlibtiff5-dev \t\tlibvpx-dev \t\tlibx11-dev \t\tlibxau-dev \t\tlibxcb1-dev \t\tlibxdmcp-dev \t\tlibxml2-dev \t\tlibxpm-dev \t\tlibxslt1-dev \t\tlibxt-dev \t\tlinux-libc-dev \t\tmake \t\tmanpages-dev \t\tx11proto-core-dev \t\tx11proto-input-dev \t\tx11proto-kb-dev \t\txtrans-dev \t\tzlib1g-dev \t\"; \tapt-get update && apt-get install -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/* \t&& curl -SL \"http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz\" -o nginx.tar.gz \t&& curl -SL \"http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc\" -o nginx.tar.gz.asc \t&& gpg --verify nginx.tar.gz.asc \t&& mkdir -p /usr/src/nginx \t&& tar -xvf nginx.tar.gz -C /usr/src/nginx --strip-components=1 \t&& rm nginx.tar.gz* \t&& cd /usr/src/nginx \t&& ./configure \t\t--user=www-data \t\t--group=www-data \t\t--prefix=/usr/local/nginx \t\t--conf-path=/etc/nginx.conf \t\t--http-log-path=/proc/self/fd/1 \t\t--error-log-path=/proc/self/fd/2 \t\t--with-http_addition_module \t\t--with-http_auth_request_module \t\t--with-http_dav_module \t\t--with-http_geoip_module \t\t--with-http_gzip_static_module \t\t--with-http_image_filter_module \t\t--with-http_perl_module \t\t--with-http_realip_module \t\t--with-http_spdy_module \t\t--with-http_ssl_module \t\t--with-http_stub_status_module \t\t--with-http_sub_module \t\t--with-http_xslt_module \t\t--with-ipv6 \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-pcre-jit \t&& make -j\"$(nproc)\" \t&& make install \t&& cd / \t&& rm -r /usr/src/nginx \t&& chown -R www-data:www-data /usr/local/nginx \t&& { \t\techo; \t\techo '# stay in the foreground so Docker has a process to track'; \t\techo 'daemon off;'; \t} >> /etc/nginx.conf \t&& apt-get purge -y --auto-remove $buildDeps"
                }
            ],
            "type": "DOCKER-RUN"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-NAME",
                    "value": "PATH"
                },
                {
                    "children": [],
                    "type": "DOCKER-LITERAL",
                    "value": "/usr/local/nginx/sbin:$PATH"
                }
            ],
            "type": "DOCKER-ENV"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PATH",
                    "value": "/usr/local/nginx/html"
                }
            ],
            "type": "DOCKER-WORKDIR"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-PORT",
                    "value": "80"
                }
            ],
            "type": "DOCKER-EXPOSE"
        },
        {
            "children": [
                {
                    "children": [],
                    "type": "DOCKER-CMD-ARG",
                    "value": "nginx"
                }
            ],
            "type": "DOCKER-CMD"
        }
    ],
    "meta_info": "./dataset/source/ffaef29733eba4016ab92139a635d8c58a9e782f.Dockerfile\n",
    "type": "DOCKER-FILE"
}]
