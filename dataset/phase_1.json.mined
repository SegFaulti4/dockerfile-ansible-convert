rabbitmq-plugins enable --offline rabbitmq_management
set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  %%INSTALL_PYTHON%%;  rabbitmqadmin --version
$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\julia\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install ("julia --version") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo 'deb https://repo.percona.com/apt stretch main' > /etc/apt/sources.list.d/percona.list
set -ex;  {   for key in    percona-server-server/root_password    percona-server-server/root_password_again    "percona-server-server-$PERCONA_MAJOR/root-pass"    "percona-server-server-$PERCONA_MAJOR/re-root-pass"   ; do    echo "percona-server-server-$PERCONA_MAJOR" "$key" password 'unused';   done;  } | debconf-set-selections;  apt-get update;  apt-get install -y   percona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
apt-get update && apt-get install -y --no-install-recommends   tk-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
pip install --no-cache-dir virtualenv
apt-get update && apt-get install -y --no-install-recommends   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
groupadd -r redmine && useradd -r -g redmine redmine
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   wget     bzr   git   mercurial   openssh-client   subversion     gsfonts   imagemagick  ;  rm -rf /var/lib/apt/lists/*
set -eux;  savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dirmngr   gnupg  ;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";   export GOSU_VERSION='1.11';  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu nobody true;   export TINI_VERSION='0.18.0';  wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch";  wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5;  gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/tini.asc;  chmod +x /usr/local/bin/tini;  tini -h;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  [ ! -d "$HOME" ];  mkdir -p "$HOME";  chown redmine:redmine "$HOME";  chmod 1777 "$HOME"
wget -O redmine.tar.gz "https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz"  && echo "$REDMINE_DOWNLOAD_MD5 redmine.tar.gz" | md5sum -c -  && tar -xvf redmine.tar.gz --strip-components=1  && rm redmine.tar.gz files/delete.me log/delete.me  && mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids  && chown -R redmine:redmine ./  && echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb  && chmod -R ugo=rwX config db sqlite  && find log tmp -type d -exec chmod 1777 '{}' +
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libmagickcore-dev   libmagickwand-dev   libmariadbclient-dev   libpq-dev   libsqlite3-dev   make   patch     libssl1.0-dev  ;  rm -rf /var/lib/apt/lists/*;   wget -O freetds.tar.bz2 'http://www.freetds.org/files/stable/freetds-1.00.91.tar.bz2';  echo '8d71f9f29be0fe0637e443dd3807b3fd *freetds.tar.bz2' | md5sum -c -;  mkdir freetds;  tar -xf freetds.tar.bz2 -C freetds --strip-components=1;  rm freetds.tar.bz2;  ( cd freetds && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && ./configure --build="$gnuArch" --enable-silent-rules && make -j "$(nproc)" && make -C src install && make -C include install );  rm -rf freetds;  gosu redmine bundle config build.tiny_tds --enable-system-freetds;   gosu redmine bundle install --without development test;  for adapter in mysql2 postgresql sqlserver sqlite3; do   echo "$RAILS_ENV:" > ./config/database.yml;   echo "  adapter: $adapter" >> ./config/database.yml;   gosu redmine bundle install --without development test;   cp Gemfile.lock "Gemfile.lock.${adapter}";  done;  rm ./config/database.yml;  chmod -R ugo=rwX Gemfile.lock "$GEM_HOME";  rm -rf ~redmine/.bundle;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | grep -v '^/usr/local/'   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
apt-get update && apt-get install -y --no-install-recommends   bzip2   gnupg dirmngr   libcurl4-openssl-dev   libfreetype6-dev   libicu-dev   libjpeg-dev   libldap2-dev   libmemcached-dev   libpng-dev   libpq-dev   libxml2-dev   unzip  && rm -rf /var/lib/apt/lists/*
set -ex;  docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  docker-php-ext-configure ldap --with-libdir="lib/$debMultiarch";  docker-php-ext-install -j "$(nproc)"   exif   gd   intl   ldap   opcache   pcntl   pdo_mysql   pdo_pgsql   pgsql   zip
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
set -ex;  pecl install APCu-5.1.11;  pecl install memcached-3.0.4;  pecl install redis-3.1.6;  docker-php-ext-enable   apcu   memcached   redis
set -eux;  curl -fL -o owncloud.tar.bz2 "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2";  curl -fL -o owncloud.tar.bz2.asc "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc";  echo "$OWNCLOUD_SHA256 *owncloud.tar.bz2" | sha256sum -c -;  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26;  gpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" owncloud.tar.bz2.asc;  tar -xjf owncloud.tar.bz2 -C /usr/src/;  rm owncloud.tar.bz2
Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...';  $tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2';  if (Test-Path $tls12RegBase) { throw ('"{0}" already exists!' -f $tls12RegBase) };  New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force;  New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
Write-Host ('Downloading {0} ...' -f $env:JAVA_URL);  Invoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip';  Write-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256);  if ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Verifying install ...';  Write-Host '  java --version'; java --version;  Write-Host '  javac --version'; javac --version;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Complete.'
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
bundle config --global frozen 1
mkdir -p /usr/src/app
apt-get update && apt-get install -y nodejs --no-install-recommends && rm -rf /var/lib/apt/lists/*
apt-get update && apt-get install -y mysql-client postgresql-client sqlite3 --no-install-recommends && rm -rf /var/lib/apt/lists/*
set -ex;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libmagickwand-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
a2enmod rewrite expires
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
apt-get update && apt-get install -y --no-install-recommends   bzip2   gnupg dirmngr   libcurl4-openssl-dev   libfreetype6-dev   libicu-dev   libjpeg-dev   libldap2-dev   libmcrypt-dev   libmemcached-dev   libpng-dev   libpq-dev   libxml2-dev   unzip  && rm -rf /var/lib/apt/lists/*
set -ex;  docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  docker-php-ext-configure ldap --with-libdir="lib/$debMultiarch";  docker-php-ext-install -j "$(nproc)"   exif   gd   intl   ldap   mcrypt   opcache   pcntl   pdo_mysql   pdo_pgsql   pgsql   zip
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
a2enmod rewrite
set -ex;  pecl install APCu-5.1.11;  pecl install memcached-3.0.4;  pecl install redis-3.1.6;  docker-php-ext-enable   apcu   memcached   redis
set -eux;  curl -fL -o owncloud.tar.bz2 "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2";  curl -fL -o owncloud.tar.bz2.asc "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc";  echo "$OWNCLOUD_SHA256 *owncloud.tar.bz2" | sha256sum -c -;  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26;  gpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" owncloud.tar.bz2.asc;  tar -xjf owncloud.tar.bz2 -C /usr/src/;  rm owncloud.tar.bz2
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   gcc   make  ;  rm -rf /var/lib/apt/lists/*;   gem install passenger --version "$PASSENGER_VERSION";  passenger-config build-native-support;  if [ -n "$(passenger-config build-native-support 2>&1)" ]; then cat /tmp/passenger_native_support-*.log; false; fi;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  passenger-config install-agent;  passenger-config download-nginx-engine
Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip';   Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256);  if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive -Path git.zip -DestinationPath C:\git\.;   Write-Host 'Removing ...';  Remove-Item git.zip -Force;   Write-Host 'Updating PATH ...';  $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  git --version'; git --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '9badf7bbc0ed55f2db967434b033a2cddf2e46dbdc5bb8560d8fde019e8e19d3';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   gcc   make  ;  rm -rf /var/lib/apt/lists/*;   gem install passenger --version "$PASSENGER_VERSION";  passenger-config build-native-support;  if [ -n "$(passenger-config build-native-support 2>&1)" ]; then cat /tmp/passenger_native_support-*.log; false; fi;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  passenger-config install-agent;  passenger-config download-nginx-engine
groupadd -r redis && useradd -r -g redis redis
set -ex;   fetchDeps="   ca-certificates   dirmngr   gnupg   wget  ";  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
apt-get update && apt-get install -y --no-install-recommends   libc6-i386  && rm -rf /var/lib/apt/lists/*
set -ex;   buildDeps='   wget     gcc   gcc-multilib   libc6-dev-i386   make  ';  apt-get update;  apt-get install -y $buildDeps --no-install-recommends;  rm -rf /var/lib/apt/lists/*;   wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL";  echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -;  mkdir -p /usr/src/redis;  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1;  rm redis.tar.gz;   grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h;  sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;   make -C /usr/src/redis -j "$(nproc)" 32bit;  make -C /usr/src/redis install;   rm -r /usr/src/redis;   apt-get purge -y --auto-remove $buildDeps
mkdir /data && chown redis:redis /data
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -ex;  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   flex  ;  rm -r /var/lib/apt/lists/*;   _fetch() {   local fetch="$1"; shift;   local file="$1"; shift;   for mirror in $GCC_MIRRORS; do    if curl -fL "$mirror/$fetch" -o "$file"; then     return 0;    fi;   done;   echo >&2 "error: failed to download '$fetch' from several mirrors";   return 1;  };   _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig" 'gcc.tar.xz.sig'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig";  _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz';  gpg --batch --verify gcc.tar.xz.sig gcc.tar.xz;  mkdir -p /usr/src/gcc;  tar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1;  rm gcc.tar.xz*;   cd /usr/src/gcc;   ./contrib/download_prerequisites;  { rm *.tar.* || true; };   for f in config.guess config.sub; do   wget -O "$f" "https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb";   find -mindepth 2 -name "$f" -exec cp -v "$f" '{}' ';';  done;   dir="$(mktemp -d)";  cd "$dir";   extraConfigureArgs='';  dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   armel)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv4t --with-float=soft"    ;;   armhf)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb"    ;;     i386)    osVersionID="$(set -e; . /etc/os-release; echo "$VERSION_ID")";    case "$osVersionID" in     8) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i586" ;;     *) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i686" ;;    esac;    ;;  esac;   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  /usr/src/gcc/configure   --build="$gnuArch"   --disable-multilib   --enable-languages=c,c++,fortran,go   $extraConfigureArgs  ;  make -j "$(nproc)";  make install-strip;   cd ..;   rm -rf "$dir" /usr/src/gcc;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -ex;  echo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf;  ldconfig -v
set -ex;  dpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc;  dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++;  dpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran;  update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -ex;   apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   imagemagick-dev   libjpeg-turbo-dev   libpng-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .wordpress-phpexts-rundeps $runDeps;  apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
apk add --no-cache   bash   less   mysql-client
set -ex;  mkdir -p /var/www/html;  chown -R www-data:www-data /var/www/html
set -ex;   apk add --no-cache --virtual .fetch-deps   gnupg  ;   curl -o /usr/local/bin/wp.gpg -fSL "https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$WORDPRESS_CLI_GPG_KEY";  gpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME" /usr/local/bin/wp.gpg;   echo "$WORDPRESS_CLI_SHA512 */usr/local/bin/wp" | sha512sum -c -;  chmod +x /usr/local/bin/wp;   apk del .fetch-deps;   wp --allow-root --version
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  javac -version'; javac -version;  Write-Host '  java -version'; java -version;   Write-Host 'Complete.'
Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip';   Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256);  if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive -Path git.zip -DestinationPath C:\git\.;   Write-Host 'Removing ...';  Remove-Item git.zip -Force;   Write-Host 'Updating PATH ...';  $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  git --version'; git --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '9badf7bbc0ed55f2db967434b033a2cddf2e46dbdc5bb8560d8fde019e8e19d3';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
apt-get update && apt-get install -y   ca-certificates   curl
gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D
curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"  && curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"  && gpg --verify SHASUMS256.txt.asc  && grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c -  && tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1  && rm "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc  && npm install -g npm@"$NPM_VERSION"  && npm cache clear
$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\julia\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install ("julia --version") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'
apt-get update  && apt-get install -y --no-install-recommends   bzip2   ca-certificates   libffi-dev   libgdbm3   libgmp-dev   libssl-dev   libyaml-dev   procps   zlib1g-dev  && rm -rf /var/lib/apt/lists/*
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   autoconf   bison   dpkg-dev   gcc   libbz2-dev   libgdbm-dev   libglib2.0-dev   libncurses-dev   libreadline-dev   libxml2-dev   libxslt-dev   make   ruby   wget   xz-utils  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false   && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -eux;  apk add --no-cache   btrfs-progs   e2fsprogs   e2fsprogs-extra   iptables   xfsprogs   xz   pigz  ;  if zfs="$(apk info --no-cache --quiet zfs)" && [ -n "$zfs" ]; then   apk add --no-cache zfs;  fi
set -x  && addgroup -S dockremap  && adduser -S -G dockremap dockremap  && echo 'dockremap:165536:65536' >> /etc/subuid  && echo 'dockremap:165536:65536' >> /etc/subgid
set -eux;  wget -O /usr/local/bin/dind "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind";  chmod +x /usr/local/bin/dind
set -ex;   apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   imagemagick-dev   libjpeg-turbo-dev   libpng-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .wordpress-phpexts-rundeps $runDeps;  apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
apk add --no-cache   bash   less   mysql-client
set -ex;  mkdir -p /var/www/html;  chown -R www-data:www-data /var/www/html
set -ex;   apk add --no-cache --virtual .fetch-deps   gnupg  ;   curl -o /usr/local/bin/wp.gpg -fSL "https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$WORDPRESS_CLI_GPG_KEY";  gpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME" /usr/local/bin/wp.gpg;   echo "$WORDPRESS_CLI_SHA512 */usr/local/bin/wp" | sha512sum -c -;  chmod +x /usr/local/bin/wp;   apk del .fetch-deps;   wp --allow-root --version
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  javac -version'; javac -version;  Write-Host '  java -version'; java -version;   Write-Host 'Complete.'
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   gcc   libc-dev   linux-headers   lua5.3-dev   make   openssl   openssl-dev   pcre2-dev   readline-dev   tar   zlib-dev   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(getconf _NPROCESSORS_ONLN)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .haproxy-rundeps $runDeps  && apk del .build-deps
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   gcc   libc-dev   linux-headers   lua5.3-dev   make   openssl   openssl-dev   pcre2-dev   readline-dev   tar   zlib-dev   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(getconf _NPROCESSORS_ONLN)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .haproxy-rundeps $runDeps  && apk del .build-deps
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && buildDeps='   bison   dpkg-dev   libgdbm-dev   ruby  '  && apt-get update  && apt-get install -y --no-install-recommends $buildDeps  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-get purge -y --auto-remove $buildDeps  && cd /  && rm -r /usr/src/ruby  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
groupadd -r mongodb && useradd -r -g mongodb mongodb
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   jq   numactl  ;  if ! command -v ps > /dev/null; then   apt-get install -y --no-install-recommends procps;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   apt-get update;  apt-get install -y --no-install-recommends   wget  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends gnupg dirmngr;  fi;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu --version;  gosu nobody true;   wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";   apt-get purge -y --auto-remove wget
mkdir /docker-entrypoint-initdb.d
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo "deb http://$MONGO_REPO/apt/ubuntu bionic/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
set -x  && apt-get update  && apt-get install -y   ${MONGO_PACKAGE}=$MONGO_VERSION   ${MONGO_PACKAGE}-server=$MONGO_VERSION   ${MONGO_PACKAGE}-shell=$MONGO_VERSION   ${MONGO_PACKAGE}-mongos=$MONGO_VERSION   ${MONGO_PACKAGE}-tools=$MONGO_VERSION  && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf /etc/mongod.conf.orig
mkdir -p /data/db /data/configdb  && chown -R mongodb:mongodb /data/db /data/configdb
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && buildDeps='   bison   dpkg-dev   libgdbm-dev   ruby  '  && apt-get update  && apt-get install -y --no-install-recommends $buildDeps  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-get purge -y --auto-remove $buildDeps  && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   libexpat1   libffi6   libgdbm3   libsqlite3-0  && rm -rf /var/lib/apt/lists/*
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) pypyArch='linux64'; sha256='8014f63b1a34b155548852c7bf73aab2d41ebddf2c8fb603dc9dd8509be93db0' ;;   i386) pypyArch='linux32'; sha256='cb11ef4b0df569c28390b1ee93029159e1b90bfbad98df6abd629d5203b2abd9' ;;   s390x) pypyArch='s390x'; sha256='4a91bf2d9a142b6dbf82b5301cb510535ae9a54e1645546b2e0735a7b5ed85ba' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;;  esac;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   bzip2   wget   libncurses5  ;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/pypy3.6-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   pypy3 --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   apt-get install -y --no-install-recommends gcc libc6-dev libssl-dev;   cd /usr/local/lib_pypy;   pypy3 _ssl_build.py;  fi;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   pypy3 get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;  pypy3 --version;  pip --version
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;   apkArch="$(apk --print-arch)";  case "$apkArch" in   x86_64) dockerArch='x86_64' ;;   armhf) dockerArch='armel' ;;   armv7) dockerArch='armhf' ;;   aarch64) dockerArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture ($apkArch)"; exit 1 ;; esac;   if ! wget -O docker.tgz "https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz"; then   echo >&2 "error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'";   exit 1;  fi;   tar --extract   --file docker.tgz   --strip-components 1   --directory /usr/local/bin/  ;  rm docker.tgz;   dockerd --version;  docker --version
groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   libjemalloc1   procps   iproute2  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends    dirmngr    gnupg   ;  fi;  rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   mkdir -p /usr/share/man/man1/;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386)    echo 'deb http://www.apache.org/dist/cassandra/debian 30x main' > /etc/apt/sources.list.d/cassandra.list;    apt-get update;    ;;   *)       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get install -y --no-install-recommends     wget ca-certificates     dpkg-dev    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       tempDir="$(mktemp -d)";    for pkg in cassandra cassandra-tools; do     deb="${pkg}_${CASSANDRA_VERSION}_all.deb";     wget -O "$tempDir/$deb" "https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb";    done;       ls -lAFh "$tempDir";    ( cd "$tempDir" && dpkg-scanpackages . > Packages );    grep '^Package: ' "$tempDir/Packages";    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y   cassandra="$CASSANDRA_VERSION"   cassandra-tools="$CASSANDRA_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   ppc64el)    if grep -q -- '^-Xss' "$CASSANDRA_CONFIG/jvm.options"; then     grep -- '^-Xss256k$' "$CASSANDRA_CONFIG/jvm.options";     sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONFIG/jvm.options";     grep -- '^-Xss512k$' "$CASSANDRA_CONFIG/jvm.options";    elif grep -q -- '-Xss256k' "$CASSANDRA_CONFIG/cassandra-env.sh"; then     sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONFIG/cassandra-env.sh";     grep -- '-Xss512k' "$CASSANDRA_CONFIG/cassandra-env.sh";    fi;    ;;  esac;   sed -ri 's/^(JVM_PATCH_VERSION)=.*/\1=25/' "$CASSANDRA_CONFIG/cassandra-env.sh"
ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat
mkdir -p /var/lib/cassandra "$CASSANDRA_CONFIG"  && chown -R cassandra:cassandra /var/lib/cassandra "$CASSANDRA_CONFIG"  && chmod 777 /var/lib/cassandra "$CASSANDRA_CONFIG"
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && buildDeps='   bison   dpkg-dev   libgdbm-dev   ruby  '  && apt-get update  && apt-get install -y --no-install-recommends $buildDeps  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-get purge -y --auto-remove $buildDeps  && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  javac --version'; javac --version;  Write-Host '  java --version'; java --version;   Write-Host 'Complete.'
set -ex;  postgresHome="$(getent passwd postgres)";  postgresHome="$(echo "$postgresHome" | cut -d: -f6)";  [ "$postgresHome" = '/var/lib/postgresql' ];  mkdir -p "$postgresHome";  chown -R postgres:postgres "$postgresHome"
mkdir /docker-entrypoint-initdb.d
set -ex   && apk add --no-cache --virtual .fetch-deps   ca-certificates   openssl   tar   && wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -  && mkdir -p /usr/src/postgresql  && tar   --extract   --file postgresql.tar.bz2   --directory /usr/src/postgresql   --strip-components 1  && rm postgresql.tar.bz2   && apk add --no-cache --virtual .build-deps   bison   coreutils   dpkg-dev dpkg   flex   gcc   libc-dev   libedit-dev   libxml2-dev   libxslt-dev   linux-headers   make   openssl-dev   perl-utils   perl-ipc-run   util-linux-dev   zlib-dev   && cd /usr/src/postgresql  && awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new  && grep '/var/run/postgresql' src/include/pg_config_manual.h.new  && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'  && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'  && ./configure   --build="$gnuArch"   --enable-integer-datetimes   --enable-thread-safety   --enable-tap-tests   --disable-rpath   --with-uuid=e2fs   --with-gnu-ld   --with-pgport=5432   --with-system-tzdata=/usr/share/zoneinfo   --prefix=/usr/local   --with-includes=/usr/local/include   --with-libraries=/usr/local/lib     --with-openssl   --with-libxml   --with-libxslt  && make -j "$(nproc)" world  && make install-world  && make -C contrib install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache --virtual .postgresql-rundeps   $runDeps   bash   su-exec   tzdata  && apk del .fetch-deps .build-deps  && cd /  && rm -rf   /usr/src/postgresql   /usr/local/share/doc   /usr/local/share/man  && find /usr/local -name '*.a' -delete
sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   ca-certificates   gcc   libc6-dev   liblua5.3-dev   libpcre2-dev   libssl-dev   make   wget   zlib1g-dev  && rm -rf /var/lib/apt/lists/*   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(nproc)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && apt-mark auto '.*' > /dev/null  && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libdb-dev   libgdbm-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
set -ex;  postgresHome="$(getent passwd postgres)";  postgresHome="$(echo "$postgresHome" | cut -d: -f6)";  [ "$postgresHome" = '/var/lib/postgresql' ];  mkdir -p "$postgresHome";  chown -R postgres:postgres "$postgresHome"
mkdir /docker-entrypoint-initdb.d
set -ex   && apk add --no-cache --virtual .fetch-deps   ca-certificates   openssl   tar   && wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -  && mkdir -p /usr/src/postgresql  && tar   --extract   --file postgresql.tar.bz2   --directory /usr/src/postgresql   --strip-components 1  && rm postgresql.tar.bz2   && apk add --no-cache --virtual .build-deps   bison   coreutils   dpkg-dev dpkg   flex   gcc   libc-dev   libedit-dev   libxml2-dev   libxslt-dev   linux-headers   make   openssl-dev   perl-utils   perl-ipc-run   util-linux-dev   zlib-dev   icu-dev   && cd /usr/src/postgresql  && awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new  && grep '/var/run/postgresql' src/include/pg_config_manual.h.new  && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'  && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'  && ./configure   --build="$gnuArch"   --enable-integer-datetimes   --enable-thread-safety   --enable-tap-tests   --disable-rpath   --with-uuid=e2fs   --with-gnu-ld   --with-pgport=5432   --with-system-tzdata=/usr/share/zoneinfo   --prefix=/usr/local   --with-includes=/usr/local/include   --with-libraries=/usr/local/lib     --with-openssl   --with-libxml   --with-libxslt   --with-icu  && make -j "$(nproc)" world  && make install-world  && make -C contrib install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache --virtual .postgresql-rundeps   $runDeps   bash   su-exec   tzdata  && apk del .fetch-deps .build-deps  && cd /  && rm -rf   /usr/src/postgresql   /usr/local/share/doc   /usr/local/share/man  && find /usr/local -name '*.a' -delete
sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;  apk add --no-cache --virtual .build-deps   bash   gcc   musl-dev   openssl   go  ;  export   GOROOT_BOOTSTRAP="$(go env GOROOT)"   GOOS="$(go env GOOS)"   GOARCH="$(go env GOARCH)"   GOHOSTOS="$(go env GOHOSTOS)"   GOHOSTARCH="$(go env GOHOSTARCH)"  ;  apkArch="$(apk --print-arch)";  case "$apkArch" in   armhf) export GOARM='6' ;;   x86) export GO386='387' ;;  esac;   wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz";  echo 'c96c5ccc7455638ae1a8b7498a030fe653731c8391c5f8e79590bce72f92b4ca *go.tgz' | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   cd /usr/local/go/src;  ./make.bash;   rm -rf   /usr/local/go/pkg/bootstrap   /usr/local/go/pkg/obj  ;  apk del .build-deps;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
docker-php-ext-enable sodium
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip';   Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256);  if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive -Path git.zip -DestinationPath C:\git\.;   Write-Host 'Removing ...';  Remove-Item git.zip -Force;   Write-Host 'Updating PATH ...';  $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  git --version'; git --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '38018a1a0fa341687cee2f71c0e7578f852bbf017ad48907cda6cc28d1b84140';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libdb-dev   libgdbm-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
groupadd -r mysql && useradd -r -g mysql mysql
apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr && rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && gpgconf --kill all  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   pwgen   openssl   perl  && rm -rf /var/lib/apt/lists/*
set -ex;  key='A4A9406876FCBD3C456770C88C718D3B5072E1F5';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/mysql.gpg;  gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list > /dev/null
echo "deb http://repo.mysql.com/apt/debian/ stretch mysql-${MYSQL_MAJOR}" > /etc/apt/sources.list.d/mysql.list
{   echo mysql-community-server mysql-community-server/data-dir select '';   echo mysql-community-server mysql-community-server/root-pass password '';   echo mysql-community-server mysql-community-server/re-root-pass password '';   echo mysql-community-server mysql-community-server/remove-test-db select false;  } | debconf-set-selections  && apt-get update && apt-get install -y mysql-server="${MYSQL_VERSION}" && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld  && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld  && chmod 777 /var/run/mysqld  && find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'  && echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
apk add --no-cache   git   openssh-client
apt-get update && apt-get install -y nodejs --no-install-recommends && rm -rf /var/lib/apt/lists/*
apt-get update && apt-get install -y mysql-client postgresql-client sqlite3 --no-install-recommends && rm -rf /var/lib/apt/lists/*
gem install rails --version "$RAILS_VERSION"
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   oniguruma-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"   ARGON2_LIBS="-largon2"   ARGON2_CFLAGS="-I/usr/include"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && php --version
docker-php-ext-enable sodium
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';   echo 'decorate_workers_output = no';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
set -ex;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libmagickwand-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   curl  ;  rm -rf /var/lib/apt/lists/*
set -eux;   savedAptMark="$(apt-mark showmanual)";  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi;   %%ARCH-CASE%%;   folder="$(echo "$JULIA_VERSION" | cut -d. -f1-2)";  curl -fL -o julia.tar.gz.asc "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc";  curl -fL -o julia.tar.gz     "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz";   echo "${sha256} *julia.tar.gz" | sha256sum -c -;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$JULIA_GPG";  gpg --batch --verify julia.tar.gz.asc julia.tar.gz;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME" julia.tar.gz.asc;   mkdir "$JULIA_PATH";  tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1;  rm julia.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   julia --version
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   libressl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   util-linux-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
addgroup -S redis && adduser -S -G redis redis
apk add --no-cache   'su-exec>=0.2'   tzdata
set -ex;   apk add --no-cache --virtual .build-deps   coreutils   gcc   linux-headers   make   musl-dev  ;   wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL";  echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -;  mkdir -p /usr/src/redis;  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1;  rm redis.tar.gz;   grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h;  sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;   make -C /usr/src/redis -j "$(nproc)";  make -C /usr/src/redis install;   rm -r /usr/src/redis;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .redis-rundeps $runDeps;  apk del .build-deps;   redis-server --version
mkdir /data && chown redis:redis /data
apt-get update && apt-get install -y --no-install-recommends   bzip2   gnupg dirmngr   libcurl4-openssl-dev   libfreetype6-dev   libicu-dev   libjpeg-dev   libldap2-dev   libmemcached-dev   libpng-dev   libpq-dev   libxml2-dev   unzip  && rm -rf /var/lib/apt/lists/*
set -ex;  docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  docker-php-ext-configure ldap --with-libdir="lib/$debMultiarch";  docker-php-ext-install -j "$(nproc)"   exif   gd   intl   ldap   opcache   pcntl   pdo_mysql   pdo_pgsql   pgsql   zip
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
a2enmod rewrite
set -ex;  pecl install APCu-5.1.11;  pecl install memcached-3.0.4;  pecl install redis-3.1.6;  docker-php-ext-enable   apcu   memcached   redis
set -eux;  curl -fL -o owncloud.tar.bz2 "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2";  curl -fL -o owncloud.tar.bz2.asc "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc";  echo "$OWNCLOUD_SHA256 *owncloud.tar.bz2" | sha256sum -c -;  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26;  gpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" owncloud.tar.bz2.asc;  tar -xjf owncloud.tar.bz2 -C /usr/src/;  rm owncloud.tar.bz2
set -eux;  apk add --no-cache   btrfs-progs   e2fsprogs   e2fsprogs-extra   iptables   xfsprogs   xz   pigz  ;  if zfs="$(apk info --no-cache --quiet zfs)" && [ -n "$zfs" ]; then   apk add --no-cache zfs;  fi
set -x  && addgroup -S dockremap  && adduser -S -G dockremap dockremap  && echo 'dockremap:165536:65536' >> /etc/subuid  && echo 'dockremap:165536:65536' >> /etc/subgid
set -eux;  wget -O /usr/local/bin/dind "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind";  chmod +x /usr/local/bin/dind
apt-get update && apt-get install -y   ca-certificates   curl
gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D
curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"  && curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"  && gpg --verify SHASUMS256.txt.asc  && grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c -  && tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1  && rm "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc  && npm install -g npm@"$NPM_VERSION"  && npm cache clear
Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...';  $tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2';  if (Test-Path $tls12RegBase) { throw ('"{0}" already exists!' -f $tls12RegBase) };  New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force;  New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
Write-Host ('Downloading {0} ...' -f $env:JAVA_URL);  Invoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip';  Write-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256);  if ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Verifying install ...';  Write-Host '  java --version'; java --version;  Write-Host '  javac --version'; javac --version;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Complete.'
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   ca-certificates   gcc   libc6-dev   libpcre2-dev   libssl1.0-dev   make   wget   zlib1g-dev  && rm -rf /var/lib/apt/lists/*   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(nproc)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && apt-mark auto '.*' > /dev/null  && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
groupadd user && useradd --create-home --home-dir /home/user -g user user
pip install redis
pip install celery=="$CELERY_VERSION"
{  echo 'import os';  echo "BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'amqp://')"; } > celeryconfig.py
apk add --no-cache   git   openssh-client
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   util-linux-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   oniguruma-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"   ARGON2_LIBS="-largon2"   ARGON2_CFLAGS="-I/usr/include"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
docker-php-ext-enable sodium
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   gcc   libc-dev   linux-headers   lua5.3-dev   make   openssl   openssl-dev   pcre2-dev   readline-dev   tar   zlib-dev   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(getconf _NPROCESSORS_ONLN)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .haproxy-rundeps $runDeps  && apk del .build-deps
apt-get update && apt-get install -y   gcc   gettext   mysql-client libmysqlclient-dev   postgresql-client libpq-dev   sqlite3  --no-install-recommends && rm -rf /var/lib/apt/lists/*
pip install mysqlclient psycopg2 django=="$DJANGO_VERSION"
apt-get update && apt-get install -y   gcc   gettext   mysql-client libmysqlclient-dev   postgresql-client libpq-dev   sqlite3  --no-install-recommends && rm -rf /var/lib/apt/lists/*
pip install mysqlclient psycopg2 django=="$DJANGO_VERSION"
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -eux;  apt-get update;  apt-get install -y --no-install-recommends apache2;  rm -rf /var/lib/apt/lists/*;   sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS";   . "$APACHE_ENVVARS";  for dir in   "$APACHE_LOCK_DIR"   "$APACHE_RUN_DIR"   "$APACHE_LOG_DIR"  ; do   rm -rvf "$dir";   mkdir -p "$dir";   chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir";   chmod 777 "$dir";  done;   rm -rvf /var/www/html/*;   ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log";  chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"
a2dismod mpm_event && a2enmod mpm_prefork
{   echo '<FilesMatch \.php$>';   echo '\tSetHandler application/x-httpd-php';   echo '</FilesMatch>';   echo;   echo 'DirectoryIndex disabled';   echo 'DirectoryIndex index.php index.html';   echo;   echo '<Directory /var/www/>';   echo '\tOptions -Indexes';   echo '\tAllowOverride All';   echo '</Directory>';  } | tee "$APACHE_CONFDIR/conf-available/docker-php.conf"  && a2enconf docker-php
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates p11-kit  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dirmngr   gnupg   wget  ;  rm -rf /var/lib/apt/lists/*;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   javac --version;  java --version
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -ex;  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   flex  ;  rm -r /var/lib/apt/lists/*;   _fetch() {   local fetch="$1"; shift;   local file="$1"; shift;   for mirror in $GCC_MIRRORS; do    if curl -fL "$mirror/$fetch" -o "$file"; then     return 0;    fi;   done;   echo >&2 "error: failed to download '$fetch' from several mirrors";   return 1;  };   _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig" 'gcc.tar.xz.sig'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig";  _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz';  gpg --batch --verify gcc.tar.xz.sig gcc.tar.xz;  mkdir -p /usr/src/gcc;  tar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1;  rm gcc.tar.xz*;   cd /usr/src/gcc;   ./contrib/download_prerequisites;  { rm *.tar.* || true; };   for f in config.guess config.sub; do   wget -O "$f" "https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb";   find -mindepth 2 -name "$f" -exec cp -v "$f" '{}' ';';  done;   dir="$(mktemp -d)";  cd "$dir";   extraConfigureArgs='';  dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   armel)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv4t --with-float=soft"    ;;   armhf)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb"    ;;     i386)    osVersionID="$(set -e; . /etc/os-release; echo "$VERSION_ID")";    case "$osVersionID" in     8) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i586" ;;     *) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i686" ;;    esac;    ;;  esac;   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  /usr/src/gcc/configure   --build="$gnuArch"   --disable-multilib   --enable-languages=c,c++,fortran,go   $extraConfigureArgs  ;  make -j "$(nproc)";  make install-strip;   cd ..;   rm -rf "$dir" /usr/src/gcc;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -ex;  echo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf;  ldconfig -v
set -ex;  dpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc;  dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++;  dpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran;  update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   bzip2   unzip   xz-utils     ca-certificates p11-kit     fontconfig libfreetype6  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   javac -version;  java -version
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   util-linux-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
apt-get update && apt-get install -y --no-install-recommends   tcl   tk  && rm -rf /var/lib/apt/lists/*
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) pypyArch='linux64'; sha256='73b09ef0860eb9ad7997af3030b22909806a273d90786d78420926df53279d66' ;;   i386) pypyArch='linux32'; sha256='41ca390a76ca0d47b8353a0d6a20d5aab5fad8b0bb647b960d8c33e873d18ef5' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;;  esac;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/pypy2.7-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   pypy --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   cd /usr/local/lib_pypy;   pypy _ssl_build.py;  fi
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   pypy get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libonig-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   php --version
docker-php-ext-enable sodium
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -ex;   if command -v a2enmod; then   a2enmod rewrite;  fi;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libpng-dev   libpq-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  ;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
apk add --no-cache bash
set -ex  && apk add --no-cache --virtual .build-deps   coreutils   freetype-dev   libjpeg-turbo-dev   libpng-dev   libzip-dev   postgresql-dev  && docker-php-ext-configure gd   --with-freetype-dir=/usr/include/   --with-jpeg-dir=/usr/include/   --with-png-dir=/usr/include/  && docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .drupal-phpexts-rundeps $runDeps  && apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
set -ex  && apk add --no-cache --virtual .build-deps   coreutils   freetype-dev   libjpeg-turbo-dev   libpng-dev   libzip-dev   postgresql-dev  && docker-php-ext-configure gd   --with-freetype-dir=/usr/include/   --with-jpeg-dir=/usr/include/   --with-png-dir=/usr/include/  && docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .drupal-phpexts-rundeps $runDeps  && apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -eux;   wget -O /openjdk.tgz "$JAVA_URL";  echo "$JAVA_SHA256 */openjdk.tgz" | sha256sum -c -;  mkdir -p "$JAVA_HOME";  tar --extract --file /openjdk.tgz --directory "$JAVA_HOME" --strip-components 1;  rm /openjdk.tgz;   java -Xshare:dump;   java --version;  javac --version
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   oniguruma-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"   ARGON2_LIBS="-largon2"   ARGON2_CFLAGS="-I/usr/include"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && php --version
docker-php-ext-enable sodium
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
mkdir -p /usr/src/app
$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\julia\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install ("julia --version") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'
groupadd --system --gid 11211 memcache && useradd --system --gid memcache --uid 11211 memcache
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   libsasl2-modules  ;  rm -rf /var/lib/apt/lists/*
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update  && apt-get install -y --no-install-recommends   ca-certificates   dpkg-dev   gcc   libc6-dev   libevent-dev   libsasl2-dev   make   perl   wget  && rm -rf /var/lib/apt/lists/*   && wget -O memcached.tar.gz "https://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz"  && echo "$MEMCACHED_SHA1  memcached.tar.gz" | sha1sum -c -  && mkdir -p /usr/src/memcached  && tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1  && rm memcached.tar.gz   && cd /usr/src/memcached   && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && enableExtstore="$(   case "$gnuArch" in    s390x-*) ;;    *) echo '--enable-extstore' ;;   esac  )"  && ./configure   --build="$gnuArch"   --enable-sasl   --enable-sasl-pwdb   $enableExtstore  && make -j "$(nproc)"   && make test  && make install   && cd / && rm -rf /usr/src/memcached   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark > /dev/null  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false   && memcached -V
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
apt-get update && apt-get install -y --no-install-recommends   tk-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
pip install --no-cache-dir virtualenv
apk add --no-cache bash
apk add --no-cache   bash   sed
set -ex;   apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   imagemagick-dev   libjpeg-turbo-dev   libpng-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .wordpress-phpexts-rundeps $runDeps;  apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   bzip2   unzip   xz-utils     ca-certificates p11-kit     fontconfig libfreetype6  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   javac --version;  java --version
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo 'deb https://repo.percona.com/apt stretch main' > /etc/apt/sources.list.d/percona.list
set -ex;  {   for key in    percona-server-server/root_password    percona-server-server/root_password_again    "percona-server-server-$PERCONA_MAJOR/root-pass"    "percona-server-server-$PERCONA_MAJOR/re-root-pass"   ; do    echo "percona-server-server-$PERCONA_MAJOR" "$key" password 'unused';   done;  } | debconf-set-selections;  apt-get update;  apt-get install -y   percona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
groupadd user && useradd --create-home --home-dir /home/user -g user user
pip install redis
pip install celery=="$CELERY_VERSION"
{  echo 'import os';  echo "BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'amqp://')"; } > celeryconfig.py
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -eux;  apt-get update;  apt-get install -y --no-install-recommends apache2;  rm -rf /var/lib/apt/lists/*;   sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS";   . "$APACHE_ENVVARS";  for dir in   "$APACHE_LOCK_DIR"   "$APACHE_RUN_DIR"   "$APACHE_LOG_DIR"  ; do   rm -rvf "$dir";   mkdir -p "$dir";   chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir";   chmod 777 "$dir";  done;   rm -rvf /var/www/html/*;   ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log";  chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"
a2dismod mpm_event && a2enmod mpm_prefork
{   echo '<FilesMatch \.php$>';   echo '\tSetHandler application/x-httpd-php';   echo '</FilesMatch>';   echo;   echo 'DirectoryIndex disabled';   echo 'DirectoryIndex index.php index.html';   echo;   echo '<Directory /var/www/>';   echo '\tOptions -Indexes';   echo '\tAllowOverride All';   echo '</Directory>';  } | tee "$APACHE_CONFDIR/conf-available/docker-php.conf"  && a2enconf docker-php
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libonig-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   php --version
docker-php-ext-enable sodium
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   gcc   libc-dev   linux-headers   lua5.3-dev   make   openssl   openssl-dev   pcre2-dev   readline-dev   tar   zlib-dev   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux-glibc   USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(getconf _NPROCESSORS_ONLN)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .haproxy-rundeps $runDeps  && apk del .build-deps
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -eux;  apt-get update;  apt-get install -y --no-install-recommends apache2;  rm -rf /var/lib/apt/lists/*;   sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS";   . "$APACHE_ENVVARS";  for dir in   "$APACHE_LOCK_DIR"   "$APACHE_RUN_DIR"   "$APACHE_LOG_DIR"  ; do   rm -rvf "$dir";   mkdir -p "$dir";   chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir";   chmod 777 "$dir";  done;   rm -rvf /var/www/html/*;   ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log";  chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"
a2dismod mpm_event && a2enmod mpm_prefork
{   echo '<FilesMatch \.php$>';   echo '\tSetHandler application/x-httpd-php';   echo '</FilesMatch>';   echo;   echo 'DirectoryIndex disabled';   echo 'DirectoryIndex index.php index.html';   echo;   echo '<Directory /var/www/>';   echo '\tOptions -Indexes';   echo '\tAllowOverride All';   echo '</Directory>';  } | tee "$APACHE_CONFDIR/conf-available/docker-php.conf"  && a2enconf docker-php
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip';   Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256);  if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive -Path git.zip -DestinationPath C:\git\.;   Write-Host 'Removing ...';  Remove-Item git.zip -Force;   Write-Host 'Updating PATH ...';  $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  git --version'; git --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '9badf7bbc0ed55f2db967434b033a2cddf2e46dbdc5bb8560d8fde019e8e19d3';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
apt-get update && apt-get install -y   bzip2   curl   gcc   gnupg dirmngr   make     bc   cpio   dpkg-dev   g++   patch   perl   python   rsync   unzip   wget  && rm -rf /var/lib/apt/lists/*
gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys AB07D806D2CE741FB886EE50B025BA8B59C36319
set -ex;  tarball="buildroot-${BUILDROOT_VERSION}.tar.bz2";  curl -fL -o buildroot.tar.bz2 "https://buildroot.org/downloads/$tarball";  curl -fL -o buildroot.tar.bz2.sign "https://buildroot.org/downloads/$tarball.sign";  gpg --batch --decrypt --output buildroot.tar.bz2.txt buildroot.tar.bz2.sign;  awk '$1 == "SHA1:" && $2 ~ /^[0-9a-f]+$/ && $3 == "'"$tarball"'" { print $2, "*buildroot.tar.bz2" }' buildroot.tar.bz2.txt > buildroot.tar.bz2.sha1;  test -s buildroot.tar.bz2.sha1;  sha1sum -c buildroot.tar.bz2.sha1;  mkdir -p /usr/src/buildroot;  tar -xf buildroot.tar.bz2 -C /usr/src/buildroot --strip-components 1;  rm buildroot.tar.bz2*
set -ex;   cd /usr/src/buildroot;   setConfs='   BR2_STATIC_LIBS=y   BR2_TOOLCHAIN_BUILDROOT_UCLIBC=y   BR2_TOOLCHAIN_BUILDROOT_WCHAR=y  ';   unsetConfs='   BR2_SHARED_LIBS  ';   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64)    setConfs="$setConfs     BR2_x86_64=y    ";    ;;      arm64)    setConfs="$setConfs     BR2_aarch64=y    ";    ;;      armel)    setConfs="$setConfs     BR2_arm=y     BR2_arm926t=y     BR2_ARM_EABI=y     BR2_ARM_INSTRUCTIONS_THUMB=y     BR2_ARM_SOFT_FLOAT=y    ";    ;;      armhf)    setConfs="$setConfs     BR2_arm=y     BR2_cortex_a9=y     BR2_ARM_EABIHF=y     BR2_ARM_ENABLE_VFP=y     BR2_ARM_FPU_VFPV3D16=y     BR2_ARM_INSTRUCTIONS_THUMB2=y    ";    unsetConfs="$unsetConfs BR2_ARM_SOFT_FLOAT";    ;;      i386)    setConfs="$setConfs     BR2_i386=y    ";    ;;            *)    echo >&2 "error: unsupported architecture '$dpkgArch'!";    exit 1;    ;;  esac;  if [ "$dpkgArch" != 'i386' ]; then   unsetConfs="$unsetConfs BR2_i386";  fi;   make defconfig;   for conf in $unsetConfs; do   sed -i    -e "s!^$conf=.*\$!# $conf is not set!"    .config;  done;   for confV in $setConfs; do   conf="${confV%=*}";   sed -i    -e "s!^$conf=.*\$!$confV!"    -e "s!^# $conf is not set\$!$confV!"    .config;   if ! grep -q "^$confV\$" .config; then    echo "$confV" >> .config;   fi;  done;   make oldconfig;   for conf in $unsetConfs; do   ! grep -q "^$conf=" .config;  done;  for confV in $setConfs; do   grep -q "^$confV\$" .config;  done;
set -ex;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  make -C /usr/src/buildroot HOST_GMP_CONF_OPTS="--build='"$gnuArch"'" -j "$(nproc)" toolchain
gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B
set -ex;  tarball="busybox-${BUSYBOX_VERSION}.tar.bz2";  curl -fL -o busybox.tar.bz2 "https://busybox.net/downloads/$tarball";  curl -fL -o busybox.tar.bz2.sig "https://busybox.net/downloads/$tarball.sig";  gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2;  mkdir -p /usr/src/busybox;  tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1;  rm busybox.tar.bz2*
set -ex;   setConfs='   CONFIG_AR=y   CONFIG_FEATURE_AR_CREATE=y   CONFIG_FEATURE_AR_LONG_FILENAMES=y   CONFIG_LAST_SUPPORTED_WCHAR=0   CONFIG_STATIC=y  ';   unsetConfs='   CONFIG_FEATURE_SYNC_FANCY  ';   make defconfig;   for conf in $unsetConfs; do   sed -i    -e "s!^$conf=.*\$!# $conf is not set!"    .config;  done;   for confV in $setConfs; do   conf="${confV%=*}";   sed -i    -e "s!^$conf=.*\$!$confV!"    -e "s!^# $conf is not set\$!$confV!"    .config;   if ! grep -q "^$confV\$" .config; then    echo "$confV" >> .config;   fi;  done;   make oldconfig;   for conf in $unsetConfs; do   ! grep -q "^$conf=" .config;  done;  for confV in $setConfs; do   grep -q "^$confV\$" .config;  done;
set -ex  && make -j "$(nproc)"   CROSS_COMPILE="$(basename /usr/src/buildroot/output/host/usr/*-buildroot-linux-uclibc*)-"   busybox  && ./busybox --help  && mkdir -p rootfs/bin  && ln -vL busybox rootfs/bin/   && ln -vL ../buildroot/output/target/usr/bin/getconf rootfs/bin/   && chroot rootfs /bin/getconf _NPROCESSORS_ONLN   && chroot rootfs /bin/busybox --install /bin
set -ex;  mkdir -p rootfs/etc;  for f in passwd shadow group; do   ln -vL    "../buildroot/system/skeleton/etc/$f"    "rootfs/etc/$f";  done;  grep -E '^root::' rootfs/etc/shadow;  sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow;  grep -E '^root:[*]:' rootfs/etc/shadow;  awk '   !/^#/ {    if ($2 != "d" && $2 != "f") {     printf "error: unknown type \"%s\" encountered in line %d: %s\n", $2, NR, $0 > "/dev/stderr";     exit 1;    }    sub(/^\/?/, "rootfs/", $1);    if ($2 == "d") {     printf "mkdir -p %s\n", $1;    }    printf "chmod %s %s\n", $3, $1;   }  ' ../buildroot/system/device_table.txt | bash -Eeuo pipefail -x
set -ex  && cd rootfs  && for userHome in $(awk -F ':' '{ print $3 ":" $4 "=" $6 }' etc/passwd); do   user="${userHome%%=*}";   home="${userHome#*=}";   home="./${home#/}";   if [ ! -d "$home" ]; then    mkdir -p "$home";    chown "$user" "$home";    chmod 755 "$home";   fi;  done
chroot rootfs /bin/sh -xec 'true'
set -ex;  ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime;  [ "$(chroot rootfs date +%Z)" = 'UTC' ]
cp -L /etc/resolv.conf rootfs/etc/  && chroot rootfs /bin/sh -xec 'nslookup google.com'  && rm rootfs/etc/resolv.conf
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  groupadd -r postgres --gid=999;  useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres;  mkdir -p /var/lib/postgresql;  chown -R postgres:postgres /var/lib/postgresql
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -eux;  if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then   grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;   sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;   ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;  fi;  apt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*;  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
set -eux;  apt-get update;  apt-get install -y --no-install-recommends libnss-wrapper;  rm -rf /var/lib/apt/lists/*
mkdir /docker-entrypoint-initdb.d
set -ex;  key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   export PYTHONDONTWRITEBYTECODE=1;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   %%ARCH_LIST%%)    echo "deb http://apt.postgresql.org/pub/repos/apt/ %%DEBIAN_SUITE%%-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;    apt-get update;    ;;   *)    echo "deb-src http://apt.postgresql.org/pub/repos/apt/ %%DEBIAN_SUITE%%-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;       case "$PG_MAJOR" in     9.* | 10 ) ;;     *)      echo 'deb http://deb.debian.org/debian %%DEBIAN_SUITE%%-backports main' >> /etc/apt/sources.list.d/pgdg.list;      ;;    esac;       tempDir="$(mktemp -d)";    cd "$tempDir";       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get build-dep -y     postgresql-common pgdg-keyring     "postgresql-$PG_MAJOR=$PG_VERSION"    ;    DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"     apt-get source --compile      postgresql-common pgdg-keyring      "postgresql-$PG_MAJOR=$PG_VERSION"    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       ls -lAFh;    dpkg-scanpackages . > Packages;    grep '^Package: ' Packages;    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y postgresql-common;  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf;  apt-get install -y   "postgresql-$PG_MAJOR=$PG_VERSION"   "postgresql-contrib-$PG_MAJOR=$PG_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi;   find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +
set -eux;  dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample";  cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample;  ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/";  sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample;  grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
mkdir -p "$HTTPD_PREFIX"  && chown www-data:www-data "$HTTPD_PREFIX"
set -eux;   runDeps='   apr-dev   apr-util-dev   apr-util-ldap   perl  ';  apk add --no-cache --virtual .build-deps   $runDeps   ca-certificates   coreutils   dpkg-dev dpkg   gcc   gnupg   libc-dev   curl-dev   jansson-dev   libxml2-dev   lua-dev   make   nghttp2-dev   openssl   openssl-dev   pcre-dev   tar   zlib-dev  ;   ddist() {   local f="$1"; shift;   local distFile="$1"; shift;   local success=;   local distUrl=;   for distUrl in $APACHE_DIST_URLS; do    if wget -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then     success=1;     break;    fi;   done;   [ -n "$success" ];  };   ddist 'httpd.tar.bz2' "httpd/httpd-$HTTPD_VERSION.tar.bz2";  echo "$HTTPD_SHA256 *httpd.tar.bz2" | sha256sum -c -;   ddist 'httpd.tar.bz2.asc' "httpd/httpd-$HTTPD_VERSION.tar.bz2.asc";  export GNUPGHOME="$(mktemp -d)";  for key in   A93D62ECC3C8EA12DB220EC934EA76E6791485A8   B9E8213AEFB861AF35A41F2C995E35221AD84DFF  ; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --verify httpd.tar.bz2.asc httpd.tar.bz2;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME" httpd.tar.bz2.asc;   mkdir -p src;  tar -xf httpd.tar.bz2 -C src --strip-components=1;  rm httpd.tar.bz2;  cd src;   patches() {   while [ "$#" -gt 0 ]; do    local patchFile="$1"; shift;    local patchSha256="$1"; shift;    ddist "$patchFile" "httpd/patches/apply_to_$HTTPD_VERSION/$patchFile";    echo "$patchSha256 *$patchFile" | sha256sum -c -;    patch -p0 < "$patchFile";    rm -f "$patchFile";   done;  };  patches $HTTPD_PATCHES;   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  ./configure   --build="$gnuArch"   --prefix="$HTTPD_PREFIX"   --enable-mods-shared=reallyall   --enable-mpms-shared=all  ;  make -j "$(nproc)";  make install;   cd ..;  rm -r src man manual;   sed -ri   -e 's!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g'   -e 's!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g'   -e 's!^(\s*TransferLog)\s+\S+!\1 /proc/self/fd/1!g'   "$HTTPD_PREFIX/conf/httpd.conf"   "$HTTPD_PREFIX/conf/extra/httpd-ssl.conf"  ;   runDeps="$runDeps $(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .httpd-rundeps $runDeps;  apk del .build-deps;   httpd -v
apt-get update && apt-get install -y   ca-certificates   curl
gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D
curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"  && curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"  && gpg --verify SHASUMS256.txt.asc  && grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c -  && tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1  && rm "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc  && npm install -g npm@1.4.28  && npm install -g npm@"$NPM_VERSION"  && npm cache clear
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   gosu  ;  rm -rf /var/lib/apt/lists/*;  gosu nobody true
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   autoconf   ca-certificates   dpkg-dev   gcc   gnupg   libncurses5-dev   make   wget  ;  rm -rf /var/lib/apt/lists/*;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum --check --strict -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  debMultiarch="$(dpkg-architecture --query DEB_HOST_MULTIARCH)";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR" --libdir="lib/$debMultiarch";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  echo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf;  ldconfig;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --progress dot:giga --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum --check --strict -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  groupadd --gid 999 --system rabbitmq;  useradd --uid 999 --system --home-dir "$RABBITMQ_DATA_DIR" --gid rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   ca-certificates   gnupg   wget   xz-utils  ;  rm -rf /var/lib/apt/lists/*;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  gosu rabbitmq rabbitmqctl help;  gosu rabbitmq rabbitmqctl list_ciphers;  gosu rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
set -eux;   wget -O /openjdk.tgz "$JAVA_URL";  echo "$JAVA_SHA256 */openjdk.tgz" | sha256sum -c -;  mkdir -p "$JAVA_HOME";  tar --extract --file /openjdk.tgz --directory "$JAVA_HOME" --strip-components 1;  rm /openjdk.tgz;   java -Xshare:dump;   java --version;  javac --version
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
docker-php-ext-enable sodium
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';   echo 'decorate_workers_output = no';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   wget   apt-transport-https   rpm   yum-utils  ;  rm -rf /var/lib/apt/lists/*
set -eux;  apkStaticDist='v3.9';  apkStaticVersion='2.10.3-r1';  apkStaticArch='x86_64';  apkStaticUrl="http://dl-cdn.alpinelinux.org/alpine/$apkStaticDist/main/$apkStaticArch/apk-tools-static-$apkStaticVersion.apk";  wget -O /tmp/apk-tools-static.apk "$apkStaticUrl";  tar -xzvf /tmp/apk-tools-static.apk -C /usr/local/ --wildcards '*bin/apk.static';  mv /usr/local/*bin/apk.static /usr/local/bin/apk;  rm /tmp/apk-tools-static.apk;  apk --version
$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\julia\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install ("julia --version") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen   tzdata  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
set -e; echo "deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main" > /etc/apt/sources.list.d/mariadb.list;  {   echo 'Package: *';   echo 'Pin: release o=MariaDB';   echo 'Pin-Priority: 999';  } > /etc/apt/preferences.d/mariadb
set -ex;  {   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password password 'unused';   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password_again password 'unused';  } | debconf-set-selections;  apt-get update;  apt-get install -y   "mariadb-server=$MARIADB_VERSION"   mariadb-backup   socat  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
apt-get update && apt-get install -y --no-install-recommends   tk-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apk add --no-cache   bzip2   coreutils   curl   gcc   gnupg   linux-headers   make   musl-dev   tzdata
gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B
set -ex;  tarball="busybox-${BUSYBOX_VERSION}.tar.bz2";  curl -fL -o busybox.tar.bz2 "https://busybox.net/downloads/$tarball";  curl -fL -o busybox.tar.bz2.sig "https://busybox.net/downloads/$tarball.sig";  gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2;  mkdir -p /usr/src/busybox;  tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1;  rm busybox.tar.bz2*
sed -i 's/^struct kconf_id \*$/static &/g' scripts/kconfig/zconf.hash.c_shipped
set -ex;   setConfs='   CONFIG_AR=y   CONFIG_FEATURE_AR_CREATE=y   CONFIG_FEATURE_AR_LONG_FILENAMES=y   CONFIG_LAST_SUPPORTED_WCHAR=0   CONFIG_STATIC=y  ';   unsetConfs='   CONFIG_FEATURE_SYNC_FANCY     CONFIG_FEATURE_HAVE_RPC   CONFIG_FEATURE_INETD_RPC   CONFIG_FEATURE_UTMP   CONFIG_FEATURE_WTMP  ';   make defconfig;   for conf in $unsetConfs; do   sed -i    -e "s!^$conf=.*\$!# $conf is not set!"    .config;  done;   for confV in $setConfs; do   conf="${confV%=*}";   sed -i    -e "s!^$conf=.*\$!$confV!"    -e "s!^# $conf is not set\$!$confV!"    .config;   if ! grep -q "^$confV\$" .config; then    echo "$confV" >> .config;   fi;  done;   make oldconfig;   for conf in $unsetConfs; do   ! grep -q "^$conf=" .config;  done;  for confV in $setConfs; do   grep -q "^$confV\$" .config;  done;
set -ex  && make -j "$(nproc)"   busybox  && ./busybox --help  && mkdir -p rootfs/bin  && ln -vL busybox rootfs/bin/  && chroot rootfs /bin/busybox --install /bin
set -x  && aportsVersion="v$(cat /etc/alpine-release)"  && curl -fsSL   "https://git.alpinelinux.org/cgit/aports/plain/main/musl/getconf.c?h=${aportsVersion}"   -o /usr/src/getconf.c  && gcc -o rootfs/bin/getconf -static -Os /usr/src/getconf.c  && chroot rootfs /bin/getconf _NPROCESSORS_ONLN
set -ex;  buildrootVersion='2019.05';  mkdir -p rootfs/etc;  for f in passwd shadow group; do   curl -fL -o "rootfs/etc/$f" "https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion";  done;  grep -E '^root::' rootfs/etc/shadow;  sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow;  grep -E '^root:[*]:' rootfs/etc/shadow;  curl -fL -o buildroot-device-table.txt "https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion";  awk '   !/^#/ {    if ($2 != "d" && $2 != "f") {     printf "error: unknown type \"%s\" encountered in line %d: %s\n", $2, NR, $0 > "/dev/stderr";     exit 1;    }    sub(/^\/?/, "rootfs/", $1);    if ($2 == "d") {     printf "mkdir -p %s\n", $1;    }    printf "chmod %s %s\n", $3, $1;   }  ' buildroot-device-table.txt | sh -eux;  rm buildroot-device-table.txt
set -ex  && cd rootfs  && for userHome in $(awk -F ':' '{ print $3 ":" $4 "=" $6 }' etc/passwd); do   user="${userHome%%=*}";   home="${userHome#*=}";   home="./${home#/}";   if [ ! -d "$home" ]; then    mkdir -p "$home";    chown "$user" "$home";    chmod 755 "$home";   fi;  done
chroot rootfs /bin/sh -xec 'true'
set -ex;  ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime;  [ "$(chroot rootfs date +%Z)" = 'UTC' ]
cp -L /etc/resolv.conf rootfs/etc/  && chroot rootfs /bin/sh -xec 'nslookup google.com'  && rm rootfs/etc/resolv.conf
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;  apk add --no-cache --virtual .build-deps   bash   gcc   musl-dev   openssl   go  ;  export   GOROOT_BOOTSTRAP="$(go env GOROOT)"   GOOS="$(go env GOOS)"   GOARCH="$(go env GOARCH)"   GOHOSTOS="$(go env GOHOSTOS)"   GOHOSTARCH="$(go env GOHOSTARCH)"  ;  apkArch="$(apk --print-arch)";  case "$apkArch" in   armhf) export GOARM='6' ;;   x86) export GO386='387' ;;  esac;   wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz";  echo 'c96c5ccc7455638ae1a8b7498a030fe653731c8391c5f8e79590bce72f92b4ca *go.tgz' | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   cd /usr/local/go/src;  ./make.bash;   rm -rf   /usr/local/go/pkg/bootstrap   /usr/local/go/pkg/obj  ;  apk del .build-deps;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   oniguruma-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"   ARGON2_LIBS="-largon2"   ARGON2_CFLAGS="-I/usr/include"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && php --version
docker-php-ext-enable sodium
apt-get update && apt-get install -y --no-install-recommends   g++   gcc   libc6-dev   make   pkg-config  && rm -rf /var/lib/apt/lists/*
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) goRelArch='linux-amd64'; goRelSha256='2fd47b824d6e32154b0f6c8742d066d816667715763e06cebb710304b195c775' ;;   armhf) goRelArch='linux-armv6l'; goRelSha256='c2b882a5fbb3bac5c9cc6d65bfe17a5febfe0251a339fc059306bb825dec9b17' ;;   arm64) goRelArch='linux-arm64'; goRelSha256='5ee39ea08e5d8c017658f36d0f969b17a44d49576214f4a00710f2d98bb773be' ;;   i386) goRelArch='linux-386'; goRelSha256='c711fe5025608e14bcd0efda9403e9b8f05cb4a53a125e296d639c10d280a65f' ;;   ppc64el) goRelArch='linux-ppc64le'; goRelSha256='98ff7ff2367239e26745231aabeaf9d7e51c40b616bb9aa15d4376792ff581d1' ;;   s390x) goRelArch='linux-s390x'; goRelSha256='d7471874ed396f72dd550c3593c9f42d5e3d38a2cca7658e669305bf9023e6c8' ;;   *) goRelArch='src'; goRelSha256='1fff7c33ef2522e6dfaf6ab96ec4c2a8b76d018aae6fc88ce2bd40f2202d0f8c';    echo >&2; echo >&2 "warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source"; echo >&2 ;;  esac;   url="https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz";  wget -O go.tgz "$url";  echo "${goRelSha256} *go.tgz" | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   if [ "$goRelArch" = 'src' ]; then   echo >&2;   echo >&2 'error: UNIMPLEMENTED';   echo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)';   echo >&2;   exit 1;  fi;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
set -ex;  postgresHome="$(getent passwd postgres)";  postgresHome="$(echo "$postgresHome" | cut -d: -f6)";  [ "$postgresHome" = '/var/lib/postgresql' ];  mkdir -p "$postgresHome";  chown -R postgres:postgres "$postgresHome"
mkdir /docker-entrypoint-initdb.d
set -ex   && apk add --no-cache --virtual .fetch-deps   ca-certificates   openssl   tar   && wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -  && mkdir -p /usr/src/postgresql  && tar   --extract   --file postgresql.tar.bz2   --directory /usr/src/postgresql   --strip-components 1  && rm postgresql.tar.bz2   && apk add --no-cache --virtual .build-deps   bison   coreutils   dpkg-dev dpkg   flex   gcc   libc-dev   libedit-dev   libxml2-dev   libxslt-dev   linux-headers   make   openssl-dev   perl-utils   perl-ipc-run   util-linux-dev   zlib-dev   && cd /usr/src/postgresql  && awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new  && grep '/var/run/postgresql' src/include/pg_config_manual.h.new  && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'  && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'  && ./configure   --build="$gnuArch"   --enable-integer-datetimes   --enable-thread-safety   --enable-tap-tests   --disable-rpath   --with-uuid=e2fs   --with-gnu-ld   --with-pgport=5432   --with-system-tzdata=/usr/share/zoneinfo   --prefix=/usr/local   --with-includes=/usr/local/include   --with-libraries=/usr/local/lib     --with-openssl   --with-libxml   --with-libxslt  && make -j "$(nproc)" world  && make install-world  && make -C contrib install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache --virtual .postgresql-rundeps   $runDeps   bash   su-exec   tzdata  && apk del .fetch-deps .build-deps  && cd /  && rm -rf   /usr/src/postgresql   /usr/local/share/doc   /usr/local/share/man  && find /usr/local -name '*.a' -delete
sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4   --with-system-expat   --with-system-ffi  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
apt-get update && apt-get install -y   bzip2   curl   gcc   gnupg dirmngr   make  && rm -rf /var/lib/apt/lists/*
gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B
set -ex;  tarball="busybox-${BUSYBOX_VERSION}.tar.bz2";  curl -fL -o busybox.tar.bz2 "https://busybox.net/downloads/$tarball";  curl -fL -o busybox.tar.bz2.sig "https://busybox.net/downloads/$tarball.sig";  gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2;  mkdir -p /usr/src/busybox;  tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1;  rm busybox.tar.bz2*
set -ex;   setConfs='   CONFIG_AR=y   CONFIG_FEATURE_AR_CREATE=y   CONFIG_FEATURE_AR_LONG_FILENAMES=y   CONFIG_LAST_SUPPORTED_WCHAR=0  ';   unsetConfs='   CONFIG_FEATURE_SYNC_FANCY  ';   make defconfig;   for conf in $unsetConfs; do   sed -i    -e "s!^$conf=.*\$!# $conf is not set!"    .config;  done;   for confV in $setConfs; do   conf="${confV%=*}";   sed -i    -e "s!^$conf=.*\$!$confV!"    -e "s!^# $conf is not set\$!$confV!"    .config;   if ! grep -q "^$confV\$" .config; then    echo "$confV" >> .config;   fi;  done;   make oldconfig;   for conf in $unsetConfs; do   ! grep -q "^$conf=" .config;  done;  for confV in $setConfs; do   grep -q "^$confV\$" .config;  done;
set -ex  && make -j "$(nproc)"   busybox  && ./busybox --help  && mkdir -p rootfs/bin  && ln -vL busybox rootfs/bin/   && ln -vL "$(which getconf)" rootfs/bin/getconf   && mkdir -p rootfs/etc  && cp /etc/nsswitch.conf rootfs/etc/  && mkdir -p rootfs/lib  && ln -sT lib rootfs/lib64  && set --   rootfs/bin/busybox   rootfs/bin/getconf   /lib/"$(gcc -print-multiarch)"/libnss*.so.*   /lib/"$(gcc -print-multiarch)"/libpthread*.so.*  && while [ "$#" -gt 0 ]; do   f="$1"; shift;   fn="$(basename "$f")";   if [ -e "rootfs/lib/$fn" ]; then continue; fi;   if [ "${f#rootfs/}" = "$f" ]; then    if [ "${fn#ld-}" = "$fn" ]; then     ln -vL "$f" "rootfs/lib/$fn";    else     cp -v "$f" "rootfs/lib/$fn";    fi;   fi;   set -- "$@" $(ldd "$f" | awk '    $1 ~ /^\// { print $1; next }    $2 == "=>" && $3 ~ /^\// { print $3; next }   ');  done   && chroot rootfs /bin/getconf _NPROCESSORS_ONLN   && chroot rootfs /bin/busybox --install /bin
set -ex;  buildrootVersion='2019.05';  mkdir -p rootfs/etc;  for f in passwd shadow group; do   curl -fL -o "rootfs/etc/$f" "https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion";  done;  grep -E '^root::' rootfs/etc/shadow;  sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow;  grep -E '^root:[*]:' rootfs/etc/shadow;  curl -fL -o buildroot-device-table.txt "https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion";  awk '   !/^#/ {    if ($2 != "d" && $2 != "f") {     printf "error: unknown type \"%s\" encountered in line %d: %s\n", $2, NR, $0 > "/dev/stderr";     exit 1;    }    sub(/^\/?/, "rootfs/", $1);    if ($2 == "d") {     printf "mkdir -p %s\n", $1;    }    printf "chmod %s %s\n", $3, $1;   }  ' buildroot-device-table.txt | bash -Eeuo pipefail -x;  rm buildroot-device-table.txt
set -ex  && cd rootfs  && for userHome in $(awk -F ':' '{ print $3 ":" $4 "=" $6 }' etc/passwd); do   user="${userHome%%=*}";   home="${userHome#*=}";   home="./${home#/}";   if [ ! -d "$home" ]; then    mkdir -p "$home";    chown "$user" "$home";    chmod 755 "$home";   fi;  done
chroot rootfs /bin/sh -xec 'true'
set -ex;  ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime;  [ "$(chroot rootfs date +%Z)" = 'UTC' ]
cp -L /etc/resolv.conf rootfs/etc/  && chroot rootfs /bin/sh -xec 'nslookup google.com'  && rm rootfs/etc/resolv.conf
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
apt-get update  && apt-get install -y --no-install-recommends   bzip2   ca-certificates   libffi-dev   libgdbm3   libgmp-dev   libssl-dev   libyaml-dev   procps   zlib1g-dev  && rm -rf /var/lib/apt/lists/*
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   autoconf   bison   dpkg-dev   gcc   libbz2-dev   libgdbm-dev   libglib2.0-dev   libncurses-dev   libreadline-dev   libxml2-dev   libxslt-dev   make   ruby   wget   xz-utils  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false   && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
apt-get update && apt-get install -y --no-install-recommends   tcl   tk  && rm -rf /var/lib/apt/lists/*
set -ex;   %%ARCH-CASE%%;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/%%TAR%%-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   %%CMD%% --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   cd /usr/local/lib_pypy;   %%CMD%% _ssl_build.py;  fi
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   %%CMD%% get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -ex  && apk add --no-cache --virtual .build-deps   coreutils   freetype-dev   libjpeg-turbo-dev   libpng-dev   libzip-dev   postgresql-dev  && docker-php-ext-configure gd   --with-freetype-dir=/usr/include/   --with-jpeg-dir=/usr/include/   --with-png-dir=/usr/include/  && docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .drupal-phpexts-rundeps $runDeps  && apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
apt-get update && apt-get install -y --no-install-recommends   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   ca-certificates   gcc   libc6-dev   liblua5.3-dev   libpcre2-dev   libssl-dev   make   wget   zlib1g-dev  && rm -rf /var/lib/apt/lists/*   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(nproc)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && apt-mark auto '.*' > /dev/null  && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
groupadd -r redmine && useradd -r -g redmine redmine
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   wget     bzr   git   mercurial   openssh-client   subversion     gsfonts   imagemagick  ;  rm -rf /var/lib/apt/lists/*
set -eux;  savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dirmngr   gnupg  ;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";   export GOSU_VERSION='1.11';  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu nobody true;   export TINI_VERSION='0.18.0';  wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch";  wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5;  gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/tini.asc;  chmod +x /usr/local/bin/tini;  tini -h;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  [ ! -d "$HOME" ];  mkdir -p "$HOME";  chown redmine:redmine "$HOME";  chmod 1777 "$HOME"
wget -O redmine.tar.gz "https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz"  && echo "$REDMINE_DOWNLOAD_MD5 redmine.tar.gz" | md5sum -c -  && tar -xvf redmine.tar.gz --strip-components=1  && rm redmine.tar.gz files/delete.me log/delete.me  && mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids  && chown -R redmine:redmine ./  && echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb  && chmod -R ugo=rwX config db sqlite  && find log tmp -type d -exec chmod 1777 '{}' +
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libmagickcore-dev   libmagickwand-dev   libmariadbclient-dev   libpq-dev   libsqlite3-dev   make   patch     libssl1.0-dev  ;  rm -rf /var/lib/apt/lists/*;   wget -O freetds.tar.bz2 'http://www.freetds.org/files/stable/freetds-1.00.91.tar.bz2';  echo '8d71f9f29be0fe0637e443dd3807b3fd *freetds.tar.bz2' | md5sum -c -;  mkdir freetds;  tar -xf freetds.tar.bz2 -C freetds --strip-components=1;  rm freetds.tar.bz2;  ( cd freetds && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && ./configure --build="$gnuArch" --enable-silent-rules && make -j "$(nproc)" && make -C src install && make -C include install );  rm -rf freetds;  gosu redmine bundle config build.tiny_tds --enable-system-freetds;   gosu redmine bundle install --without development test;  for adapter in mysql2 postgresql sqlserver sqlite3; do   echo "$RAILS_ENV:" > ./config/database.yml;   echo "  adapter: $adapter" >> ./config/database.yml;   gosu redmine bundle install --without development test;   cp Gemfile.lock "Gemfile.lock.${adapter}";  done;  rm ./config/database.yml;  chmod -R ugo=rwX Gemfile.lock "$GEM_HOME";  rm -rf ~redmine/.bundle;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | grep -v '^/usr/local/'   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   coreutils   curl-dev   libedit-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
apt-get update && apt-get install -y git vim --no-install-recommends && rm -rf /var/lib/apt/lists/*
cpanm Digest::SHA Module::Signature
cpanm App::cpanminus
cpanm Mojolicious@5.80
cpanm EV
cpanm IO::Socket::IP
cpanm --notest IO::Socket::SSL
cpanm Term::UI
mkdir ~/.vim ~/.vim/bundle ~/.vim/autoload
set -x  && git clone https://github.com/tpope/vim-pathogen.git ~/.vim/bundle/pathogen  && ln -s ../bundle/pathogen/autoload/pathogen.vim ~/.vim/autoload/
git clone https://github.com/jtratner/vim-flavored-markdown.git ~/.vim/bundle/ghmarkdown
git clone https://github.com/nanotech/jellybeans.vim.git ~/.vim/bundle/jellybeans
{   echo 'scriptencoding utf-8';     echo 'execute pathogen#infect()';     echo 'syntax on';   echo 'filetype plugin indent on';   echo 'set list listchars=tab:»·,nbsp:_,extends:¬ noet ts=4 sw=4 nobackup noswapfile';     echo 'set background=dark';   echo 'colorscheme jellybeans';     echo 'au FilterWritePre * if &diff | setlocal wrap< | endif';     echo 'au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown';  } > ~/.vimrc
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen   tzdata  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
set -e; echo "deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main" > /etc/apt/sources.list.d/mariadb.list;  {   echo 'Package: *';   echo 'Pin: release o=MariaDB';   echo 'Pin-Priority: 999';  } > /etc/apt/preferences.d/mariadb
set -ex;  {   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password password 'unused';   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password_again password 'unused';  } | debconf-set-selections;  apt-get update;  apt-get install -y   "mariadb-server=$MARIADB_VERSION"   mariadb-backup-10.1   socat  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates p11-kit  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dirmngr   gnupg   wget  ;  rm -rf /var/lib/apt/lists/*;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   javac -version;  java -version
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
docker-php-ext-enable sodium
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   libexpat1   libffi6   libgdbm3   libsqlite3-0  && rm -rf /var/lib/apt/lists/*
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) pypyArch='linux64'; sha256='73b09ef0860eb9ad7997af3030b22909806a273d90786d78420926df53279d66' ;;   i386) pypyArch='linux32'; sha256='41ca390a76ca0d47b8353a0d6a20d5aab5fad8b0bb647b960d8c33e873d18ef5' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;;  esac;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   bzip2   wget   libncurses5  ;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/pypy2.7-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   pypy --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   apt-get install -y --no-install-recommends gcc libc6-dev libssl-dev;   cd /usr/local/lib_pypy;   pypy _ssl_build.py;  fi;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   pypy get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;  pypy --version;  pip --version
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   util-linux-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
docker-php-ext-enable sodium
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libonig-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   php --version
docker-php-ext-enable sodium
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';   echo 'decorate_workers_output = no';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4   --with-system-expat   --with-system-ffi  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;   apkArch="$(apk --print-arch)";  case "$apkArch" in   x86_64) dockerArch='x86_64' ;;   armhf) dockerArch='armel' ;;   armv7) dockerArch='armhf' ;;   aarch64) dockerArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture ($apkArch)"; exit 1 ;; esac;   if ! wget -O docker.tgz "https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz"; then   echo >&2 "error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'";   exit 1;  fi;   tar --extract   --file docker.tgz   --strip-components 1   --directory /usr/local/bin/  ;  rm docker.tgz;   dockerd --version;  docker --version
set -ex;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libmagickwand-dev   libpng-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
a2enmod rewrite expires
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;  apk add --no-cache --virtual .build-deps   bash   gcc   musl-dev   openssl   go  ;  export   GOROOT_BOOTSTRAP="$(go env GOROOT)"   GOOS="$(go env GOOS)"   GOARCH="$(go env GOARCH)"   GOHOSTOS="$(go env GOHOSTOS)"   GOHOSTARCH="$(go env GOHOSTARCH)"  ;  apkArch="$(apk --print-arch)";  case "$apkArch" in   armhf) export GOARM='6' ;;   x86) export GO386='387' ;;  esac;   wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz";  echo '%%SRC-SHA256%% *go.tgz' | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   cd /usr/local/go/src;  ./make.bash;   rm -rf   /usr/local/go/pkg/bootstrap   /usr/local/go/pkg/obj  ;  apk del .build-deps;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  javac --version'; javac --version;  Write-Host '  java --version'; java --version;   Write-Host 'Complete.'
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen   tzdata  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
set -e; echo "deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu %%SUITE%% main" > /etc/apt/sources.list.d/mariadb.list;  {   echo 'Package: *';   echo 'Pin: release o=MariaDB';   echo 'Pin-Priority: 999';  } > /etc/apt/preferences.d/mariadb
set -ex;  {   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password password 'unused';   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password_again password 'unused';  } | debconf-set-selections;  apt-get update;  apt-get install -y   "mariadb-server=$MARIADB_VERSION"   %%BACKUP_PACKAGE%%   socat  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
apk add --no-cache   'su-exec>=0.2'   bash   procps
set -eux;   apk add --no-cache --virtual .build-deps   autoconf   ca-certificates   dpkg-dev dpkg   gcc   gnupg   libc-dev   linux-headers   make   ncurses-dev  ;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   mkdir /usr/local/src;   wget --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum -c -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum -c -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --no-cache --virtual .otp-run-deps $runDeps;  apk del --no-network .build-deps;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  addgroup -g 101 -S rabbitmq;  adduser -u 100 -S -h "$RABBITMQ_DATA_DIR" -G rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   apk add --no-cache --virtual .build-deps   ca-certificates   gnupg   xz  ;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apk del .build-deps;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  su-exec rabbitmq rabbitmqctl help;  su-exec rabbitmq rabbitmqctl list_ciphers;  su-exec rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;   apkArch="$(apk --print-arch)";  case "$apkArch" in   x86_64) dockerArch='x86_64' ;;   armhf) dockerArch='armel' ;;   armv7) dockerArch='armhf' ;;   aarch64) dockerArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture ($apkArch)"; exit 1 ;; esac;   if ! wget -O docker.tgz "https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz"; then   echo >&2 "error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'";   exit 1;  fi;   tar --extract   --file docker.tgz   --strip-components 1   --directory /usr/local/bin/  ;  rm docker.tgz;   dockerd --version;  docker --version
apt-get update && apt-get install -y --no-install-recommends   bzip2   gnupg dirmngr   libcurl4-openssl-dev   libfreetype6-dev   libicu-dev   libjpeg-dev   libldap2-dev   libmcrypt-dev   libmemcached-dev   libpng-dev   libpq-dev   libxml2-dev   unzip  && rm -rf /var/lib/apt/lists/*
set -ex;  docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  docker-php-ext-configure ldap --with-libdir="lib/$debMultiarch";  docker-php-ext-install -j "$(nproc)"   exif   gd   intl   ldap   mcrypt   opcache   pcntl   pdo_mysql   pdo_pgsql   pgsql   zip
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
a2enmod rewrite
set -ex;  pecl install APCu-5.1.11;  pecl install memcached-3.0.4;  pecl install redis-3.1.6;  docker-php-ext-enable   apcu   memcached   redis
set -eux;  curl -fL -o owncloud.tar.bz2 "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2";  curl -fL -o owncloud.tar.bz2.asc "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc";  echo "$OWNCLOUD_SHA256 *owncloud.tar.bz2" | sha256sum -c -;  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26;  gpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" owncloud.tar.bz2.asc;  tar -xjf owncloud.tar.bz2 -C /usr/src/;  rm owncloud.tar.bz2
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
set -ex;  postgresHome="$(getent passwd postgres)";  postgresHome="$(echo "$postgresHome" | cut -d: -f6)";  [ "$postgresHome" = '/var/lib/postgresql' ];  mkdir -p "$postgresHome";  chown -R postgres:postgres "$postgresHome"
mkdir /docker-entrypoint-initdb.d
set -ex   && apk add --no-cache --virtual .fetch-deps   ca-certificates   openssl   tar   && wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -  && mkdir -p /usr/src/postgresql  && tar   --extract   --file postgresql.tar.bz2   --directory /usr/src/postgresql   --strip-components 1  && rm postgresql.tar.bz2   && apk add --no-cache --virtual .build-deps   bison   coreutils   dpkg-dev dpkg   flex   gcc   libc-dev   libedit-dev   libxml2-dev   libxslt-dev   linux-headers   make   openssl-dev   perl-utils   perl-ipc-run   util-linux-dev   zlib-dev   icu-dev   && cd /usr/src/postgresql  && awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new  && grep '/var/run/postgresql' src/include/pg_config_manual.h.new  && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'  && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'  && ./configure   --build="$gnuArch"   --enable-integer-datetimes   --enable-thread-safety   --enable-tap-tests   --disable-rpath   --with-uuid=e2fs   --with-gnu-ld   --with-pgport=5432   --with-system-tzdata=/usr/share/zoneinfo   --prefix=/usr/local   --with-includes=/usr/local/include   --with-libraries=/usr/local/lib     --with-openssl   --with-libxml   --with-libxslt   --with-icu  && make -j "$(nproc)" world  && make install-world  && make -C contrib install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache --virtual .postgresql-rundeps   $runDeps   bash   su-exec   tzdata  && apk del .fetch-deps .build-deps  && cd /  && rm -rf   /usr/src/postgresql   /usr/local/share/doc   /usr/local/share/man  && find /usr/local -name '*.a' -delete
sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
groupadd -r mongodb && useradd -r -g mongodb mongodb
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   jq   numactl  ;  if ! command -v ps > /dev/null; then   apt-get install -y --no-install-recommends procps;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   apt-get update;  apt-get install -y --no-install-recommends   wget  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends gnupg dirmngr;  fi;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu --version;  gosu nobody true;   wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";   apt-get purge -y --auto-remove wget
mkdir /docker-entrypoint-initdb.d
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo "deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
set -x  && apt-get update  && apt-get install -y   ${MONGO_PACKAGE}=$MONGO_VERSION   ${MONGO_PACKAGE}-server=$MONGO_VERSION   ${MONGO_PACKAGE}-shell=$MONGO_VERSION   ${MONGO_PACKAGE}-mongos=$MONGO_VERSION   ${MONGO_PACKAGE}-tools=$MONGO_VERSION  && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf /etc/mongod.conf.orig
mkdir -p /data/db /data/configdb  && chown -R mongodb:mongodb /data/db /data/configdb
apt-get update && apt-get install -y --no-install-recommends   tk-dev   uuid-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   gosu  ;  rm -rf /var/lib/apt/lists/*;  gosu nobody true
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   autoconf   ca-certificates   dpkg-dev   gcc   gnupg   libncurses5-dev   make   wget  ;  rm -rf /var/lib/apt/lists/*;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum --check --strict -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  debMultiarch="$(dpkg-architecture --query DEB_HOST_MULTIARCH)";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR" --libdir="lib/$debMultiarch";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  echo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf;  ldconfig;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --progress dot:giga --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum --check --strict -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  groupadd --gid 999 --system rabbitmq;  useradd --uid 999 --system --home-dir "$RABBITMQ_DATA_DIR" --gid rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   ca-certificates   gnupg   wget   xz-utils  ;  rm -rf /var/lib/apt/lists/*;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  gosu rabbitmq rabbitmqctl help;  gosu rabbitmq rabbitmqctl list_ciphers;  gosu rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
apk add --no-cache 'su-exec>=0.2'
apk add --no-cache   bash
set -eux;  npm install -g "ghost-cli@$GHOST_CLI_VERSION";  npm cache clean --force
set -eux;  mkdir -p "$GHOST_INSTALL";  chown node:node "$GHOST_INSTALL";   su-exec node ghost install "$GHOST_VERSION" --db sqlite3 --no-prompt --no-stack --no-setup --dir "$GHOST_INSTALL";   cd "$GHOST_INSTALL";  su-exec node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath "$GHOST_CONTENT/data/ghost.db";  su-exec node ghost config paths.contentPath "$GHOST_CONTENT";   su-exec node ln -s config.production.json "$GHOST_INSTALL/config.development.json";  readlink -f "$GHOST_INSTALL/config.development.json";   mv "$GHOST_CONTENT" "$GHOST_INSTALL/content.orig";  mkdir -p "$GHOST_CONTENT";  chown node:node "$GHOST_CONTENT";   cd "$GHOST_INSTALL/current";  sqlite3Version="$(npm view . optionalDependencies.sqlite3)";  if ! su-exec node yarn add "sqlite3@$sqlite3Version" --force; then   apk add --no-cache --virtual .build-deps python make gcc g++ libc-dev;     su-exec node yarn add "sqlite3@$sqlite3Version" --force --build-from-source;     apk del --no-network .build-deps;  fi;   su-exec node yarn cache clean;  su-exec node npm cache clean --force;  npm cache clean --force;  rm -rv /tmp/yarn* /tmp/v8*
apt-get update  && apt-get install -y --no-install-recommends   bzip2   ca-certificates   libffi-dev   libgdbm3   libgmp-dev   libssl-dev   libyaml-dev   procps   zlib1g-dev  && rm -rf /var/lib/apt/lists/*
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   autoconf   bison   dpkg-dev   gcc   libbz2-dev   libgdbm-dev   libglib2.0-dev   libncurses-dev   libreadline-dev   libxml2-dev   libxslt-dev   make   ruby   wget   xz-utils  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false   && cd /  && rm -r /usr/src/ruby  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   libjemalloc1   procps   iproute2  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends    dirmngr    gnupg   ;  fi;  rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   mkdir -p /usr/share/man/man1/;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386)    echo 'deb http://www.apache.org/dist/cassandra/debian 311x main' > /etc/apt/sources.list.d/cassandra.list;    apt-get update;    ;;   *)       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get install -y --no-install-recommends     wget ca-certificates     dpkg-dev    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       tempDir="$(mktemp -d)";    for pkg in cassandra cassandra-tools; do     deb="${pkg}_${CASSANDRA_VERSION}_all.deb";     wget -O "$tempDir/$deb" "https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb";    done;       ls -lAFh "$tempDir";    ( cd "$tempDir" && dpkg-scanpackages . > Packages );    grep '^Package: ' "$tempDir/Packages";    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y   cassandra="$CASSANDRA_VERSION"   cassandra-tools="$CASSANDRA_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   ppc64el)    if grep -q -- '^-Xss' "$CASSANDRA_CONFIG/jvm.options"; then     grep -- '^-Xss256k$' "$CASSANDRA_CONFIG/jvm.options";     sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONFIG/jvm.options";     grep -- '^-Xss512k$' "$CASSANDRA_CONFIG/jvm.options";    elif grep -q -- '-Xss256k' "$CASSANDRA_CONFIG/cassandra-env.sh"; then     sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONFIG/cassandra-env.sh";     grep -- '-Xss512k' "$CASSANDRA_CONFIG/cassandra-env.sh";    fi;    ;;  esac;   sed -ri 's/^(JVM_PATCH_VERSION)=.*/\1=25/' "$CASSANDRA_CONFIG/cassandra-env.sh"
ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat
mkdir -p /var/lib/cassandra "$CASSANDRA_CONFIG"  && chown -R cassandra:cassandra /var/lib/cassandra "$CASSANDRA_CONFIG"  && chmod 777 /var/lib/cassandra "$CASSANDRA_CONFIG"
apk add --no-cache bash
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   gcc   make  ;  rm -rf /var/lib/apt/lists/*;   gem install passenger --version "$PASSENGER_VERSION";  passenger-config build-native-support;  if [ -n "$(passenger-config build-native-support 2>&1)" ]; then cat /tmp/passenger_native_support-*.log; false; fi;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  passenger-config install-agent;  passenger-config download-nginx-engine
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -ex;  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   flex  ;  rm -r /var/lib/apt/lists/*;   _fetch() {   local fetch="$1"; shift;   local file="$1"; shift;   for mirror in $GCC_MIRRORS; do    if curl -fL "$mirror/$fetch" -o "$file"; then     return 0;    fi;   done;   echo >&2 "error: failed to download '$fetch' from several mirrors";   return 1;  };   _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%.sig" 'gcc.tar.%%TARBALL-COMPRESSION%%.sig'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%.sig";  _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%" 'gcc.tar.%%TARBALL-COMPRESSION%%'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.%%TARBALL-COMPRESSION%%" 'gcc.tar.%%TARBALL-COMPRESSION%%';  gpg --batch --verify gcc.tar.%%TARBALL-COMPRESSION%%.sig gcc.tar.%%TARBALL-COMPRESSION%%;  mkdir -p /usr/src/gcc;  tar -xf gcc.tar.%%TARBALL-COMPRESSION%% -C /usr/src/gcc --strip-components=1;  rm gcc.tar.%%TARBALL-COMPRESSION%%*;   cd /usr/src/gcc;   ./contrib/download_prerequisites;  { rm *.tar.* || true; };   for f in config.guess config.sub; do   wget -O "$f" "https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb";   find -mindepth 2 -name "$f" -exec cp -v "$f" '{}' ';';  done;   dir="$(mktemp -d)";  cd "$dir";   extraConfigureArgs='';  dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   armel)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv4t --with-float=soft"    ;;   armhf)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb"    ;;     i386)    osVersionID="$(set -e; . /etc/os-release; echo "$VERSION_ID")";    case "$osVersionID" in     8) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i586" ;;     *) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i686" ;;    esac;    ;;  esac;   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  /usr/src/gcc/configure   --build="$gnuArch"   --disable-multilib   --enable-languages=c,c++,fortran,go   $extraConfigureArgs  ;  make -j "$(nproc)";  make install-strip;   cd ..;   rm -rf "$dir" /usr/src/gcc;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -ex;  echo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf;  ldconfig -v
set -ex;  dpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc;  dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++;  dpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran;  update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999
apk add --no-cache   file   gnupg
set -euxo pipefail;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$MANIFEST_TOOL_GPG_KEY";   mkdir -p bin;   for bashbrewArch in $BASHBREW_ARCHES; do   (    goEnv="$(.bashbrew-arch-to-goenv.sh "$bashbrewArch")"; eval "$goEnv";    srcBin="manifest-tool-$GOOS-$GOARCH";    if [ "$GOARCH" = 'arm' ]; then [ -n "$GOARM" ]; srcBin="${srcBin}v$GOARM"; fi;    [ "$GOOS" = 'windows' ] && ext='.exe' || ext=;    srcBin="$srcBin$ext";    targetBin="bin/manifest-tool-$bashbrewArch$ext";    wget -O "$targetBin.asc" "https://github.com/estesp/manifest-tool/releases/download/v${MANIFEST_TOOL_VERSION}/$srcBin.asc";    wget -O "$targetBin" "https://github.com/estesp/manifest-tool/releases/download/v${MANIFEST_TOOL_VERSION}/$srcBin";    gpg --batch --verify "$targetBin.asc" "$targetBin";    ls -lAFh "$targetBin"*;    file "$targetBin"*;   )  done;   gpgconf --kill all;  rm -r "$GNUPGHOME";   ls -lAFh bin/manifest-tool-*;  file bin/manifest-tool-*
set -euxo pipefail;   mkdir -p bin;   for bashbrewArch in $BASHBREW_ARCHES; do   (    goEnv="$(.bashbrew-arch-to-goenv.sh "$bashbrewArch")"; eval "$goEnv";    [ "$GOOS" = 'windows' ] && ext='.exe' || ext=;       targetBin="bin/bashbrew-$bashbrewArch$ext";    go build     -a -v     -ldflags '-s -w'     -tags netgo -installsuffix netgo     -o "$targetBin"     -mod vendor     bashbrew/src/bashbrew    ;    ls -lAFh "$targetBin";    file "$targetBin";   )  done;   ls -lAFh bin/bashbrew-*;  file bin/bashbrew-*
set -ex  && apk add --no-cache --virtual .build-deps   coreutils   freetype-dev   libjpeg-turbo-dev   libpng-dev   libzip-dev   postgresql-dev  && docker-php-ext-configure gd   --with-freetype-dir=/usr/include/   --with-jpeg-dir=/usr/include/   --with-png-dir=/usr/include/  && docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .drupal-phpexts-rundeps $runDeps  && apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   bzip2   unzip   xz-utils     ca-certificates p11-kit     fontconfig libfreetype6  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   java -version
set -ex;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libmagickwand-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
apk add --no-cache   'su-exec>=0.2'   bash   procps
set -eux;   apk add --no-cache --virtual .build-deps   autoconf   ca-certificates   dpkg-dev dpkg   gcc   gnupg   libc-dev   linux-headers   make   ncurses-dev  ;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   mkdir /usr/local/src;   wget --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum -c -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum -c -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --no-cache --virtual .otp-run-deps $runDeps;  apk del --no-network .build-deps;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  addgroup -g 101 -S rabbitmq;  adduser -u 100 -S -h "$RABBITMQ_DATA_DIR" -G rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   apk add --no-cache --virtual .build-deps   ca-certificates   gnupg   xz  ;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apk del .build-deps;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  su-exec rabbitmq rabbitmqctl help;  su-exec rabbitmq rabbitmqctl list_ciphers;  su-exec rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
mkdir -p "$HTTPD_PREFIX"  && chown www-data:www-data "$HTTPD_PREFIX"
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   libapr1-dev   libaprutil1-dev   libaprutil1-ldap  ;  rm -rf /var/lib/apt/lists/*
set -eux;   echo 'deb http://deb.debian.org/debian stretch-backports main' > /etc/apt/sources.list.d/stretch-backports.list;  savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   bzip2   ca-certificates   dirmngr   dpkg-dev   gcc   gnupg   libbrotli-dev   libcurl4-openssl-dev   libjansson-dev   liblua5.2-dev   libnghttp2-dev   libpcre3-dev   libssl-dev   libxml2-dev   make   wget   zlib1g-dev  ;  rm -r /var/lib/apt/lists/*;   ddist() {   local f="$1"; shift;   local distFile="$1"; shift;   local success=;   local distUrl=;   for distUrl in $APACHE_DIST_URLS; do    if wget -O "$f" "$distUrl$distFile" && [ -s "$f" ]; then     success=1;     break;    fi;   done;   [ -n "$success" ];  };   ddist 'httpd.tar.bz2' "httpd/httpd-$HTTPD_VERSION.tar.bz2";  echo "$HTTPD_SHA256 *httpd.tar.bz2" | sha256sum -c -;   ddist 'httpd.tar.bz2.asc' "httpd/httpd-$HTTPD_VERSION.tar.bz2.asc";  export GNUPGHOME="$(mktemp -d)";  for key in   A93D62ECC3C8EA12DB220EC934EA76E6791485A8   B9E8213AEFB861AF35A41F2C995E35221AD84DFF  ; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --verify httpd.tar.bz2.asc httpd.tar.bz2;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME" httpd.tar.bz2.asc;   mkdir -p src;  tar -xf httpd.tar.bz2 -C src --strip-components=1;  rm httpd.tar.bz2;  cd src;   patches() {   while [ "$#" -gt 0 ]; do    local patchFile="$1"; shift;    local patchSha256="$1"; shift;    ddist "$patchFile" "httpd/patches/apply_to_$HTTPD_VERSION/$patchFile";    echo "$patchSha256 *$patchFile" | sha256sum -c -;    patch -p0 < "$patchFile";    rm -f "$patchFile";   done;  };  patches $HTTPD_PATCHES;   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  ./configure   --build="$gnuArch"   --prefix="$HTTPD_PREFIX"   --enable-mods-shared=reallyall   --enable-mpms-shared=all  ;  make -j "$(nproc)";  make install;   cd ..;  rm -r src man manual;   sed -ri   -e 's!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g'   -e 's!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g'   -e 's!^(\s*TransferLog)\s+\S+!\1 /proc/self/fd/1!g'   "$HTTPD_PREFIX/conf/httpd.conf"   "$HTTPD_PREFIX/conf/extra/httpd-ssl.conf"  ;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   httpd -v
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  javac --version'; javac --version;  Write-Host '  java --version'; java --version;   Write-Host 'Complete.'
apk add --no-cache   bash   sed
set -ex;   apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   imagemagick-dev   libjpeg-turbo-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .wordpress-phpexts-rundeps $runDeps;  apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  groupadd -r postgres --gid=999;  useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres;  mkdir -p /var/lib/postgresql;  chown -R postgres:postgres /var/lib/postgresql
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -eux;  if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then   grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;   sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;   ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;  fi;  apt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*;  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
set -eux;  apt-get update;  apt-get install -y --no-install-recommends libnss-wrapper;  rm -rf /var/lib/apt/lists/*
mkdir /docker-entrypoint-initdb.d
set -ex;  key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   export PYTHONDONTWRITEBYTECODE=1;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386|ppc64el)    echo "deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;    apt-get update;    ;;   *)    echo "deb-src http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;       case "$PG_MAJOR" in     9.* | 10 ) ;;     *)      echo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list.d/pgdg.list;      ;;    esac;       tempDir="$(mktemp -d)";    cd "$tempDir";       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get build-dep -y     postgresql-common pgdg-keyring     "postgresql-$PG_MAJOR=$PG_VERSION"    ;    DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"     apt-get source --compile      postgresql-common pgdg-keyring      "postgresql-$PG_MAJOR=$PG_VERSION"    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       ls -lAFh;    dpkg-scanpackages . > Packages;    grep '^Package: ' Packages;    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y postgresql-common;  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf;  apt-get install -y   "postgresql-$PG_MAJOR=$PG_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi;   find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +
set -eux;  dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample";  cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample;  ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/";  sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample;  grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
apt-get update  && apt-get install -y --no-install-recommends   bzip2   ca-certificates   libffi-dev   libgdbm3   libgmp-dev   libssl-dev   libyaml-dev   procps   zlib1g-dev  && rm -rf /var/lib/apt/lists/*
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   autoconf   bison   dpkg-dev   gcc   libbz2-dev   libgdbm-dev   libglib2.0-dev   libncurses-dev   libreadline-dev   libxml2-dev   libxslt-dev   make   ruby   wget   xz-utils  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false   && cd /  && rm -r /usr/src/ruby  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen   tzdata  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
set -e; echo "deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main" > /etc/apt/sources.list.d/mariadb.list;  {   echo 'Package: *';   echo 'Pin: release o=MariaDB';   echo 'Pin-Priority: 999';  } > /etc/apt/preferences.d/mariadb
set -ex;  {   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password password 'unused';   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password_again password 'unused';  } | debconf-set-selections;  apt-get update;  apt-get install -y   "mariadb-server=$MARIADB_VERSION"   mariadb-backup   socat  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
rabbitmq-plugins enable --offline rabbitmq_management
set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  apt-get update; apt-get install -y --no-install-recommends python; rm -rf /var/lib/apt/lists/*;  rabbitmqadmin --version
apk add --no-cache   gmp-dev
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && apk add --no-cache --virtual .ruby-builddeps   autoconf   bison   bzip2   bzip2-dev   ca-certificates   coreutils   dpkg-dev dpkg   gcc   gdbm-dev   glib-dev   libc-dev   libffi-dev   libxml2-dev   libxslt-dev   linux-headers   make   ncurses-dev   openssl   openssl-dev   procps   readline-dev   ruby   tar   xz   yaml-dev   zlib-dev   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch'  && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c -  && patch -p1 -i thread-stack-fix.patch  && rm thread-stack-fix.patch   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-network --virtual .ruby-rundeps $runDeps   bzip2   ca-certificates   libffi-dev   procps   yaml-dev   zlib-dev  && apk del --no-network .ruby-builddeps  && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   curl  ;  rm -rf /var/lib/apt/lists/*
set -eux;   savedAptMark="$(apt-mark showmanual)";  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) tarArch='x86_64'; dirArch='x64'; sha256='bb9e33d95f47e703d9199f0358c038c61259e2ff9f3fd515c919729ace89443c' ;;   armhf) tarArch='armv7l'; dirArch='armv7l'; sha256='2e742f4ddf5ac21779b6943ef210d73dc02f1c6de23836b352336a3dcbb18ae6' ;;   arm64) tarArch='aarch64'; dirArch='aarch64'; sha256='7614d4239702c497330c043f37d99600b41e87caa8b92742c7104915eb54648a' ;;   i386) tarArch='i686'; dirArch='x86'; sha256='89b71a3558aa4f515becfd21d19651035d909f5f2e3177ccaec77aee01f962b7' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding Julia binary release"; exit 1 ;;  esac;   folder="$(echo "$JULIA_VERSION" | cut -d. -f1-2)";  curl -fL -o julia.tar.gz.asc "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc";  curl -fL -o julia.tar.gz     "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz";   echo "${sha256} *julia.tar.gz" | sha256sum -c -;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$JULIA_GPG";  gpg --batch --verify julia.tar.gz.asc julia.tar.gz;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME" julia.tar.gz.asc;   mkdir "$JULIA_PATH";  tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1;  rm julia.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   julia --version
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && buildDeps='   bison   dpkg-dev   libgdbm-dev   ruby  '  && apt-get update  && apt-get install -y --no-install-recommends $buildDeps  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-get purge -y --auto-remove $buildDeps  && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
apk add --no-cache   gmp-dev
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && apk add --no-cache --virtual .ruby-builddeps   autoconf   bison   bzip2   bzip2-dev   ca-certificates   coreutils   dpkg-dev dpkg   gcc   gdbm-dev   glib-dev   libc-dev   libffi-dev   libxml2-dev   libxslt-dev   linux-headers   make   ncurses-dev   openssl   openssl-dev   procps   readline-dev   ruby   tar   xz   yaml-dev   zlib-dev   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch'  && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c -  && patch -p1 -i thread-stack-fix.patch  && rm thread-stack-fix.patch   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-network --virtual .ruby-rundeps $runDeps   bzip2   ca-certificates   libffi-dev   procps   yaml-dev   zlib-dev  && apk del --no-network .ruby-builddeps  && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   coreutils   curl-dev   libedit-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.msi';   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'python.msi',    '/quiet',    '/qn',    'TARGETDIR=C:\Python',    'ALLUSERS=1',    'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.msi -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
pip install --no-cache-dir virtualenv
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo 'deb https://repo.percona.com/apt stretch main' > /etc/apt/sources.list.d/percona.list
set -ex;  {   for key in    percona-server-server/root_password    percona-server-server/root_password_again    "percona-server-server-$PERCONA_MAJOR/root-pass"    "percona-server-server-$PERCONA_MAJOR/re-root-pass"   ; do    echo "percona-server-server-$PERCONA_MAJOR" "$key" password 'unused';   done;  } | debconf-set-selections;  apt-get update;  apt-get install -y   percona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;  apk add --no-cache --virtual .build-deps   bash   gcc   musl-dev   openssl   go  ;  export   GOROOT_BOOTSTRAP="$(go env GOROOT)"   GOOS="$(go env GOOS)"   GOARCH="$(go env GOARCH)"   GOHOSTOS="$(go env GOHOSTOS)"   GOHOSTARCH="$(go env GOHOSTARCH)"  ;  apkArch="$(apk --print-arch)";  case "$apkArch" in   armhf) export GOARM='6' ;;   x86) export GO386='387' ;;  esac;   wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz";  echo '1fff7c33ef2522e6dfaf6ab96ec4c2a8b76d018aae6fc88ce2bd40f2202d0f8c *go.tgz' | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   cd /usr/local/go/src;  ./make.bash;   rm -rf   /usr/local/go/pkg/bootstrap   /usr/local/go/pkg/obj  ;  apk del .build-deps;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libexpat1-dev   libffi-dev   libgdbm-dev   liblzma-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -ex;   if command -v a2enmod; then   a2enmod rewrite;  fi;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libpng-dev   libpq-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  ;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
docker-php-ext-enable sodium
set -ex;   apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   imagemagick-dev   libjpeg-turbo-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .wordpress-phpexts-rundeps $runDeps;  apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
apk add --no-cache   bash   less   mysql-client
set -ex;  mkdir -p /var/www/html;  chown -R www-data:www-data /var/www/html
set -ex;   apk add --no-cache --virtual .fetch-deps   gnupg  ;   curl -o /usr/local/bin/wp.gpg -fSL "https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$WORDPRESS_CLI_GPG_KEY";  gpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME" /usr/local/bin/wp.gpg;   echo "$WORDPRESS_CLI_SHA512 */usr/local/bin/wp" | sha512sum -c -;  chmod +x /usr/local/bin/wp;   apk del .fetch-deps;   wp --allow-root --version
rabbitmq-plugins enable --offline rabbitmq_management
set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  apk add --no-cache python;  rabbitmqadmin --version
apk add --no-cache   git   openssh-client
apt-get update && apt-get install -y --no-install-recommends   tk-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
groupadd -r redis && useradd -r -g redis redis
set -ex;   fetchDeps="   ca-certificates   dirmngr   gnupg   wget  ";  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
set -ex;   buildDeps='   ca-certificates   wget     gcc   libc6-dev   make  ';  apt-get update;  apt-get install -y $buildDeps --no-install-recommends;  rm -rf /var/lib/apt/lists/*;   wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL";  echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -;  mkdir -p /usr/src/redis;  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1;  rm redis.tar.gz;   grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h;  sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;   make -C /usr/src/redis -j "$(nproc)";  make -C /usr/src/redis install;   rm -r /usr/src/redis;   apt-get purge -y --auto-remove $buildDeps
mkdir /data && chown redis:redis /data
groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   libjemalloc1   procps   iproute2  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends    dirmngr    gnupg   ;  fi;  rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   mkdir -p /usr/share/man/man1/;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386)    echo 'deb http://www.apache.org/dist/cassandra/debian 21x main' > /etc/apt/sources.list.d/cassandra.list;    apt-get update;    ;;   *)       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get install -y --no-install-recommends     wget ca-certificates     dpkg-dev    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       tempDir="$(mktemp -d)";    for pkg in cassandra cassandra-tools; do     deb="${pkg}_${CASSANDRA_VERSION}_all.deb";     wget -O "$tempDir/$deb" "https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb";    done;       ls -lAFh "$tempDir";    ( cd "$tempDir" && dpkg-scanpackages . > Packages );    grep '^Package: ' "$tempDir/Packages";    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y   cassandra="$CASSANDRA_VERSION"   cassandra-tools="$CASSANDRA_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   ppc64el)    if grep -q -- '^-Xss' "$CASSANDRA_CONFIG/jvm.options"; then     grep -- '^-Xss256k$' "$CASSANDRA_CONFIG/jvm.options";     sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONFIG/jvm.options";     grep -- '^-Xss512k$' "$CASSANDRA_CONFIG/jvm.options";    elif grep -q -- '-Xss256k' "$CASSANDRA_CONFIG/cassandra-env.sh"; then     sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONFIG/cassandra-env.sh";     grep -- '-Xss512k' "$CASSANDRA_CONFIG/cassandra-env.sh";    fi;    ;;  esac;   sed -ri 's/^(JVM_PATCH_VERSION)=.*/\1=25/' "$CASSANDRA_CONFIG/cassandra-env.sh"
ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat
mkdir -p /var/lib/cassandra "$CASSANDRA_CONFIG"  && chown -R cassandra:cassandra /var/lib/cassandra "$CASSANDRA_CONFIG"  && chmod 777 /var/lib/cassandra "$CASSANDRA_CONFIG"
Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip';   Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256);  if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive -Path git.zip -DestinationPath C:\git\.;   Write-Host 'Removing ...';  Remove-Item git.zip -Force;   Write-Host 'Updating PATH ...';  $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  git --version'; git --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '38018a1a0fa341687cee2f71c0e7578f852bbf017ad48907cda6cc28d1b84140';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
$newPath = ('{0}\docker;{1}' -f $env:ProgramFiles, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://download.docker.com/win/static/{0}/x86_64/docker-{1}.zip' -f $env:DOCKER_CHANNEL, $env:DOCKER_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'docker.zip';   Write-Host 'Expanding ...';  Expand-Archive docker.zip -DestinationPath $env:ProgramFiles;   Write-Host 'Removing ...';  Remove-Item @(    'docker.zip',    ('{0}\docker\dockerd.exe' -f $env:ProgramFiles)   ) -Force;   Write-Host 'Verifying install ("docker --version") ...';  docker --version;   Write-Host 'Complete.';
rabbitmq-plugins enable --offline rabbitmq_management
set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  apk add --no-cache python;  rabbitmqadmin --version
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
apk add --no-cache   bash   sed
set -ex;   apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   imagemagick-dev   libjpeg-turbo-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .wordpress-phpexts-rundeps $runDeps;  apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
apk add --no-cache 'su-exec>=0.2'
apk add --no-cache   bash
set -eux;  npm install -g "ghost-cli@$GHOST_CLI_VERSION";  npm cache clean --force
set -eux;  mkdir -p "$GHOST_INSTALL";  chown node:node "$GHOST_INSTALL";   su-exec node ghost install "$GHOST_VERSION" --db sqlite3 --no-prompt --no-stack --no-setup --dir "$GHOST_INSTALL";   cd "$GHOST_INSTALL";  su-exec node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath "$GHOST_CONTENT/data/ghost.db";  su-exec node ghost config paths.contentPath "$GHOST_CONTENT";   su-exec node ln -s config.production.json "$GHOST_INSTALL/config.development.json";  readlink -f "$GHOST_INSTALL/config.development.json";   mv "$GHOST_CONTENT" "$GHOST_INSTALL/content.orig";  mkdir -p "$GHOST_CONTENT";  chown node:node "$GHOST_CONTENT";   "$GHOST_INSTALL/current/node_modules/knex-migrator/bin/knex-migrator" --version;   cd "$GHOST_INSTALL/current";  sqlite3Version="$(npm view . optionalDependencies.sqlite3)";  if ! su-exec node yarn add "sqlite3@$sqlite3Version" --force; then   apk add --no-cache --virtual .build-deps python make gcc g++ libc-dev;     su-exec node yarn add "sqlite3@$sqlite3Version" --force --build-from-source;     apk del --no-network .build-deps;  fi;   su-exec node yarn cache clean;  su-exec node npm cache clean --force;  npm cache clean --force;  rm -rv /tmp/yarn* /tmp/v8*
apt-get update && apt-get install -y --no-install-recommends   libssl-dev   tk-dev   uuid-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libdb-dev   libgdbm-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip';   Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256);  if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive -Path git.zip -DestinationPath C:\git\.;   Write-Host 'Removing ...';  Remove-Item git.zip -Force;   Write-Host 'Updating PATH ...';  $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  git --version'; git --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '38018a1a0fa341687cee2f71c0e7578f852bbf017ad48907cda6cc28d1b84140';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4   --with-system-expat   --with-system-ffi  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   tcl   tk  && rm -rf /var/lib/apt/lists/*
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) pypyArch='linux64'; sha256='8014f63b1a34b155548852c7bf73aab2d41ebddf2c8fb603dc9dd8509be93db0' ;;   i386) pypyArch='linux32'; sha256='cb11ef4b0df569c28390b1ee93029159e1b90bfbad98df6abd629d5203b2abd9' ;;   s390x) pypyArch='s390x'; sha256='4a91bf2d9a142b6dbf82b5301cb510535ae9a54e1645546b2e0735a7b5ed85ba' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;;  esac;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/pypy3.6-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   pypy3 --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   cd /usr/local/lib_pypy;   pypy3 _ssl_build.py;  fi
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   pypy3 get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...';  $tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2';  if (Test-Path $tls12RegBase) { throw ('"{0}" already exists!' -f $tls12RegBase) };  New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force;  New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
Write-Host ('Downloading {0} ...' -f $env:JAVA_URL);  Invoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip';  Write-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256);  if ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Verifying install ...';  Write-Host '  java --version'; java --version;  Write-Host '  javac --version'; javac --version;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Complete.'
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  groupadd -r postgres --gid=999;  useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres;  mkdir -p /var/lib/postgresql;  chown -R postgres:postgres /var/lib/postgresql
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -eux;  if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then   grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;   sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;   ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;  fi;  apt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*;  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
set -eux;  apt-get update;  apt-get install -y --no-install-recommends libnss-wrapper;  rm -rf /var/lib/apt/lists/*
mkdir /docker-entrypoint-initdb.d
set -ex;  key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   export PYTHONDONTWRITEBYTECODE=1;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386|ppc64el)    echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;    apt-get update;    ;;   *)    echo "deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;       case "$PG_MAJOR" in     9.* | 10 ) ;;     *)      echo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list;      ;;    esac;       tempDir="$(mktemp -d)";    cd "$tempDir";       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get build-dep -y     postgresql-common pgdg-keyring     "postgresql-$PG_MAJOR=$PG_VERSION"    ;    DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"     apt-get source --compile      postgresql-common pgdg-keyring      "postgresql-$PG_MAJOR=$PG_VERSION"    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       ls -lAFh;    dpkg-scanpackages . > Packages;    grep '^Package: ' Packages;    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y postgresql-common;  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf;  apt-get install -y   "postgresql-$PG_MAJOR=$PG_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi;   find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +
set -eux;  dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample";  cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample;  ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/";  sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample;  grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -ex;  postgresHome="$(getent passwd postgres)";  postgresHome="$(echo "$postgresHome" | cut -d: -f6)";  [ "$postgresHome" = '/var/lib/postgresql' ];  mkdir -p "$postgresHome";  chown -R postgres:postgres "$postgresHome"
mkdir /docker-entrypoint-initdb.d
set -ex   && apk add --no-cache --virtual .fetch-deps   ca-certificates   openssl   tar   && wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -  && mkdir -p /usr/src/postgresql  && tar   --extract   --file postgresql.tar.bz2   --directory /usr/src/postgresql   --strip-components 1  && rm postgresql.tar.bz2   && apk add --no-cache --virtual .build-deps   bison   coreutils   dpkg-dev dpkg   flex   gcc   libc-dev   libedit-dev   libxml2-dev   libxslt-dev   linux-headers   make   openssl-dev   perl-utils   perl-ipc-run   util-linux-dev   zlib-dev   && cd /usr/src/postgresql  && awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new  && grep '/var/run/postgresql' src/include/pg_config_manual.h.new  && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'  && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'  && ./configure   --build="$gnuArch"   --enable-integer-datetimes   --enable-thread-safety   --enable-tap-tests   --disable-rpath   --with-uuid=e2fs   --with-gnu-ld   --with-pgport=5432   --with-system-tzdata=/usr/share/zoneinfo   --prefix=/usr/local   --with-includes=/usr/local/include   --with-libraries=/usr/local/lib     --with-openssl   --with-libxml   --with-libxslt  && make -j "$(nproc)" world  && make install-world  && make -C contrib install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache --virtual .postgresql-rundeps   $runDeps   bash   su-exec   tzdata  && apk del .fetch-deps .build-deps  && cd /  && rm -rf   /usr/src/postgresql   /usr/local/share/doc   /usr/local/share/man  && find /usr/local -name '*.a' -delete
sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   gcc   libc-dev   linux-headers   lua5.3-dev   make   openssl   openssl-dev   pcre2-dev   readline-dev   tar   zlib-dev   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(getconf _NPROCESSORS_ONLN)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .haproxy-rundeps $runDeps  && apk del .build-deps
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;   %%ARCH-CASE%%;   if ! wget -O docker.tgz "https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz"; then   echo >&2 "error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'";   exit 1;  fi;   tar --extract   --file docker.tgz   --strip-components 1   --directory /usr/local/bin/  ;  rm docker.tgz;   dockerd --version;  docker --version
set -ex;  postgresHome="$(getent passwd postgres)";  postgresHome="$(echo "$postgresHome" | cut -d: -f6)";  [ "$postgresHome" = '/var/lib/postgresql' ];  mkdir -p "$postgresHome";  chown -R postgres:postgres "$postgresHome"
mkdir /docker-entrypoint-initdb.d
set -ex   && apk add --no-cache --virtual .fetch-deps   ca-certificates   openssl   tar   && wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -  && mkdir -p /usr/src/postgresql  && tar   --extract   --file postgresql.tar.bz2   --directory /usr/src/postgresql   --strip-components 1  && rm postgresql.tar.bz2   && apk add --no-cache --virtual .build-deps   bison   coreutils   dpkg-dev dpkg   flex   gcc   libc-dev   libedit-dev   libxml2-dev   libxslt-dev   linux-headers   make   openssl-dev   perl-utils   perl-ipc-run   util-linux-dev   zlib-dev   icu-dev   && cd /usr/src/postgresql  && awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new  && grep '/var/run/postgresql' src/include/pg_config_manual.h.new  && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'  && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'  && ./configure   --build="$gnuArch"   --enable-integer-datetimes   --enable-thread-safety   --enable-tap-tests   --disable-rpath   --with-uuid=e2fs   --with-gnu-ld   --with-pgport=5432   --with-system-tzdata=/usr/share/zoneinfo   --prefix=/usr/local   --with-includes=/usr/local/include   --with-libraries=/usr/local/lib     --with-openssl   --with-libxml   --with-libxslt   --with-icu  && make -j "$(nproc)" world  && make install-world  && make -C contrib install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache --virtual .postgresql-rundeps   $runDeps   bash   su-exec   tzdata  && apk del .fetch-deps .build-deps  && cd /  && rm -rf   /usr/src/postgresql   /usr/local/share/doc   /usr/local/share/man  && find /usr/local -name '*.a' -delete
sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
groupadd -r redmine && useradd -r -g redmine redmine
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   wget     bzr   git   mercurial   openssh-client   subversion     gsfonts   imagemagick  ;  rm -rf /var/lib/apt/lists/*
set -eux;  savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dirmngr   gnupg  ;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";   export GOSU_VERSION='1.11';  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu nobody true;   export TINI_VERSION='0.18.0';  wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch";  wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5;  gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/tini.asc;  chmod +x /usr/local/bin/tini;  tini -h;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  [ ! -d "$HOME" ];  mkdir -p "$HOME";  chown redmine:redmine "$HOME";  chmod 1777 "$HOME"
wget -O redmine.tar.gz "https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz"  && echo "$REDMINE_DOWNLOAD_MD5 redmine.tar.gz" | md5sum -c -  && tar -xvf redmine.tar.gz --strip-components=1  && rm redmine.tar.gz files/delete.me log/delete.me  && mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids  && chown -R redmine:redmine ./  && echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb  && chmod -R ugo=rwX config db sqlite  && find log tmp -type d -exec chmod 1777 '{}' +
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libmagickcore-dev   libmagickwand-dev   libmariadbclient-dev   libpq-dev   libsqlite3-dev   make   patch     libssl1.0-dev  ;  rm -rf /var/lib/apt/lists/*;   wget -O freetds.tar.bz2 'http://www.freetds.org/files/stable/freetds-1.00.91.tar.bz2';  echo '8d71f9f29be0fe0637e443dd3807b3fd *freetds.tar.bz2' | md5sum -c -;  mkdir freetds;  tar -xf freetds.tar.bz2 -C freetds --strip-components=1;  rm freetds.tar.bz2;  ( cd freetds && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && ./configure --build="$gnuArch" --enable-silent-rules && make -j "$(nproc)" && make -C src install && make -C include install );  rm -rf freetds;  gosu redmine bundle config build.tiny_tds --enable-system-freetds;   gosu redmine bundle install --without development test;  for adapter in mysql2 postgresql sqlserver sqlite3; do   echo "$RAILS_ENV:" > ./config/database.yml;   echo "  adapter: $adapter" >> ./config/database.yml;   gosu redmine bundle install --without development test;   cp Gemfile.lock "Gemfile.lock.${adapter}";  done;  rm ./config/database.yml;  chmod -R ugo=rwX Gemfile.lock "$GEM_HOME";  rm -rf ~redmine/.bundle;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | grep -v '^/usr/local/'   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
mkdir -p /usr/src/app
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  java -version'; java -version;   Write-Host 'Complete.'
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen   tzdata  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mariadb.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
set -e; echo "deb http://ftp.osuosl.org/pub/mariadb/repo/$MARIADB_MAJOR/ubuntu bionic main" > /etc/apt/sources.list.d/mariadb.list;  {   echo 'Package: *';   echo 'Pin: release o=MariaDB';   echo 'Pin-Priority: 999';  } > /etc/apt/preferences.d/mariadb
set -ex;  {   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password password 'unused';   echo "mariadb-server-$MARIADB_MAJOR" mysql-server/root_password_again password 'unused';  } | debconf-set-selections;  apt-get update;  apt-get install -y   "mariadb-server=$MARIADB_VERSION"   mariadb-backup-10.2   socat  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
set -ex;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libmagickwand-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
a2enmod rewrite expires
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libexpat1-dev   libffi-dev   libgdbm-dev   liblzma-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   build-essential   pkg-config   git   python  && rm -rf /var/lib/apt/lists/*
gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D
curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"  && curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"  && gpg --verify SHASUMS256.txt.asc  && grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c -  && tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1  && rm "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc  && npm install -g npm@"$NPM_VERSION"  && npm cache clear
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
set -ex;   apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   imagemagick-dev   libjpeg-turbo-dev   libpng-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .wordpress-phpexts-rundeps $runDeps;  apk del .build-deps
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
apk add --no-cache   bash   less   mysql-client
set -ex;  mkdir -p /var/www/html;  chown -R www-data:www-data /var/www/html
set -ex;   apk add --no-cache --virtual .fetch-deps   gnupg  ;   curl -o /usr/local/bin/wp.gpg -fSL "https://github.com/wp-cli/wp-cli/releases/download/v${WORDPRESS_CLI_VERSION}/wp-cli-${WORDPRESS_CLI_VERSION}.phar.gpg";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$WORDPRESS_CLI_GPG_KEY";  gpg --batch --decrypt --output /usr/local/bin/wp /usr/local/bin/wp.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME" /usr/local/bin/wp.gpg;   echo "$WORDPRESS_CLI_SHA512 */usr/local/bin/wp" | sha512sum -c -;  chmod +x /usr/local/bin/wp;   apk del .fetch-deps;   wp --allow-root --version
apk add --no-cache   gmp-dev
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && apk add --no-cache --virtual .ruby-builddeps   autoconf   bison   bzip2   bzip2-dev   ca-certificates   coreutils   dpkg-dev dpkg   gcc   gdbm-dev   glib-dev   libc-dev   libffi-dev   libxml2-dev   libxslt-dev   linux-headers   make   ncurses-dev   openssl   openssl-dev   procps   readline-dev   ruby   tar   xz   yaml-dev   zlib-dev   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch'  && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c -  && patch -p1 -i thread-stack-fix.patch  && rm thread-stack-fix.patch   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-network --virtual .ruby-rundeps $runDeps   bzip2   ca-certificates   libffi-dev   procps   yaml-dev   zlib-dev  && apk del --no-network .ruby-builddeps  && cd /  && rm -r /usr/src/ruby  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   util-linux-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.msi';   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'python.msi',    '/quiet',    '/qn',    'TARGETDIR=C:\Python',    'ALLUSERS=1',    'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.msi -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
pip install --no-cache-dir virtualenv
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libexpat1-dev   libffi-dev   libgdbm-dev   liblzma-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   tk-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
pip install --no-cache-dir virtualenv
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   libressl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-shared   --enable-unicode=ucs4   --with-system-expat   --with-system-ffi  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python2 --version
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -ex;  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   flex  ;  rm -r /var/lib/apt/lists/*;   _fetch() {   local fetch="$1"; shift;   local file="$1"; shift;   for mirror in $GCC_MIRRORS; do    if curl -fL "$mirror/$fetch" -o "$file"; then     return 0;    fi;   done;   echo >&2 "error: failed to download '$fetch' from several mirrors";   return 1;  };   _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig" 'gcc.tar.xz.sig'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig";  _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz';  gpg --batch --verify gcc.tar.xz.sig gcc.tar.xz;  mkdir -p /usr/src/gcc;  tar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1;  rm gcc.tar.xz*;   cd /usr/src/gcc;   ./contrib/download_prerequisites;  { rm *.tar.* || true; };   for f in config.guess config.sub; do   wget -O "$f" "https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb";   find -mindepth 2 -name "$f" -exec cp -v "$f" '{}' ';';  done;   dir="$(mktemp -d)";  cd "$dir";   extraConfigureArgs='';  dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   armel)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv4t --with-float=soft"    ;;   armhf)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb"    ;;     i386)    osVersionID="$(set -e; . /etc/os-release; echo "$VERSION_ID")";    case "$osVersionID" in     8) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i586" ;;     *) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i686" ;;    esac;    ;;  esac;   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  /usr/src/gcc/configure   --build="$gnuArch"   --disable-multilib   --enable-languages=c,c++,fortran,go   $extraConfigureArgs  ;  make -j "$(nproc)";  make install-strip;   cd ..;   rm -rf "$dir" /usr/src/gcc;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -ex;  echo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf;  ldconfig -v
set -ex;  dpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc;  dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++;  dpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran;  update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  javac -version'; javac -version;  Write-Host '  java -version'; java -version;   Write-Host 'Complete.'
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   wget  ;  rm -rf /var/lib/apt/lists/*
cpanm App::cpanminus
set -eux;  savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   gcc   libc-dev   libssl-dev   zlib1g-dev  ;  rm -rf /var/lib/apt/lists/*;  cpanm   EV   IO::Socket::IP   IO::Socket::Socks   Net::DNS::Native  ;  cpanm --notest IO::Socket::SSL;  apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark > /dev/null;  apt-get purge -y --auto-remove
cpanm Mojolicious@8.15
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   gcc   libc-dev   linux-headers   lua5.3-dev   make   openssl   openssl-dev   pcre2-dev   readline-dev   tar   zlib-dev   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux-glibc   USE_LUA=1 LUA_INC=/usr/include/lua5.3 LUA_LIB=/usr/lib/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(getconf _NPROCESSORS_ONLN)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .haproxy-rundeps $runDeps  && apk del .build-deps
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libexpat1-dev   libffi-dev   libgdbm-dev   liblzma-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   uuid-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
mkdir -p /usr/src/app
apt-get update && apt-get install -y   gcc   gettext   mysql-client libmysqlclient-dev   postgresql-client libpq-dev   sqlite3  --no-install-recommends && rm -rf /var/lib/apt/lists/*
Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...';  $tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2';  if (Test-Path $tls12RegBase) { throw ('"{0}" already exists!' -f $tls12RegBase) };  New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force;  New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
Write-Host ('Downloading {0} ...' -f $env:JAVA_URL);  Invoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip';  Write-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256);  if ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Verifying install ...';  Write-Host '  java --version'; java --version;  Write-Host '  javac --version'; javac --version;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Complete.'
set -ex;   if command -v a2enmod; then   a2enmod rewrite;  fi;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libpng-dev   libpq-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  ;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libexpat1-dev   libffi-dev   libgdbm-dev   liblzma-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  groupadd -r postgres --gid=999;  useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres;  mkdir -p /var/lib/postgresql;  chown -R postgres:postgres /var/lib/postgresql
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -eux;  if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then   grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;   sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;   ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;  fi;  apt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*;  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
set -eux;  apt-get update;  apt-get install -y --no-install-recommends libnss-wrapper;  rm -rf /var/lib/apt/lists/*
mkdir /docker-entrypoint-initdb.d
set -ex;  key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   export PYTHONDONTWRITEBYTECODE=1;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386|ppc64el)    echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;    apt-get update;    ;;   *)    echo "deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;       case "$PG_MAJOR" in     9.* | 10 ) ;;     *)      echo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list;      ;;    esac;       tempDir="$(mktemp -d)";    cd "$tempDir";       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get build-dep -y     postgresql-common pgdg-keyring     "postgresql-$PG_MAJOR=$PG_VERSION"    ;    DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"     apt-get source --compile      postgresql-common pgdg-keyring      "postgresql-$PG_MAJOR=$PG_VERSION"    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       ls -lAFh;    dpkg-scanpackages . > Packages;    grep '^Package: ' Packages;    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y postgresql-common;  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf;  apt-get install -y   "postgresql-$PG_MAJOR=$PG_VERSION"   "postgresql-contrib-$PG_MAJOR=$PG_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi;   find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +
set -eux;  dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample";  cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample;  ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/";  sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample;  grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
groupadd -r redis && useradd -r -g redis redis
set -ex;   fetchDeps="   ca-certificates   dirmngr   gnupg   wget  ";  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
apt-get update && apt-get install -y --no-install-recommends   libc6-i386  && rm -rf /var/lib/apt/lists/*
set -ex;   buildDeps='   ca-certificates   wget     gcc   gcc-multilib   libc6-dev-i386   make  ';  apt-get update;  apt-get install -y $buildDeps --no-install-recommends;  rm -rf /var/lib/apt/lists/*;   wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL";  echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -;  mkdir -p /usr/src/redis;  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1;  rm redis.tar.gz;   grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h;  sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;   make -C /usr/src/redis -j "$(nproc)" 32bit;  make -C /usr/src/redis install;   rm -r /usr/src/redis;   apt-get purge -y --auto-remove $buildDeps
mkdir /data && chown redis:redis /data
set -ex;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libmagickwand-dev   libpng-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install   bcmath   exif   gd   mysqli   opcache   zip  ;  pecl install imagick-3.4.4;  docker-php-ext-enable imagick;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=2';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
{   echo 'error_reporting = 4339';   echo 'display_errors = Off';   echo 'display_startup_errors = Off';   echo 'log_errors = On';   echo 'error_log = /dev/stderr';   echo 'log_errors_max_len = 1024';   echo 'ignore_repeated_errors = On';   echo 'ignore_repeated_source = Off';   echo 'html_errors = Off';  } > /usr/local/etc/php/conf.d/error-logging.ini
set -ex;  curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz";  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -;  tar -xzf wordpress.tar.gz -C /usr/src/;  rm wordpress.tar.gz;  chown -R www-data:www-data /usr/src/wordpress
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   ca-certificates   gcc   libc6-dev   liblua5.3-dev   libpcre2-dev   libssl1.0-dev   make   wget   zlib1g-dev  && rm -rf /var/lib/apt/lists/*   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(nproc)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && apt-mark auto '.*' > /dev/null  && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -ex;  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dpkg-dev   flex  ;  rm -r /var/lib/apt/lists/*;   _fetch() {   local fetch="$1"; shift;   local file="$1"; shift;   for mirror in $GCC_MIRRORS; do    if curl -fL "$mirror/$fetch" -o "$file"; then     return 0;    fi;   done;   echo >&2 "error: failed to download '$fetch' from several mirrors";   return 1;  };   _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig" 'gcc.tar.xz.sig'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz.sig";  _fetch "gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz'   || _fetch "$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" 'gcc.tar.xz';  gpg --batch --verify gcc.tar.xz.sig gcc.tar.xz;  mkdir -p /usr/src/gcc;  tar -xf gcc.tar.xz -C /usr/src/gcc --strip-components=1;  rm gcc.tar.xz*;   cd /usr/src/gcc;   ./contrib/download_prerequisites;  { rm *.tar.* || true; };   for f in config.guess config.sub; do   wget -O "$f" "https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb";   find -mindepth 2 -name "$f" -exec cp -v "$f" '{}' ';';  done;   dir="$(mktemp -d)";  cd "$dir";   extraConfigureArgs='';  dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   armel)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv4t --with-float=soft"    ;;   armhf)    extraConfigureArgs="$extraConfigureArgs --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-mode=thumb"    ;;     i386)    osVersionID="$(set -e; . /etc/os-release; echo "$VERSION_ID")";    case "$osVersionID" in     8) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i586" ;;     *) extraConfigureArgs="$extraConfigureArgs --with-arch-32=i686" ;;    esac;    ;;  esac;   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  /usr/src/gcc/configure   --build="$gnuArch"   --disable-multilib   --enable-languages=c,c++,fortran,go   $extraConfigureArgs  ;  make -j "$(nproc)";  make install-strip;   cd ..;   rm -rf "$dir" /usr/src/gcc;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -ex;  echo '/usr/local/lib64' > /etc/ld.so.conf.d/local-lib64.conf;  ldconfig -v
set -ex;  dpkg-divert --divert /usr/bin/gcc.orig --rename /usr/bin/gcc;  dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++;  dpkg-divert --divert /usr/bin/gfortran.orig --rename /usr/bin/gfortran;  update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates p11-kit  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dirmngr   gnupg   wget  ;  rm -rf /var/lib/apt/lists/*;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   javac --version;  java --version
set -x  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf && gpgconf --kill all || :; }  && rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true
set -eux;  npm install -g "ghost-cli@$GHOST_CLI_VERSION";  npm cache clean --force
set -eux;  mkdir -p "$GHOST_INSTALL";  chown node:node "$GHOST_INSTALL";   gosu node ghost install "$GHOST_VERSION" --db sqlite3 --no-prompt --no-stack --no-setup --dir "$GHOST_INSTALL";   cd "$GHOST_INSTALL";  gosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath "$GHOST_CONTENT/data/ghost.db";  gosu node ghost config paths.contentPath "$GHOST_CONTENT";   gosu node ln -s config.production.json "$GHOST_INSTALL/config.development.json";  readlink -f "$GHOST_INSTALL/config.development.json";   mv "$GHOST_CONTENT" "$GHOST_INSTALL/content.orig";  mkdir -p "$GHOST_CONTENT";  chown node:node "$GHOST_CONTENT";   "$GHOST_INSTALL/current/node_modules/knex-migrator/bin/knex-migrator" --version;   cd "$GHOST_INSTALL/current";  sqlite3Version="$(npm view . optionalDependencies.sqlite3)";  if ! gosu node yarn add "sqlite3@$sqlite3Version" --force; then   savedAptMark="$(apt-mark showmanual)";   apt-get update;   apt-get install -y --no-install-recommends python make gcc g++ libc-dev;   rm -rf /var/lib/apt/lists/*;     gosu node yarn add "sqlite3@$sqlite3Version" --force --build-from-source;     apt-mark showmanual | xargs apt-mark auto > /dev/null;   [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;   apt-get purge -y --auto-remove;  fi;   gosu node yarn cache clean;  gosu node npm cache clean --force;  npm cache clean --force;  rm -rv /tmp/yarn* /tmp/v8*
set -ex;   if command -v a2enmod; then   a2enmod rewrite;  fi;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libpng-dev   libpq-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  ;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
addgroup -S redis && adduser -S -G redis redis
apk add --no-cache   'su-exec>=0.2'   tzdata
set -ex;   apk add --no-cache --virtual .build-deps   coreutils   gcc   linux-headers   make   musl-dev  ;   wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL";  echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -;  mkdir -p /usr/src/redis;  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1;  rm redis.tar.gz;   grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h;  sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;   make -C /usr/src/redis -j "$(nproc)";  make -C /usr/src/redis install;   rm -r /usr/src/redis;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --virtual .redis-rundeps $runDeps;  apk del .build-deps;   redis-server --version
mkdir /data && chown redis:redis /data
groupadd -r redis && useradd -r -g redis redis
set -ex;   fetchDeps="   ca-certificates   dirmngr   gnupg   wget  ";  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  gpgconf --kill all;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
set -ex;   buildDeps='   wget     gcc   libc6-dev   make  ';  apt-get update;  apt-get install -y $buildDeps --no-install-recommends;  rm -rf /var/lib/apt/lists/*;   wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL";  echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -;  mkdir -p /usr/src/redis;  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1;  rm redis.tar.gz;   grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h;  sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h;  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h;   make -C /usr/src/redis -j "$(nproc)";  make -C /usr/src/redis install;   rm -r /usr/src/redis;   apt-get purge -y --auto-remove $buildDeps
mkdir /data && chown redis:redis /data
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   ca-certificates   gcc   libc6-dev   liblua5.3-dev   libpcre2-dev   libssl-dev   make   wget   zlib1g-dev  && rm -rf /var/lib/apt/lists/*   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux-glibc   USE_LUA=1 LUA_INC=/usr/include/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(nproc)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && apt-mark auto '.*' > /dev/null  && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
rabbitmq-plugins enable --offline rabbitmq_management
set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  apk add --no-cache python;  rabbitmqadmin --version
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   build-essential   pkg-config   git   python  && rm -rf /var/lib/apt/lists/*
gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D
curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"  && curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"  && gpg --verify SHASUMS256.txt.asc  && grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c -  && tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1  && rm "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc  && npm install -g npm@1.4.28  && npm install -g npm@"$NPM_VERSION"  && npm cache clear
groupadd -r mongodb && useradd -r -g mongodb mongodb
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   jq   numactl  ;  if ! command -v ps > /dev/null; then   apt-get install -y --no-install-recommends procps;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   apt-get update;  apt-get install -y --no-install-recommends   wget  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends gnupg dirmngr;  fi;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu --version;  gosu nobody true;   wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";   apt-get purge -y --auto-remove wget
mkdir /docker-entrypoint-initdb.d
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo "deb http://$MONGO_REPO/apt/ubuntu bionic/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
set -x  && apt-get update  && apt-get install -y   ${MONGO_PACKAGE}=$MONGO_VERSION   ${MONGO_PACKAGE}-server=$MONGO_VERSION   ${MONGO_PACKAGE}-shell=$MONGO_VERSION   ${MONGO_PACKAGE}-mongos=$MONGO_VERSION   ${MONGO_PACKAGE}-tools=$MONGO_VERSION  && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf /etc/mongod.conf.orig
mkdir -p /data/db /data/configdb  && chown -R mongodb:mongodb /data/db /data/configdb
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   netbase   wget  && rm -rf /var/lib/apt/lists/*
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...';  $tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2';  if (Test-Path $tls12RegBase) { throw ('"{0}" already exists!' -f $tls12RegBase) };  New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force;  New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
Write-Host ('Downloading {0} ...' -f $env:JAVA_URL);  Invoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip';  Write-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256);  if ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Verifying install ...';  Write-Host '  java --version'; java --version;  Write-Host '  javac --version'; javac --version;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Complete.'
apt-get update && apt-get install -y --no-install-recommends   tk-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apk add --no-cache   git   openssh-client
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   coreutils   curl-dev   libedit-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';   echo 'decorate_workers_output = no';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.msi';   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'python.msi',    '/quiet',    '/qn',    'TARGETDIR=C:\Python',    'ALLUSERS=1',    'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.msi -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
pip install --no-cache-dir virtualenv
apt-get update  && apt-get install -y --no-install-recommends   bzip2   ca-certificates   libffi-dev   libgdbm3   libgmp-dev   libssl-dev   libyaml-dev   procps   zlib1g-dev  && rm -rf /var/lib/apt/lists/*
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   autoconf   bison   dpkg-dev   gcc   libbz2-dev   libgdbm-dev   libglib2.0-dev   libncurses-dev   libreadline-dev   libxml2-dev   libxslt-dev   make   ruby   wget   xz-utils  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false   && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -ex;   if command -v a2enmod; then   a2enmod rewrite;  fi;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libpng-dev   libpq-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  ;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
groupadd user && useradd --create-home --home-dir /home/user -g user user
pip install redis
pip install celery=="$CELERY_VERSION"
{  echo 'import os';  echo "BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'amqp://')"; } > celeryconfig.py
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   curl   build-essential   pkg-config   git   python  && rm -rf /var/lib/apt/lists/*
gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D
curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"  && curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"  && gpg --verify SHASUMS256.txt.asc  && grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c -  && tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1  && rm "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc  && npm install -g npm@"$NPM_VERSION"  && npm cache clear
set -eux;  yum install -y   gzip   tar     freetype fontconfig  ;  rm -rf /var/cache/yum
set -eux;   curl -fL -o /openjdk.tgz "$JAVA_URL";  echo "$JAVA_SHA256 */openjdk.tgz" | sha256sum -c -;  mkdir -p "$JAVA_HOME";  tar --extract --file /openjdk.tgz --directory "$JAVA_HOME" --strip-components 1;  rm /openjdk.tgz;   ln -sfT "$JAVA_HOME" /usr/java/default;  ln -sfT "$JAVA_HOME" /usr/java/latest;  for bin in "$JAVA_HOME/bin/"*; do   base="$(basename "$bin")";   [ ! -e "/usr/bin/$base" ];   alternatives --install "/usr/bin/$base" "$base" "$bin" 20000;  done;   java -Xshare:dump;   java --version;  javac --version
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
mkdir -p /usr/src/app
set -ex;  postgresHome="$(getent passwd postgres)";  postgresHome="$(echo "$postgresHome" | cut -d: -f6)";  [ "$postgresHome" = '/var/lib/postgresql' ];  mkdir -p "$postgresHome";  chown -R postgres:postgres "$postgresHome"
mkdir /docker-entrypoint-initdb.d
set -ex   && apk add --no-cache --virtual .fetch-deps   ca-certificates   openssl   tar   && wget -O postgresql.tar.bz2 "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2"  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c -  && mkdir -p /usr/src/postgresql  && tar   --extract   --file postgresql.tar.bz2   --directory /usr/src/postgresql   --strip-components 1  && rm postgresql.tar.bz2   && apk add --no-cache --virtual .build-deps   bison   coreutils   dpkg-dev dpkg   flex   gcc   libc-dev   libedit-dev   libxml2-dev   libxslt-dev   linux-headers   make   openssl-dev   perl-utils   perl-ipc-run   util-linux-dev   zlib-dev   icu-dev   && cd /usr/src/postgresql  && awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new  && grep '/var/run/postgresql' src/include/pg_config_manual.h.new  && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'  && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'  && ./configure   --build="$gnuArch"   --enable-integer-datetimes   --enable-thread-safety   --enable-tap-tests   --disable-rpath   --with-uuid=e2fs   --with-gnu-ld   --with-pgport=5432   --with-system-tzdata=/usr/share/zoneinfo   --prefix=/usr/local   --with-includes=/usr/local/include   --with-libraries=/usr/local/lib     --with-openssl   --with-libxml   --with-libxslt   --with-icu  && make -j "$(nproc)" world  && make install-world  && make -C contrib install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache --virtual .postgresql-rundeps   $runDeps   bash   su-exec   tzdata  && apk del .fetch-deps .build-deps  && cd /  && rm -rf   /usr/src/postgresql   /usr/local/share/doc   /usr/local/share/man  && find /usr/local -name '*.a' -delete
sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/local/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
groupadd -r mongodb && useradd -r -g mongodb mongodb
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   jq   numactl  ;  if ! command -v ps > /dev/null; then   apt-get install -y --no-install-recommends procps;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   apt-get update;  apt-get install -y --no-install-recommends   wget  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends gnupg dirmngr;  fi;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu --version;  gosu nobody true;   wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";   apt-get purge -y --auto-remove wget
mkdir /docker-entrypoint-initdb.d
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo "deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
set -x  && apt-get update  && apt-get install -y   ${MONGO_PACKAGE}=$MONGO_VERSION   ${MONGO_PACKAGE}-server=$MONGO_VERSION   ${MONGO_PACKAGE}-shell=$MONGO_VERSION   ${MONGO_PACKAGE}-mongos=$MONGO_VERSION   ${MONGO_PACKAGE}-tools=$MONGO_VERSION  && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf /etc/mongod.conf.orig
mkdir -p /data/db /data/configdb  && chown -R mongodb:mongodb /data/db /data/configdb
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat (3.4)
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
apt-get update && apt-get install -y --no-install-recommends   tk-dev   uuid-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
$url = ('https://julialang-s3.julialang.org/bin/winnt/x64/{1}/julia-{0}-win64.exe' -f $env:JULIA_VERSION, ($env:JULIA_VERSION.Split('.')[0..1] -Join '.'));         Write-Host ('Downloading {0} ...' -f $url);         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;         Invoke-WebRequest -Uri $url -OutFile 'julia.exe';                 Write-Host ('Verifying sha256 ({0}) ...' -f $env:JULIA_SHA256);         if ((Get-FileHash julia.exe -Algorithm sha256).Hash -ne $env:JULIA_SHA256) {                 Write-Host 'FAILED!';                 exit 1;         };                 Write-Host 'Installing ...';         Start-Process -Wait -NoNewWindow                 -FilePath '.\julia.exe'                 -ArgumentList @(                         '/S',                         '/D=C:\julia'                 );                 Write-Host 'Updating PATH ...';         $env:PATH = 'C:\julia\bin;' + $env:PATH;         [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);                 Write-Host 'Verifying install ("julia --version") ...';         julia --version;                 Write-Host 'Removing ...';         Remove-Item julia.exe -Force;                 Write-Host 'Complete.'
mkdir -p /usr/src/app
apt-get update && apt-get install -y   gcc   gettext   mysql-client libmysqlclient-dev   postgresql-client libpq-dev   sqlite3  --no-install-recommends && rm -rf /var/lib/apt/lists/*
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  javac --version'; javac --version;  Write-Host '  java --version'; java --version;   Write-Host 'Complete.'
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libexpat1-dev   libffi-dev   libgdbm-dev   liblzma-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   uuid-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   wget   git  ;  suite="$(awk '$1 == "deb" && $4 == "main" && $3 !~ /[\/-]/ { print $3; exit }' /etc/apt/sources.list)";  echo "deb http://deb.debian.org/debian $suite-backports main" > /etc/apt/sources.list.d/backports.list;  apt-get update;  apt-get install -y --no-install-recommends -t "$suite-backports"   golang-go  ;  rm -rf /var/lib/apt/lists/*
mkdir -p "$BASHBREW_CACHE"  && chmod 1777 "$BASHBREW_CACHE"
set -eux;  CGO_ENABLED=0 ./bashbrew/bashbrew.sh --help > /dev/null;  cp -vL bashbrew/go/bin/bashbrew /usr/local/bin/
ln -s "$PWD/bashbrew/bashbrew-entrypoint.sh" /usr/local/bin/bashbrew-entrypoint.sh
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
groupadd -r mongodb && useradd -r -g mongodb mongodb
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   jq   numactl  ;  if ! command -v ps > /dev/null; then   apt-get install -y --no-install-recommends procps;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   apt-get update;  apt-get install -y --no-install-recommends   wget  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends gnupg dirmngr;  fi;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu --version;  gosu nobody true;   wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";   apt-get purge -y --auto-remove wget
mkdir /docker-entrypoint-initdb.d
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo "deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
set -x  && apt-get update  && apt-get install -y   ${MONGO_PACKAGE}=$MONGO_VERSION   ${MONGO_PACKAGE}-server=$MONGO_VERSION   ${MONGO_PACKAGE}-shell=$MONGO_VERSION   ${MONGO_PACKAGE}-mongos=$MONGO_VERSION   ${MONGO_PACKAGE}-tools=$MONGO_VERSION  && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf /etc/mongod.conf.orig
mkdir -p /data/db /data/configdb  && chown -R mongodb:mongodb /data/db /data/configdb
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && buildDeps='   bison   dpkg-dev   libgdbm-dev   ruby  '  && apt-get update  && apt-get install -y --no-install-recommends $buildDeps  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-get purge -y --auto-remove $buildDeps  && cd /  && rm -r /usr/src/ruby  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   ca-certificates   gcc   libc6-dev   liblua5.3-dev   libpcre2-dev   libssl-dev   make   wget   zlib1g-dev  && rm -rf /var/lib/apt/lists/*   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux-glibc   USE_LUA=1 LUA_INC=/usr/include/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(nproc)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && apt-mark auto '.*' > /dev/null  && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   curl  ;  rm -rf /var/lib/apt/lists/*
set -eux;   savedAptMark="$(apt-mark showmanual)";  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) tarArch='x86_64'; dirArch='x64'; sha256='f0a83a139a89a2ccf2316814e5ee1c0c809fca02cbaf4baf3c1fd8eb71594f06' ;;   arm64) tarArch='aarch64'; dirArch='aarch64'; sha256='3d9ba9c2204ea920006b3a91ecd2803cac808b29250f2120000e29fc0384099a' ;;   i386) tarArch='i686'; dirArch='x86'; sha256='3e6941326522ac4bc34c5663c2c5752417e92677ff9befc56ba264eb283f37f1' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding Julia binary release"; exit 1 ;;  esac;   folder="$(echo "$JULIA_VERSION" | cut -d. -f1-2)";  curl -fL -o julia.tar.gz.asc "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc";  curl -fL -o julia.tar.gz     "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz";   echo "${sha256} *julia.tar.gz" | sha256sum -c -;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$JULIA_GPG";  gpg --batch --verify julia.tar.gz.asc julia.tar.gz;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME" julia.tar.gz.asc;   mkdir "$JULIA_PATH";  tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1;  rm julia.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   julia --version
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   libexpat1   libffi6   libgdbm3   libsqlite3-0  && rm -rf /var/lib/apt/lists/*
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) pypyArch='linux64'; sha256='729e3c54325969c98bd3658c6342b9f5987b96bad1d6def04250a08401b54c4b' ;;   i386) pypyArch='linux32'; sha256='b8db8fbca9621de8ea8cd7184b322f2dddb2f385e8e5a63dfb75bb3fea4b2e3f' ;;   ppc64el) pypyArch='ppc64le'; sha256='2912884da05abc2cdf71dd337c3f280095351312c1a1732a52b6878174a0fd02' ;;   s390x) pypyArch='s390x'; sha256='d588b045cc0d3a75c31fce54c1d181b1206ad9a5dd272fe79160a6268401605f' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;;  esac;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   bzip2   wget   libncurses5  ;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/pypy3.5-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   pypy3 --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   apt-get install -y --no-install-recommends gcc libc6-dev libssl-dev;   cd /usr/local/lib_pypy;   pypy3 _ssl_build.py;  fi;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   pypy3 get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;  pypy3 --version;  pip --version
groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   libjemalloc1   procps   iproute2  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends    dirmngr    gnupg   ;  fi;  rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   mkdir -p /usr/share/man/man1/;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386)    echo 'deb http://www.apache.org/dist/cassandra/debian %%CASSANDRA_DIST%%x main' > /etc/apt/sources.list.d/cassandra.list;    apt-get update;    ;;   *)       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get install -y --no-install-recommends     wget ca-certificates     dpkg-dev    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       tempDir="$(mktemp -d)";    for pkg in cassandra cassandra-tools; do     deb="${pkg}_${CASSANDRA_VERSION}_all.deb";     wget -O "$tempDir/$deb" "https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb";    done;       ls -lAFh "$tempDir";    ( cd "$tempDir" && dpkg-scanpackages . > Packages );    grep '^Package: ' "$tempDir/Packages";    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y   cassandra="$CASSANDRA_VERSION"   cassandra-tools="$CASSANDRA_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   ppc64el)    if grep -q -- '^-Xss' "$CASSANDRA_CONFIG/jvm.options"; then     grep -- '^-Xss256k$' "$CASSANDRA_CONFIG/jvm.options";     sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONFIG/jvm.options";     grep -- '^-Xss512k$' "$CASSANDRA_CONFIG/jvm.options";    elif grep -q -- '-Xss256k' "$CASSANDRA_CONFIG/cassandra-env.sh"; then     sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONFIG/cassandra-env.sh";     grep -- '-Xss512k' "$CASSANDRA_CONFIG/cassandra-env.sh";    fi;    ;;  esac;   sed -ri 's/^(JVM_PATCH_VERSION)=.*/\1=25/' "$CASSANDRA_CONFIG/cassandra-env.sh"
ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat
mkdir -p /var/lib/cassandra "$CASSANDRA_CONFIG"  && chown -R cassandra:cassandra /var/lib/cassandra "$CASSANDRA_CONFIG"  && chmod 777 /var/lib/cassandra "$CASSANDRA_CONFIG"
apk add --no-cache   ca-certificates   curl   tar   xz   openssl
set -x  && addgroup -g 82 -S www-data  && adduser -u 82 -D -S -G www-data www-data
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   apk add --no-cache --virtual .fetch-deps   gnupg   wget  ;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apk del --no-network .fetch-deps
set -xe  && apk add --no-cache --virtual .build-deps   $PHPIZE_DEPS   argon2-dev   coreutils   curl-dev   libedit-dev   libsodium-dev   libxml2-dev   openssl-dev   sqlite-dev   && export CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  && docker-php-source extract  && cd /usr/src/php  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')     $PHP_EXTRA_CONFIGURE_ARGS  && make -j "$(nproc)"  && find -type f -name '*.a' -delete  && make install  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }  && make clean   && cp -v php.ini-* "$PHP_INI_DIR/"   && cd /  && docker-php-source delete   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-cache $runDeps   && apk del --no-network .build-deps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc  && php --version
docker-php-ext-enable sodium
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -ex;   if command -v a2enmod; then   a2enmod rewrite;  fi;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libpng-dev   libpq-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  ;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   libjemalloc1   procps   iproute2  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends    dirmngr    gnupg   ;  fi;  rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   mkdir -p /usr/share/man/man1/;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386)    echo 'deb http://www.apache.org/dist/cassandra/debian 22x main' > /etc/apt/sources.list.d/cassandra.list;    apt-get update;    ;;   *)       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get install -y --no-install-recommends     wget ca-certificates     dpkg-dev    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       tempDir="$(mktemp -d)";    for pkg in cassandra cassandra-tools; do     deb="${pkg}_${CASSANDRA_VERSION}_all.deb";     wget -O "$tempDir/$deb" "https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb";    done;       ls -lAFh "$tempDir";    ( cd "$tempDir" && dpkg-scanpackages . > Packages );    grep '^Package: ' "$tempDir/Packages";    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y   cassandra="$CASSANDRA_VERSION"   cassandra-tools="$CASSANDRA_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   ppc64el)    if grep -q -- '^-Xss' "$CASSANDRA_CONFIG/jvm.options"; then     grep -- '^-Xss256k$' "$CASSANDRA_CONFIG/jvm.options";     sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONFIG/jvm.options";     grep -- '^-Xss512k$' "$CASSANDRA_CONFIG/jvm.options";    elif grep -q -- '-Xss256k' "$CASSANDRA_CONFIG/cassandra-env.sh"; then     sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONFIG/cassandra-env.sh";     grep -- '-Xss512k' "$CASSANDRA_CONFIG/cassandra-env.sh";    fi;    ;;  esac;   sed -ri 's/^(JVM_PATCH_VERSION)=.*/\1=25/' "$CASSANDRA_CONFIG/cassandra-env.sh"
ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat
mkdir -p /var/lib/cassandra "$CASSANDRA_CONFIG"  && chown -R cassandra:cassandra /var/lib/cassandra "$CASSANDRA_CONFIG"  && chmod 777 /var/lib/cassandra "$CASSANDRA_CONFIG"
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
groupadd -r mysql && useradd -r -g mysql mysql
apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr && rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && gpgconf --kill all  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   pwgen   perl  && rm -rf /var/lib/apt/lists/*
set -ex;  key='A4A9406876FCBD3C456770C88C718D3B5072E1F5';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/mysql.gpg;  gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list > /dev/null
echo "deb http://repo.mysql.com/apt/debian/ stretch mysql-${MYSQL_MAJOR}" > /etc/apt/sources.list.d/mysql.list
{   echo mysql-community-server mysql-community-server/data-dir select '';   echo mysql-community-server mysql-community-server/root-pass password '';   echo mysql-community-server mysql-community-server/re-root-pass password '';   echo mysql-community-server mysql-community-server/remove-test-db select false;  } | debconf-set-selections  && apt-get update && apt-get install -y mysql-server="${MYSQL_VERSION}" && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld  && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld  && chmod 777 /var/run/mysqld  && find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'  && echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -eux;  apk add --no-cache   btrfs-progs   e2fsprogs   e2fsprogs-extra   iptables   xfsprogs   xz   pigz  ;  if zfs="$(apk info --no-cache --quiet zfs)" && [ -n "$zfs" ]; then   apk add --no-cache zfs;  fi
set -x  && addgroup -S dockremap  && adduser -S -G dockremap dockremap  && echo 'dockremap:165536:65536' >> /etc/subuid  && echo 'dockremap:165536:65536' >> /etc/subgid
set -eux;  wget -O /usr/local/bin/dind "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind";  chmod +x /usr/local/bin/dind
apt-get update && apt-get install -y --no-install-recommends   bzip2   gnupg dirmngr   libcurl4-openssl-dev   libfreetype6-dev   libicu-dev   libjpeg-dev   libldap2-dev   libmcrypt-dev   libmemcached-dev   libpng-dev   libpq-dev   libxml2-dev   unzip  && rm -rf /var/lib/apt/lists/*
set -ex;  docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  docker-php-ext-configure ldap --with-libdir="lib/$debMultiarch";  docker-php-ext-install -j "$(nproc)"   exif   gd   intl   ldap   mcrypt   opcache   pcntl   pdo_mysql   pdo_pgsql   pgsql   zip
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
set -ex;  pecl install APCu-5.1.11;  pecl install memcached-3.0.4;  pecl install redis-3.1.6;  docker-php-ext-enable   apcu   memcached   redis
set -eux;  curl -fL -o owncloud.tar.bz2 "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2";  curl -fL -o owncloud.tar.bz2.asc "https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc";  echo "$OWNCLOUD_SHA256 *owncloud.tar.bz2" | sha256sum -c -;  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26;  gpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" owncloud.tar.bz2.asc;  tar -xjf owncloud.tar.bz2 -C /usr/src/;  rm owncloud.tar.bz2
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
apt-get update  && apt-get install -y --no-install-recommends   bzip2   ca-certificates   libffi-dev   libgdbm3   libgmp-dev   libssl-dev   libyaml-dev   procps   zlib1g-dev  && rm -rf /var/lib/apt/lists/*
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   autoconf   bison   dpkg-dev   gcc   libbz2-dev   libgdbm-dev   libglib2.0-dev   libncurses-dev   libreadline-dev   libxml2-dev   libxslt-dev   make   ruby   wget   xz-utils  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false   && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
apk add --no-cache   'su-exec>=0.2'   bash   procps
set -eux;   apk add --no-cache --virtual .build-deps   autoconf   ca-certificates   dpkg-dev dpkg   gcc   gnupg   libc-dev   linux-headers   make   ncurses-dev  ;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   mkdir /usr/local/src;   wget --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum -c -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum -c -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --no-cache --virtual .otp-run-deps $runDeps;  apk del --no-network .build-deps;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  addgroup -g 101 -S rabbitmq;  adduser -u 100 -S -h "$RABBITMQ_DATA_DIR" -G rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   apk add --no-cache --virtual .build-deps   ca-certificates   gnupg   xz  ;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apk del .build-deps;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  su-exec rabbitmq rabbitmqctl help;  su-exec rabbitmq rabbitmqctl list_ciphers;  su-exec rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
apk add --no-cache   gmp-dev
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && apk add --no-cache --virtual .ruby-builddeps   autoconf   bison   bzip2   bzip2-dev   ca-certificates   coreutils   dpkg-dev dpkg   gcc   gdbm-dev   glib-dev   libc-dev   libffi-dev   libxml2-dev   libxslt-dev   linux-headers   make   ncurses-dev   openssl   openssl-dev   procps   readline-dev   ruby   tar   xz   yaml-dev   zlib-dev   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch'  && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c -  && patch -p1 -i thread-stack-fix.patch  && rm thread-stack-fix.patch   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-network --virtual .ruby-rundeps $runDeps   bzip2   ca-certificates   libffi-dev   procps   yaml-dev   zlib-dev  && apk del --no-network .ruby-builddeps  && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
$url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.exe';   Write-Host 'Installing ...';  Start-Process python.exe -Wait   -ArgumentList @(    '/quiet',    'InstallAllUsers=1',    'TargetDir=C:\Python',    'PrependPath=1',    'Shortcuts=0',    'Include_doc=0',    'Include_pip=0',    'Include_test=0'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.exe -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
apt-get update && apt-get install -y --no-install-recommends   fontconfig-config   fonts-dejavu-core   geoip-database   init-system-helpers   libarchive-extract-perl   libexpat1   libfontconfig1   libfreetype6   libgcrypt11   libgd3   libgdbm3   libgeoip1   libgpg-error0   libjbig0   libjpeg8   liblog-message-perl   liblog-message-simple-perl   libmodule-pluggable-perl   libpng12-0   libpod-latex-perl   libssl1.0.0   libterm-ui-perl   libtext-soundex-perl   libtiff5   libvpx1   libx11-6   libx11-data   libxau6   libxcb1   libxdmcp6   libxml2   libxpm4   libxslt1.1   perl   perl-modules   rename   sgml-base   ucf   xml-core  && rm -rf /var/lib/apt/lists/*
gpg --keyserver pgp.mit.edu --recv-key  A09CD539B8BB8CBE96E82BDFABD4D3B3F5806B4D  4C2C85E705DC730833990C38A9376139A524C53E  B0F4253373F8F6F510D42178520A9993A1C052F8  65506C02EFC250F1B7A3D694ECF0E90B2C172083  7338973069ED3F443F4D37DFA64FD5B17ADB39A8  6E067260B83DCF2CA93C566F518509686C7E5E82  573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62
buildDeps="   ca-certificates   curl   gcc   libc-dev-bin   libc6-dev   libexpat1-dev   libfontconfig1-dev   libfreetype6-dev   libgd-dev   libgd2-dev   libgeoip-dev   libice-dev   libjbig-dev   libjpeg8-dev   liblzma-dev   libpcre3-dev   libperl-dev   libpng12-dev   libpthread-stubs0-dev   libsm-dev   libssl-dev   libssl-dev   libtiff5-dev   libvpx-dev   libx11-dev   libxau-dev   libxcb1-dev   libxdmcp-dev   libxml2-dev   libxpm-dev   libxslt1-dev   libxt-dev   linux-libc-dev   make   manpages-dev   x11proto-core-dev   x11proto-input-dev   x11proto-kb-dev   xtrans-dev   zlib1g-dev  ";  apt-get update && apt-get install -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/*  && curl -SL "http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz" -o nginx.tar.gz  && curl -SL "http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc" -o nginx.tar.gz.asc  && gpg --verify nginx.tar.gz.asc  && mkdir -p /usr/src/nginx  && tar -xvf nginx.tar.gz -C /usr/src/nginx --strip-components=1  && rm nginx.tar.gz*  && cd /usr/src/nginx  && ./configure   --user=www-data   --group=www-data   --prefix=/usr/local/nginx   --conf-path=/etc/nginx.conf   --http-log-path=/proc/self/fd/1   --error-log-path=/proc/self/fd/2   --with-http_addition_module   --with-http_auth_request_module   --with-http_dav_module   --with-http_geoip_module   --with-http_gzip_static_module   --with-http_image_filter_module   --with-http_perl_module   --with-http_realip_module   --with-http_spdy_module   --with-http_ssl_module   --with-http_stub_status_module   --with-http_sub_module   --with-http_xslt_module   --with-ipv6   --with-mail   --with-mail_ssl_module   --with-pcre-jit  && make -j"$(nproc)"  && make install  && cd /  && rm -r /usr/src/nginx  && chown -R www-data:www-data /usr/local/nginx  && {   echo;   echo '# stay in the foreground so Docker has a process to track';   echo 'daemon off;';  } >> /etc/nginx.conf  && apt-get purge -y --auto-remove $buildDeps
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
apk add --no-cache   'su-exec>=0.2'   bash   procps
set -eux;   apk add --no-cache --virtual .build-deps   autoconf   ca-certificates   dpkg-dev dpkg   gcc   gnupg   libc-dev   linux-headers   make   ncurses-dev  ;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   mkdir /usr/local/src;   wget --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum -c -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum -c -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )";  apk add --no-cache --virtual .otp-run-deps $runDeps;  apk del --no-network .build-deps;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  addgroup -g 101 -S rabbitmq;  adduser -u 100 -S -h "$RABBITMQ_DATA_DIR" -G rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   apk add --no-cache --virtual .build-deps   ca-certificates   gnupg   xz  ;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apk del .build-deps;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  su-exec rabbitmq rabbitmqctl help;  su-exec rabbitmq rabbitmqctl list_ciphers;  su-exec rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
groupadd -r mysql && useradd -r -g mysql mysql
apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr && rm -rf /var/lib/apt/lists/*
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && gpgconf --kill all  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   pwgen   openssl   perl  && rm -rf /var/lib/apt/lists/*
set -ex;  key='A4A9406876FCBD3C456770C88C718D3B5072E1F5';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/mysql.gpg;  gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list > /dev/null
echo "deb http://repo.mysql.com/apt/debian/ stretch mysql-${MYSQL_MAJOR}" > /etc/apt/sources.list.d/mysql.list
{   echo mysql-community-server mysql-community-server/data-dir select '';   echo mysql-community-server mysql-community-server/root-pass password '';   echo mysql-community-server mysql-community-server/re-root-pass password '';   echo mysql-community-server mysql-community-server/remove-test-db select false;  } | debconf-set-selections  && apt-get update && apt-get install -y mysql-community-client="${MYSQL_VERSION}" mysql-community-server-core="${MYSQL_VERSION}" && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld  && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld  && chmod 777 /var/run/mysqld
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
apt-get update && apt-get install -y --no-install-recommends   g++   gcc   libc6-dev   make   pkg-config  && rm -rf /var/lib/apt/lists/*
set -eux;   %%ARCH-CASE%%;   url="https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz";  wget -O go.tgz "$url";  echo "${goRelSha256} *go.tgz" | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   if [ "$goRelArch" = 'src' ]; then   echo >&2;   echo >&2 'error: UNIMPLEMENTED';   echo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)';   echo >&2;   exit 1;  fi;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
set -eux;  yum install -y   gzip   tar     freetype fontconfig  ;  rm -rf /var/cache/yum
set -eux;   curl -fL -o /openjdk.tgz "$JAVA_URL";  echo "$JAVA_SHA256 */openjdk.tgz" | sha256sum -c -;  mkdir -p "$JAVA_HOME";  tar --extract --file /openjdk.tgz --directory "$JAVA_HOME" --strip-components 1;  rm /openjdk.tgz;   ln -sfT "$JAVA_HOME" /usr/java/default;  ln -sfT "$JAVA_HOME" /usr/java/latest;  for bin in "$JAVA_HOME/bin/"*; do   base="$(basename "$bin")";   [ ! -e "/usr/bin/$base" ];   alternatives --install "/usr/bin/$base" "$base" "$bin" 20000;  done;   java -Xshare:dump;   java --version;  javac --version
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   libexpat1   libffi6   libgdbm3   libsqlite3-0  && rm -rf /var/lib/apt/lists/*
set -ex;   %%ARCH-CASE%%;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   bzip2   wget   libncurses5  ;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/%%TAR%%-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   %%CMD%% --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   apt-get install -y --no-install-recommends gcc libc6-dev libssl-dev;   cd /usr/local/lib_pypy;   %%CMD%% _ssl_build.py;  fi;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   %%CMD%% get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;  %%CMD%% --version;  pip --version
Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip';   Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256);  if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive -Path git.zip -DestinationPath C:\git\.;   Write-Host 'Removing ...';  Remove-Item git.zip -Force;   Write-Host 'Updating PATH ...';  $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  git --version'; git --version;   Write-Host 'Complete.';
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '%%WIN-SHA256%%';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...';  $tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2';  if (Test-Path $tls12RegBase) { throw ('"{0}" already exists!' -f $tls12RegBase) };  New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force;  New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
Write-Host ('Downloading {0} ...' -f $env:JAVA_URL);  Invoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip';  Write-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256);  if ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Verifying install ...';  Write-Host '  java --version'; java --version;  Write-Host '  javac --version'; javac --version;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Complete.'
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  groupadd -r postgres --gid=999;  useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres;  mkdir -p /var/lib/postgresql;  chown -R postgres:postgres /var/lib/postgresql
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -eux;  if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then   grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;   sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;   ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;  fi;  apt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*;  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
set -eux;  apt-get update;  apt-get install -y --no-install-recommends libnss-wrapper;  rm -rf /var/lib/apt/lists/*
mkdir /docker-entrypoint-initdb.d
set -ex;  key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   export PYTHONDONTWRITEBYTECODE=1;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386|ppc64el)    echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;    apt-get update;    ;;   *)    echo "deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;       case "$PG_MAJOR" in     9.* | 10 ) ;;     *)      echo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list;      ;;    esac;       tempDir="$(mktemp -d)";    cd "$tempDir";       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get build-dep -y     postgresql-common pgdg-keyring     "postgresql-$PG_MAJOR=$PG_VERSION"    ;    DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"     apt-get source --compile      postgresql-common pgdg-keyring      "postgresql-$PG_MAJOR=$PG_VERSION"    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       ls -lAFh;    dpkg-scanpackages . > Packages;    grep '^Package: ' Packages;    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y postgresql-common;  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf;  apt-get install -y   "postgresql-$PG_MAJOR=$PG_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi;   find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +
set -eux;  dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample";  cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample;  ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/";  sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample;  grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
apk add --no-cache   gmp-dev
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && apk add --no-cache --virtual .ruby-builddeps   autoconf   bison   bzip2   bzip2-dev   ca-certificates   coreutils   dpkg-dev dpkg   gcc   gdbm-dev   glib-dev   libc-dev   libffi-dev   libxml2-dev   libxslt-dev   linux-headers   make   ncurses-dev   openssl   openssl-dev   procps   readline-dev   ruby   tar   xz   yaml-dev   zlib-dev   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch'  && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c -  && patch -p1 -i thread-stack-fix.patch  && rm thread-stack-fix.patch   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --no-network --virtual .ruby-rundeps $runDeps   bzip2   ca-certificates   libffi-dev   procps   yaml-dev   zlib-dev  && apk del --no-network .ruby-builddeps  && cd /  && rm -r /usr/src/ruby  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  groupadd -r postgres --gid=999;  useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres;  mkdir -p /var/lib/postgresql;  chown -R postgres:postgres /var/lib/postgresql
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -eux;  if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then   grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;   sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;   ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;  fi;  apt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*;  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
set -eux;  apt-get update;  apt-get install -y --no-install-recommends libnss-wrapper;  rm -rf /var/lib/apt/lists/*
mkdir /docker-entrypoint-initdb.d
set -ex;  key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   export PYTHONDONTWRITEBYTECODE=1;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386|ppc64el)    echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;    apt-get update;    ;;   *)    echo "deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;       case "$PG_MAJOR" in     9.* | 10 ) ;;     *)      echo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list;      ;;    esac;       tempDir="$(mktemp -d)";    cd "$tempDir";       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get build-dep -y     postgresql-common pgdg-keyring     "postgresql-$PG_MAJOR=$PG_VERSION"    ;    DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"     apt-get source --compile      postgresql-common pgdg-keyring      "postgresql-$PG_MAJOR=$PG_VERSION"    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       ls -lAFh;    dpkg-scanpackages . > Packages;    grep '^Package: ' Packages;    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y postgresql-common;  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf;  apt-get install -y   "postgresql-$PG_MAJOR=$PG_VERSION"   "postgresql-contrib-$PG_MAJOR=$PG_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi;   find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +
set -eux;  dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample";  cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample;  ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/";  sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample;  grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -ex;  apt-get update;  apt-get install -y --no-install-recommends   autoconf   automake   bzip2   dpkg-dev   file   g++   gcc   imagemagick   libbz2-dev   libc6-dev   libcurl4-openssl-dev   libdb-dev   libevent-dev   libffi-dev   libgdbm-dev   libgeoip-dev   libglib2.0-dev   libgmp-dev   libjpeg-dev   libkrb5-dev   liblzma-dev   libmagickcore-dev   libmagickwand-dev   libncurses5-dev   libncursesw5-dev   libpng-dev   libpq-dev   libreadline-dev   libsqlite3-dev   libssl-dev   libtool   libwebp-dev   libxml2-dev   libxslt-dev   libyaml-dev   make   patch   unzip   xz-utils   zlib1g-dev     $(    if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then     echo 'default-libmysqlclient-dev';    else     echo 'libmysqlclient-dev';    fi   )  ;  rm -rf /var/lib/apt/lists/*
set -x  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf && gpgconf --kill all || :; }  && rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true
set -eux;  npm install -g "ghost-cli@$GHOST_CLI_VERSION";  npm cache clean --force
set -eux;  mkdir -p "$GHOST_INSTALL";  chown node:node "$GHOST_INSTALL";   gosu node ghost install "$GHOST_VERSION" --db sqlite3 --no-prompt --no-stack --no-setup --dir "$GHOST_INSTALL";   cd "$GHOST_INSTALL";  gosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath "$GHOST_CONTENT/data/ghost.db";  gosu node ghost config paths.contentPath "$GHOST_CONTENT";   gosu node ln -s config.production.json "$GHOST_INSTALL/config.development.json";  readlink -f "$GHOST_INSTALL/config.development.json";   mv "$GHOST_CONTENT" "$GHOST_INSTALL/content.orig";  mkdir -p "$GHOST_CONTENT";  chown node:node "$GHOST_CONTENT";   cd "$GHOST_INSTALL/current";  sqlite3Version="$(npm view . optionalDependencies.sqlite3)";  if ! gosu node yarn add "sqlite3@$sqlite3Version" --force; then   savedAptMark="$(apt-mark showmanual)";   apt-get update;   apt-get install -y --no-install-recommends python make gcc g++ libc-dev;   rm -rf /var/lib/apt/lists/*;     gosu node yarn add "sqlite3@$sqlite3Version" --force --build-from-source;     apt-mark showmanual | xargs apt-mark auto > /dev/null;   [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;   apt-get purge -y --auto-remove;  fi;   gosu node yarn cache clean;  gosu node npm cache clean --force;  npm cache clean --force;  rm -rv /tmp/yarn* /tmp/v8*
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -eux;  apk add --no-cache   btrfs-progs   e2fsprogs   e2fsprogs-extra   iptables   xfsprogs   xz   pigz  ;  if zfs="$(apk info --no-cache --quiet zfs)" && [ -n "$zfs" ]; then   apk add --no-cache zfs;  fi
set -x  && addgroup -S dockremap  && adduser -S -G dockremap dockremap  && echo 'dockremap:165536:65536' >> /etc/subuid  && echo 'dockremap:165536:65536' >> /etc/subgid
set -eux;  wget -O /usr/local/bin/dind "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind";  chmod +x /usr/local/bin/dind
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  java -version'; java -version;   Write-Host 'Complete.'
apt-get update && apt-get install -y --no-install-recommends   tcl   tk  && rm -rf /var/lib/apt/lists/*
set -ex;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) pypyArch='linux64'; sha256='729e3c54325969c98bd3658c6342b9f5987b96bad1d6def04250a08401b54c4b' ;;   i386) pypyArch='linux32'; sha256='b8db8fbca9621de8ea8cd7184b322f2dddb2f385e8e5a63dfb75bb3fea4b2e3f' ;;   ppc64el) pypyArch='ppc64le'; sha256='2912884da05abc2cdf71dd337c3f280095351312c1a1732a52b6878174a0fd02' ;;   s390x) pypyArch='s390x'; sha256='d588b045cc0d3a75c31fce54c1d181b1206ad9a5dd272fe79160a6268401605f' ;;   *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release"; exit 1 ;;  esac;   wget -O pypy.tar.bz2 "https://bitbucket.org/pypy/pypy/downloads/pypy3.5-v${PYPY_VERSION}-${pypyArch}.tar.bz2" --progress=dot:giga;  echo "$sha256 *pypy.tar.bz2" | sha256sum -c;  tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2;  find /usr/local/lib-python -depth -type d -a \( -name test -o -name tests \) -exec rm -rf '{}' +;  rm pypy.tar.bz2;   pypy3 --version;   if [ -f /usr/local/lib_pypy/_ssl_build.py ]; then   cd /usr/local/lib_pypy;   pypy3 _ssl_build.py;  fi
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   pypy3 get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   rm -f get-pip.py
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
cpanm Digest::SHA Module::Signature
cpanm App::cpanminus
cpanm EV
cpanm IO::Socket::IP
cpanm IO::Socket::Socks
cpanm Net::DNS::Native
cpanm --notest IO::Socket::SSL
cpanm Mojolicious@8.13
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   gcc   libc-dev   linux-headers   make   openssl   openssl-dev   pcre2-dev   readline-dev   tar   zlib-dev   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(getconf _NPROCESSORS_ONLN)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .haproxy-rundeps $runDeps  && apk del .build-deps
groupadd -r mysql && useradd -r -g mysql mysql
set -ex;  apt-get update;  if ! which gpg; then   apt-get install -y --no-install-recommends gnupg;  fi;  if ! gpg --version | grep -q '^gpg (GnuPG) 1\.'; then    apt-get install -y --no-install-recommends dirmngr;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   fetchDeps='   ca-certificates   wget  ';  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   chmod +x /usr/local/bin/gosu;  gosu nobody true;   apt-get purge -y --auto-remove $fetchDeps
mkdir /docker-entrypoint-initdb.d
apt-get update && apt-get install -y --no-install-recommends   apt-transport-https ca-certificates   pwgen  && rm -rf /var/lib/apt/lists/*
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo 'deb https://repo.percona.com/apt %%SUITE%% main' > /etc/apt/sources.list.d/percona.list
set -ex;  {   for key in    percona-server-server/root_password    percona-server-server/root_password_again    "percona-server-server-$PERCONA_MAJOR/root-pass"    "percona-server-server-$PERCONA_MAJOR/re-root-pass"   ; do    echo "percona-server-server-$PERCONA_MAJOR" "$key" password 'unused';   done;  } | debconf-set-selections;  apt-get update;  apt-get install -y   percona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION  ;  rm -rf /var/lib/apt/lists/*;  sed -ri 's/^user\s/#&/' /etc/mysql/my.cnf;  rm -rf /var/lib/mysql;  mkdir -p /var/lib/mysql /var/run/mysqld;  chown -R mysql:mysql /var/lib/mysql /var/run/mysqld;  chmod 777 /var/run/mysqld;  find /etc/mysql/ -name '*.cnf' -print0   | xargs -0 grep -lZE '^(bind-address|log)'   | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/';  echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -ex;  if ! command -v gpg > /dev/null; then   apt-get update;   apt-get install -y --no-install-recommends    gnupg    dirmngr   ;   rm -rf /var/lib/apt/lists/*;  fi
set -eux;  groupadd -r postgres --gid=999;  useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres;  mkdir -p /var/lib/postgresql;  chown -R postgres:postgres /var/lib/postgresql
set -x  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/*  && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc  && chmod +x /usr/local/bin/gosu  && gosu nobody true  && apt-get purge -y --auto-remove ca-certificates wget
set -eux;  if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then   grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;   sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker;   ! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker;  fi;  apt-get update; apt-get install -y locales; rm -rf /var/lib/apt/lists/*;  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
set -eux;  apt-get update;  apt-get install -y --no-install-recommends libnss-wrapper;  rm -rf /var/lib/apt/lists/*
mkdir /docker-entrypoint-initdb.d
set -ex;  key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8';  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg;  command -v gpgconf > /dev/null && gpgconf --kill all;  rm -rf "$GNUPGHOME";  apt-key list
set -ex;   export PYTHONDONTWRITEBYTECODE=1;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64|i386|ppc64el)    echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;    apt-get update;    ;;   *)    echo "deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list;       case "$PG_MAJOR" in     9.* | 10 ) ;;     *)      echo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/pgdg.list;      ;;    esac;       tempDir="$(mktemp -d)";    cd "$tempDir";       savedAptMark="$(apt-mark showmanual)";       apt-get update;    apt-get build-dep -y     postgresql-common pgdg-keyring     "postgresql-$PG_MAJOR=$PG_VERSION"    ;    DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"     apt-get source --compile      postgresql-common pgdg-keyring      "postgresql-$PG_MAJOR=$PG_VERSION"    ;       apt-mark showmanual | xargs apt-mark auto > /dev/null;    apt-mark manual $savedAptMark;       ls -lAFh;    dpkg-scanpackages . > Packages;    grep '^Package: ' Packages;    echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list;    apt-get -o Acquire::GzipIndexes=false update;    ;;  esac;   apt-get install -y postgresql-common;  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf;  apt-get install -y   "postgresql-$PG_MAJOR=$PG_VERSION"   "postgresql-contrib-$PG_MAJOR=$PG_VERSION"  ;   rm -rf /var/lib/apt/lists/*;   if [ -n "$tempDir" ]; then   apt-get purge -y --auto-remove;   rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list;  fi;   find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +
set -eux;  dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample";  cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample;  ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/";  sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample;  grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample
mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -eux;  apt-get update;  apt-get install -y --no-install-recommends apache2;  rm -rf /var/lib/apt/lists/*;   sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS";   . "$APACHE_ENVVARS";  for dir in   "$APACHE_LOCK_DIR"   "$APACHE_RUN_DIR"   "$APACHE_LOG_DIR"  ; do   rm -rvf "$dir";   mkdir -p "$dir";   chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir";   chmod 777 "$dir";  done;   rm -rvf /var/www/html/*;   ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log";  ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log";  chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"
a2dismod mpm_event && a2enmod mpm_prefork
{   echo '<FilesMatch \.php$>';   echo '\tSetHandler application/x-httpd-php';   echo '</FilesMatch>';   echo;   echo 'DirectoryIndex disabled';   echo 'DirectoryIndex index.php index.html';   echo;   echo '<Directory /var/www/>';   echo '\tOptions -Indexes';   echo '\tAllowOverride All';   echo '</Directory>';  } | tee "$APACHE_CONFDIR/conf-available/docker-php.conf"  && a2enconf docker-php
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
apk add --no-cache   ca-certificates
[ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
set -eux;  apk add --no-cache --virtual .build-deps   bash   gcc   musl-dev   openssl   go  ;  export   GOROOT_BOOTSTRAP="$(go env GOROOT)"   GOOS="$(go env GOOS)"   GOARCH="$(go env GOARCH)"   GOHOSTOS="$(go env GOHOSTOS)"   GOHOSTARCH="$(go env GOHOSTARCH)"  ;  apkArch="$(apk --print-arch)";  case "$apkArch" in   armhf) export GOARM='6' ;;   x86) export GO386='387' ;;  esac;   wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz";  echo '1fff7c33ef2522e6dfaf6ab96ec4c2a8b76d018aae6fc88ce2bd40f2202d0f8c *go.tgz' | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   cd /usr/local/go/src;  ./make.bash;   rm -rf   /usr/local/go/pkg/bootstrap   /usr/local/go/pkg/obj  ;  apk del .build-deps;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
apt-get update && apt-get install -y --no-install-recommends   tk-dev  && rm -rf /var/lib/apt/lists/*
set -ex   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   bzip2   unzip   xz-utils     ca-certificates p11-kit     fontconfig libfreetype6  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   javac --version;  java --version
rabbitmq-plugins enable --offline rabbitmq_management
set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  apt-get update; apt-get install -y --no-install-recommends python; rm -rf /var/lib/apt/lists/*;  rabbitmqadmin --version
$newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath;
$url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  Invoke-WebRequest -Uri $url -OutFile 'go.zip';   $sha256 = '%%WIN-SHA256%%';  Write-Host ('Verifying sha256 ({0}) ...' -f $sha256);  if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  Expand-Archive go.zip -DestinationPath C:\;   Write-Host 'Verifying install ("go version") ...';  go version;   Write-Host 'Removing ...';  Remove-Item go.zip -Force;   Write-Host 'Complete.';
$url = ('https://www.python.org/ftp/python/{0}/python-{1}.amd64.msi' -f $env:PYTHON_RELEASE, $env:PYTHON_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'python.msi';   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'python.msi',    '/quiet',    '/qn',    'TARGETDIR=C:\Python',    'ALLUSERS=1',    'ADDLOCAL=DefaultFeature,Extensions,TclTk,Tools,PrependPath'   );   $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  python --version'; python --version;   Write-Host 'Removing ...';  Remove-Item python.msi -Force;   Write-Host 'Complete.';
Write-Host ('Installing pip=={0} ...' -f $env:PYTHON_PIP_VERSION);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'get-pip.py';  python get-pip.py   --disable-pip-version-check   --no-cache-dir   ('pip=={0}' -f $env:PYTHON_PIP_VERSION)  ;  Remove-Item get-pip.py -Force;   Write-Host 'Verifying pip install ...';  pip --version;   Write-Host 'Complete.';
pip install --no-cache-dir virtualenv
groupadd -r mongodb && useradd -r -g mongodb mongodb
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   jq   numactl  ;  if ! command -v ps > /dev/null; then   apt-get install -y --no-install-recommends procps;  fi;  rm -rf /var/lib/apt/lists/*
set -ex;   apt-get update;  apt-get install -y --no-install-recommends   wget  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends gnupg dirmngr;  fi;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;  chmod +x /usr/local/bin/gosu;  gosu --version;  gosu nobody true;   wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";   apt-get purge -y --auto-remove wget
mkdir /docker-entrypoint-initdb.d
set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
echo "deb http://$MONGO_REPO/apt/%%DISTRO%% %%SUITE%%/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR %%COMPONENT%%" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
set -x  && apt-get update  && apt-get install -y   ${MONGO_PACKAGE}=$MONGO_VERSION   ${MONGO_PACKAGE}-server=$MONGO_VERSION   ${MONGO_PACKAGE}-shell=$MONGO_VERSION   ${MONGO_PACKAGE}-mongos=$MONGO_VERSION   ${MONGO_PACKAGE}-tools=$MONGO_VERSION  && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf /etc/mongod.conf.orig
mkdir -p /data/db /data/configdb  && chown -R mongodb:mongodb /data/db /data/configdb
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat (3.4)
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   libressl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
addgroup -g 11211 memcache && adduser -D -u 11211 -G memcache memcache
apk add --no-cache cyrus-sasl-plain
set -x   && apk add --no-cache --virtual .build-deps   ca-certificates   coreutils   cyrus-sasl-dev   dpkg-dev dpkg   gcc   libc-dev   libevent-dev   linux-headers   make   openssl   perl   perl-utils   tar   wget   && wget -O memcached.tar.gz "https://memcached.org/files/memcached-$MEMCACHED_VERSION.tar.gz"  && echo "$MEMCACHED_SHA1  memcached.tar.gz" | sha1sum -c -  && mkdir -p /usr/src/memcached  && tar -xzf memcached.tar.gz -C /usr/src/memcached --strip-components=1  && rm memcached.tar.gz   && cd /usr/src/memcached   && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && enableExtstore="$(   case "$gnuArch" in    s390x-*) ;;    *) echo '--enable-extstore' ;;   esac  )"  && ./configure   --build="$gnuArch"   --enable-sasl   --enable-sasl-pwdb   $enableExtstore  && make -j "$(nproc)"   && make test  && make install   && cd / && rm -rf /usr/src/memcached   && runDeps="$(   scanelf --needed --nobanner --format '%n#p' --recursive /usr/local    | tr ',' '\n'    | sort -u    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'  )"  && apk add --virtual .memcached-rundeps $runDeps  && apk del .build-deps   && memcached -V
ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
dpkg --add-architecture i386
apt-get update && apt-get install -y --no-install-recommends   gcc   libc6-dev   make     libc6-dev:i386   libgcc-6-dev:i386     libc6-dev-arm64-cross   libc6-dev-armel-cross   libc6-dev-armhf-cross   libc6-dev-ppc64el-cross   libc6-dev-s390x-cross     gcc-aarch64-linux-gnu   gcc-arm-linux-gnueabi   gcc-arm-linux-gnueabihf   gcc-powerpc64le-linux-gnu   gcc-s390x-linux-gnu     file  && rm -rf /var/lib/apt/lists/*
set -ex;  make clean all test   TARGET_ARCH='amd64'   CC='x86_64-linux-gnu-gcc'   STRIP='x86_64-linux-gnu-strip'
set -ex;  make clean all   TARGET_ARCH='arm32v5'   CC='arm-linux-gnueabi-gcc'   STRIP='arm-linux-gnueabi-strip'
set -ex;  make clean all   TARGET_ARCH='arm32v7'   CC='arm-linux-gnueabihf-gcc'   STRIP='arm-linux-gnueabihf-strip'
set -ex;  make clean all   TARGET_ARCH='arm64v8'   CC='aarch64-linux-gnu-gcc'   STRIP='aarch64-linux-gnu-strip'
set -ex;  make clean all test   TARGET_ARCH='i386'   CC='gcc -m32 -L/usr/lib/gcc/i686-linux-gnu/6'   STRIP='x86_64-linux-gnu-strip'
set -ex;  make clean all   TARGET_ARCH='ppc64le'   CC='powerpc64le-linux-gnu-gcc'   STRIP='powerpc64le-linux-gnu-strip'
set -ex;  make clean all   TARGET_ARCH='s390x'   CC='s390x-linux-gnu-gcc'   STRIP='s390x-linux-gnu-strip'
find \( -name 'hello' -or -name 'hello.txt' \) -exec file '{}' + -exec ls -lh '{}' +
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
set -ex  && cd /usr/local/etc  && if [ -d php-fpm.d ]; then   sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;   cp php-fpm.d/www.conf.default php-fpm.d/www.conf;  else   mkdir php-fpm.d;   cp php-fpm.conf.default php-fpm.d/www.conf;   {    echo '[global]';    echo 'include=etc/php-fpm.d/*.conf';   } | tee php-fpm.conf;  fi  && {   echo '[global]';   echo 'error_log = /proc/self/fd/2';   echo;   echo '[www]';   echo '; if we send this to /proc/self/fd/1, it never appears';   echo 'access.log = /proc/self/fd/2';   echo;   echo 'clear_env = no';   echo;   echo '; Ensure worker stdout and stderr are sent to the main error log.';   echo 'catch_workers_output = yes';  } | tee php-fpm.d/docker.conf  && {   echo '[global]';   echo 'daemonize = no';   echo;   echo '[www]';   echo 'listen = 9000';  } | tee php-fpm.d/zz-docker.conf
apt-get update && apt-get install -y --no-install-recommends   ca-certificates   netbase  && rm -rf /var/lib/apt/lists/*
set -ex   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   dpkg-dev   gcc   libbz2-dev   libc6-dev   libexpat1-dev   libffi-dev   libgdbm-dev   liblzma-dev   libncursesw5-dev   libreadline-dev   libsqlite3-dev   libssl-dev   make   tk-dev   uuid-dev   wget   xz-utils   zlib1g-dev   $(command -v gpg > /dev/null || echo 'gnupg dirmngr')   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"  && make install  && ldconfig   && apt-mark auto '.*' > /dev/null  && apt-mark manual $savedAptMark  && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && rm -rf /var/lib/apt/lists/*   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends wget;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
set -ex;   if command -v a2enmod; then   a2enmod rewrite;  fi;   savedAptMark="$(apt-mark showmanual)";   apt-get update;  apt-get install -y --no-install-recommends   libjpeg-dev   libpng-dev   libpq-dev   libzip-dev  ;   docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr;  docker-php-ext-install -j "$(nproc)"   gd   opcache   pdo_mysql   pdo_pgsql   zip  ;   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so   | awk '/=>/ { print $3 }'   | sort -u   | xargs -r dpkg-query -S   | cut -d: -f1   | sort -u   | xargs -rt apt-mark manual;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*
{   echo 'opcache.memory_consumption=128';   echo 'opcache.interned_strings_buffer=8';   echo 'opcache.max_accelerated_files=4000';   echo 'opcache.revalidate_freq=60';   echo 'opcache.fast_shutdown=1';   echo 'opcache.enable_cli=1';  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
curl -fSL "https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz" -o drupal.tar.gz  && echo "${DRUPAL_MD5} *drupal.tar.gz" | md5sum -c -  && tar -xz --strip-components=1 -f drupal.tar.gz  && rm drupal.tar.gz  && chown -R www-data:www-data sites modules themes
Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...';  $tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2';  if (Test-Path $tls12RegBase) { throw ('"{0}" already exists!' -f $tls12RegBase) };  New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force;  New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force;  New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
Write-Host ('Downloading {0} ...' -f $env:JAVA_URL);  Invoke-WebRequest -Uri $env:JAVA_URL -OutFile 'openjdk.zip';  Write-Host ('Verifying sha256 ({0}) ...' -f $env:JAVA_SHA256);  if ((Get-FileHash openjdk.zip -Algorithm sha256).Hash -ne $env:JAVA_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Verifying install ...';  Write-Host '  java --version'; java --version;  Write-Host '  javac --version'; javac --version;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Complete.'
mkdir -p /usr/local/etc  && {   echo 'install: --no-document';   echo 'update: --no-document';  } >> /usr/local/etc/gemrc
set -ex   && buildDeps='   bison   dpkg-dev   libgdbm-dev   ruby  '  && apt-get update  && apt-get install -y --no-install-recommends $buildDeps  && rm -rf /var/lib/apt/lists/*   && wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"  && echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c -   && mkdir -p /usr/src/ruby  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1  && rm ruby.tar.xz   && cd /usr/src/ruby   && {   echo '#define ENABLE_PATH_CHECK 0';   echo;   cat file.c;  } > file.c.new  && mv file.c.new file.c   && autoconf  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --disable-install-doc   --enable-shared  && make -j "$(nproc)"  && make install   && apt-get purge -y --auto-remove $buildDeps  && cd /  && rm -r /usr/src/ruby  && ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))'  && gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/  && ruby --version && gem --version && bundle --version
mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
set -eux;  yum install -y   gzip   tar     freetype fontconfig  ;  rm -rf /var/cache/yum
set -eux;   curl -fL -o /openjdk.tgz "$JAVA_URL";  echo "$JAVA_SHA256 */openjdk.tgz" | sha256sum -c -;  mkdir -p "$JAVA_HOME";  tar --extract --file /openjdk.tgz --directory "$JAVA_HOME" --strip-components 1;  rm /openjdk.tgz;   ln -sfT "$JAVA_HOME" /usr/java/default;  ln -sfT "$JAVA_HOME" /usr/java/latest;  for bin in "$JAVA_HOME/bin/"*; do   base="$(basename "$bin")";   [ ! -e "/usr/bin/$base" ];   alternatives --install "/usr/bin/$base" "$base" "$bin" 20000;  done;   java -Xshare:dump;   java --version;  javac --version
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   libnsl-dev   libtirpc-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   util-linux-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libonig-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/%%DEBIAN_SUITE%%/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   pecl update-channels;  rm -rf /tmp/pear ~/.pearrc;  php --version
docker-php-ext-enable sodium
$newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH);  Write-Host ('Updating PATH: {0}' -f $newPath);  setx /M PATH $newPath
$url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION);  Write-Host ('Downloading {0} ...' -f $url);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip';   Write-Host 'Expanding ...';  New-Item -ItemType Directory -Path C:\temp | Out-Null;  Expand-Archive openjdk.zip -DestinationPath C:\temp;  Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME;  Remove-Item C:\temp;   Write-Host 'Removing ...';  Remove-Item openjdk.zip -Force;   Write-Host 'Verifying install ...';  Write-Host '  java -version'; java -version;   Write-Host 'Complete.'
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
apt-get update && apt-get install -y --no-install-recommends   bzr   git   mercurial   openssh-client   subversion     procps  && rm -rf /var/lib/apt/lists/*
apk add --no-cache ca-certificates
set -ex  && apk add --no-cache --virtual .fetch-deps   gnupg   tar   xz   && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"  && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"  && export GNUPGHOME="$(mktemp -d)"  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"  && gpg --batch --verify python.tar.xz.asc python.tar.xz  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; }  && rm -rf "$GNUPGHOME" python.tar.xz.asc  && mkdir -p /usr/src/python  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz  && rm python.tar.xz   && apk add --no-cache --virtual .build-deps    bzip2-dev   coreutils   dpkg-dev dpkg   expat-dev   findutils   gcc   gdbm-dev   libc-dev   libffi-dev   linux-headers   make   ncurses-dev   openssl-dev   pax-utils   readline-dev   sqlite-dev   tcl-dev   tk   tk-dev   xz-dev   zlib-dev  && apk del .fetch-deps   && cd /usr/src/python  && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"  && ./configure   --build="$gnuArch"   --enable-loadable-sqlite-extensions   --enable-shared   --with-system-expat   --with-system-ffi   --without-ensurepip  && make -j "$(nproc)"   EXTRA_CFLAGS="-DTHREAD_STACK_SIZE=0x100000"  && make install   && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';'   | tr ',' '\n'   | sort -u   | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }'   | xargs -rt apk add --no-cache --virtual .python-rundeps  && apk del .build-deps   && find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +  && rm -rf /usr/src/python   && python3 --version
cd /usr/local/bin  && ln -s idle3 idle  && ln -s pydoc3 pydoc  && ln -s python3 python  && ln -s python3-config python-config
set -ex;   wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py';   python get-pip.py   --disable-pip-version-check   --no-cache-dir   "pip==$PYTHON_PIP_VERSION"  ;  pip --version;   find /usr/local -depth   \(    \( -type d -a \( -name test -o -name tests \) \)    -o    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)   \) -exec rm -rf '{}' +;  rm -f get-pip.py
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   gosu  ;  rm -rf /var/lib/apt/lists/*;  gosu nobody true
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   autoconf   ca-certificates   dpkg-dev   gcc   gnupg   libncurses5-dev   make   wget  ;  rm -rf /var/lib/apt/lists/*;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum --check --strict -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  debMultiarch="$(dpkg-architecture --query DEB_HOST_MULTIARCH)";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR" --libdir="lib/$debMultiarch";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  echo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf;  ldconfig;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --progress dot:giga --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum --check --strict -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  groupadd --gid 999 --system rabbitmq;  useradd --uid 999 --system --home-dir "$RABBITMQ_DATA_DIR" --gid rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   ca-certificates   gnupg   wget   xz-utils  ;  rm -rf /var/lib/apt/lists/*;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  gosu rabbitmq rabbitmqctl help;  gosu rabbitmq rabbitmqctl list_ciphers;  gosu rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
apt-get update && apt-get install -y --no-install-recommends   g++   gcc   libc6-dev   make   pkg-config  && rm -rf /var/lib/apt/lists/*
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "${dpkgArch##*-}" in   amd64) goRelArch='linux-amd64'; goRelSha256='dbcf71a3c1ea53b8d54ef1b48c85a39a6c9a935d01fc8291ff2b92028e59913c' ;;   armhf) goRelArch='linux-armv6l'; goRelSha256='0708fbc125e7b782b44d450f3a3864859419b3691121ad401f1b9f00e488bddb' ;;   arm64) goRelArch='linux-arm64'; goRelSha256='8f4e3909c74b4f3f3956715f32419b28d32a4ad57dbd79f74b7a8a920b21a1a3' ;;   i386) goRelArch='linux-386'; goRelSha256='7aaf25164a9ab5e1005c15535ed16ee122df50ac192c2d79b7940315c2b74f2c' ;;   ppc64el) goRelArch='linux-ppc64le'; goRelSha256='67eacb68c1e251c1428e588776c5a02e287a508e3d44f940d31d8ff5d57f0eef' ;;   s390x) goRelArch='linux-s390x'; goRelSha256='c14baa10b87a38e56f28a176fae8a839e9052b0e691bdc0461677d4bcedea9aa' ;;   *) goRelArch='src'; goRelSha256='c96c5ccc7455638ae1a8b7498a030fe653731c8391c5f8e79590bce72f92b4ca';    echo >&2; echo >&2 "warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source"; echo >&2 ;;  esac;   url="https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz";  wget -O go.tgz "$url";  echo "${goRelSha256} *go.tgz" | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   if [ "$goRelArch" = 'src' ]; then   echo >&2;   echo >&2 'error: UNIMPLEMENTED';   echo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)';   echo >&2;   exit 1;  fi;   export PATH="/usr/local/go/bin:$PATH";  go version
mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
mkdir -p "$CATALINA_HOME"
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;   apt-get install -y --no-install-recommends gnupg dirmngr;   export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;   apt-get install -y --no-install-recommends wget ca-certificates;   success=;  for url in $TOMCAT_TGZ_URLS; do   if wget -O tomcat.tar.gz "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   echo "$TOMCAT_SHA512 *tomcat.tar.gz" | sha512sum --strict --check -;   success=;  for url in $TOMCAT_ASC_URLS; do   if wget -O tomcat.tar.gz.asc "$url"; then    success=1;    break;   fi;  done;  [ -n "$success" ];   gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz;  tar -xvf tomcat.tar.gz --strip-components=1;  rm bin/*.bat;  rm tomcat.tar.gz*;  command -v gpgconf && gpgconf --kill all || :;  rm -rf "$GNUPGHOME";   nativeBuildDir="$(mktemp -d)";  tar -xvf bin/tomcat-native.tar.gz -C "$nativeBuildDir" --strip-components=1;  apt-get install -y --no-install-recommends   dpkg-dev   gcc   libapr1-dev   libssl-dev   make  ;  (   export CATALINA_HOME="$PWD";   cd "$nativeBuildDir/native";   gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";   aprConfig="$(which apr-1-config)";   ./configure    --build="$gnuArch"    --libdir="$TOMCAT_NATIVE_LIBDIR"    --prefix="$CATALINA_HOME"    --with-apr="$aprConfig"    --with-java-home="$JAVA_HOME"    --with-ssl=yes;   make -j "$(nproc)";   make install;  );  rm -rf "$nativeBuildDir";  rm bin/tomcat-native.tar.gz;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  find "$TOMCAT_NATIVE_LIBDIR" -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;  rm -rf /var/lib/apt/lists/*;   find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +;   chmod -R +rX .;  chmod 777 logs work
set -e  && nativeLines="$(catalina.sh configtest 2>&1)"  && nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"  && nativeLines="$(echo "$nativeLines" | sort -u)"  && if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then   echo >&2 "$nativeLines";   exit 1;  fi
rabbitmq-plugins enable --offline rabbitmq_management
set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  apt-get update; apt-get install -y --no-install-recommends python; rm -rf /var/lib/apt/lists/*;  rabbitmqadmin --version
set -x   && savedAptMark="$(apt-mark showmanual)"  && apt-get update && apt-get install -y --no-install-recommends   ca-certificates   gcc   libc6-dev   liblua5.3-dev   libpcre2-dev   libssl-dev   make   wget   zlib1g-dev  && rm -rf /var/lib/apt/lists/*   && wget -O haproxy.tar.gz "$HAPROXY_URL"  && echo "$HAPROXY_SHA256 *haproxy.tar.gz" | sha256sum -c  && mkdir -p /usr/src/haproxy  && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1  && rm haproxy.tar.gz   && makeOpts='   TARGET=linux2628   USE_LUA=1 LUA_INC=/usr/include/lua5.3   USE_GETADDRINFO=1   USE_OPENSSL=1   USE_PCRE2=1 USE_PCRE2_JIT=1   USE_ZLIB=1  '  && make -C /usr/src/haproxy -j "$(nproc)" all $makeOpts  && make -C /usr/src/haproxy install-bin $makeOpts   && mkdir -p /usr/local/etc/haproxy  && cp -R /usr/src/haproxy/examples/errorfiles /usr/local/etc/haproxy/errors  && rm -rf /usr/src/haproxy   && apt-mark auto '.*' > /dev/null  && { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; }  && find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   gosu  ;  rm -rf /var/lib/apt/lists/*;  gosu nobody true
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   autoconf   ca-certificates   dpkg-dev   gcc   gnupg   libncurses5-dev   make   wget  ;  rm -rf /var/lib/apt/lists/*;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum --check --strict -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  debMultiarch="$(dpkg-architecture --query DEB_HOST_MULTIARCH)";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config --openssldir="$OPENSSL_CONFIG_DIR" --libdir="lib/$debMultiarch";  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  echo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf;  ldconfig;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --progress dot:giga --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum --check --strict -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
set -eux;  groupadd --gid 999 --system rabbitmq;  useradd --uid 999 --system --home-dir "$RABBITMQ_DATA_DIR" --gid rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   ca-certificates   gnupg   wget   xz-utils  ;  rm -rf /var/lib/apt/lists/*;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  gosu rabbitmq rabbitmqctl help;  gosu rabbitmq rabbitmqctl list_ciphers;  gosu rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
ln -sf /opt/rabbitmq/plugins /plugins
set -eux;  {   echo 'Package: php*';   echo 'Pin: release *';   echo 'Pin-Priority: -1';  } > /etc/apt/preferences.d/no-debian-php
apt-get update && apt-get install -y   $PHPIZE_DEPS   ca-certificates   curl   xz-utils  --no-install-recommends && rm -r /var/lib/apt/lists/*
set -eux;  mkdir -p "$PHP_INI_DIR/conf.d";  [ ! -d /var/www/html ];  mkdir -p /var/www/html;  chown www-data:www-data /var/www/html;  chmod 777 /var/www/html
set -xe;   fetchDeps='   wget  ';  if ! command -v gpg > /dev/null; then   fetchDeps="$fetchDeps    dirmngr    gnupg   ";  fi;  apt-get update;  apt-get install -y --no-install-recommends $fetchDeps;  rm -rf /var/lib/apt/lists/*;   mkdir -p /usr/src;  cd /usr/src;   wget -O php.tar.xz "$PHP_URL";   if [ -n "$PHP_SHA256" ]; then   echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -;  fi;  if [ -n "$PHP_MD5" ]; then   echo "$PHP_MD5 *php.tar.xz" | md5sum -c -;  fi;   if [ -n "$PHP_ASC_URL" ]; then   wget -O php.tar.xz.asc "$PHP_ASC_URL";   export GNUPGHOME="$(mktemp -d)";   for key in $GPG_KEYS; do    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";   done;   gpg --batch --verify php.tar.xz.asc php.tar.xz;   command -v gpgconf > /dev/null && gpgconf --kill all;   rm -rf "$GNUPGHOME";  fi;   apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps
set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   libcurl4-openssl-dev   libedit-dev   libonig-dev   libsodium-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev   ${PHP_EXTRA_BUILD_DEPS:-}  ;  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list;  {   echo 'Package: *';   echo 'Pin: release n=buster';   echo 'Pin-Priority: -10';   echo;   echo 'Package: libargon2*';   echo 'Pin: release n=buster';   echo 'Pin-Priority: 990';  } > /etc/apt/preferences.d/argon2-buster;  apt-get update;  apt-get install -y --no-install-recommends libargon2-dev;  rm -rf /var/lib/apt/lists/*;   export   CFLAGS="$PHP_CFLAGS"   CPPFLAGS="$PHP_CPPFLAGS"   LDFLAGS="$PHP_LDFLAGS"  ;  docker-php-source extract;  cd /usr/src/php;  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)";  if [ ! -d /usr/include/curl ]; then   ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl;  fi;  ./configure   --build="$gnuArch"   --with-config-file-path="$PHP_INI_DIR"   --with-config-file-scan-dir="$PHP_INI_DIR/conf.d"     --enable-option-checking=fatal     --with-mhash     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2   --with-sodium=shared     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir="lib/$debMultiarch"     ${PHP_EXTRA_CONFIGURE_ARGS:-}  ;  make -j "$(nproc)";  find -type f -name '*.a' -delete;  make install;  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true;  make clean;   cp -v php.ini-* "$PHP_INI_DIR/";   cd /;  docker-php-source delete;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   php --version
docker-php-ext-enable sodium
Write-Host ('Downloading {0} ...' -f $env:MONGO_DOWNLOAD_URL);  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  (New-Object System.Net.WebClient).DownloadFile($env:MONGO_DOWNLOAD_URL, 'mongo.msi');   Write-Host ('Verifying sha256 ({0}) ...' -f $env:MONGO_DOWNLOAD_SHA256);  if ((Get-FileHash mongo.msi -Algorithm sha256).Hash -ne $env:MONGO_DOWNLOAD_SHA256) {   Write-Host 'FAILED!';   exit 1;  };   Write-Host 'Installing ...';  Start-Process msiexec -Wait   -ArgumentList @(    '/i',    'mongo.msi',    '/quiet',    '/qn',    'INSTALLLOCATION=C:\mongodb',    'ADDLOCAL=all'   );  $env:PATH = 'C:\mongodb\bin;' + $env:PATH;  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine);   Write-Host 'Verifying install ...';  Write-Host '  mongo --version'; mongo --version;  Write-Host '  mongod --version'; mongod --version;   Write-Host 'Removing ...';  Remove-Item C:\mongodb\bin\*.pdb -Force;  Remove-Item C:\windows\installer\*.msi -Force;  Remove-Item mongo.msi -Force;   Write-Host 'Complete.';
set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates p11-kit  ;  rm -rf /var/lib/apt/lists/*
{ echo '#/bin/sh'; echo 'echo "$JAVA_HOME"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ "$JAVA_HOME" = "$(docker-java-home)" ]
set -eux;   dpkgArch="$(dpkg --print-architecture)";  case "$dpkgArch" in   amd64) upstreamArch='x64' ;;   arm64) upstreamArch='aarch64' ;;   *) echo >&2 "error: unsupported architecture: $dpkgArch" ;;  esac;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   dirmngr   gnupg   wget  ;  rm -rf /var/lib/apt/lists/*;   wget -O openjdk.tgz.asc "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign";  wget -O openjdk.tgz "${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz" --progress=dot:giga;   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F;  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671;  gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley';  gpg --batch --verify openjdk.tgz.asc openjdk.tgz;  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$JAVA_HOME";  tar --extract   --file openjdk.tgz   --directory "$JAVA_HOME"   --strip-components 1   --no-same-owner  ;  rm openjdk.tgz*;    apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   {   echo '#!/usr/bin/env bash';   echo 'set -Eeuo pipefail';   echo 'if ! [ -d "$JAVA_HOME" ]; then echo >&2 "error: missing JAVA_HOME environment variable"; exit 1; fi';   echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done';   echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi';   echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"';  } > /etc/ca-certificates/update.d/docker-openjdk;  chmod +x /etc/ca-certificates/update.d/docker-openjdk;  /etc/ca-certificates/update.d/docker-openjdk;   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf;  ldconfig;   java -version
apt-get update && apt-get install -y --no-install-recommends   fontconfig-config   fonts-dejavu-core   geoip-database   init-system-helpers   libarchive-extract-perl   libexpat1   libfontconfig1   libfreetype6   libgcrypt11   libgd3   libgdbm3   libgeoip1   libgpg-error0   libjbig0   libjpeg8   liblog-message-perl   liblog-message-simple-perl   libmodule-pluggable-perl   libpng12-0   libpod-latex-perl   libssl1.0.0   libterm-ui-perl   libtext-soundex-perl   libtiff5   libvpx1   libx11-6   libx11-data   libxau6   libxcb1   libxdmcp6   libxml2   libxpm4   libxslt1.1   perl   perl-modules   rename   sgml-base   ucf   xml-core  && rm -rf /var/lib/apt/lists/*
gpg --keyserver pgp.mit.edu --recv-key  A09CD539B8BB8CBE96E82BDFABD4D3B3F5806B4D  4C2C85E705DC730833990C38A9376139A524C53E  B0F4253373F8F6F510D42178520A9993A1C052F8  65506C02EFC250F1B7A3D694ECF0E90B2C172083  7338973069ED3F443F4D37DFA64FD5B17ADB39A8  6E067260B83DCF2CA93C566F518509686C7E5E82  573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62
buildDeps="   ca-certificates   curl   gcc   libc-dev-bin   libc6-dev   libexpat1-dev   libfontconfig1-dev   libfreetype6-dev   libgd-dev   libgd2-dev   libgeoip-dev   libice-dev   libjbig-dev   libjpeg8-dev   liblzma-dev   libpcre3-dev   libperl-dev   libpng12-dev   libpthread-stubs0-dev   libsm-dev   libssl-dev   libssl-dev   libtiff5-dev   libvpx-dev   libx11-dev   libxau-dev   libxcb1-dev   libxdmcp-dev   libxml2-dev   libxpm-dev   libxslt1-dev   libxt-dev   linux-libc-dev   make   manpages-dev   x11proto-core-dev   x11proto-input-dev   x11proto-kb-dev   xtrans-dev   zlib1g-dev  ";  apt-get update && apt-get install -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/*  && curl -SL "http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz" -o nginx.tar.gz  && curl -SL "http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc" -o nginx.tar.gz.asc  && gpg --verify nginx.tar.gz.asc  && mkdir -p /usr/src/nginx  && tar -xvf nginx.tar.gz -C /usr/src/nginx --strip-components=1  && rm nginx.tar.gz*  && cd /usr/src/nginx  && ./configure   --user=www-data   --group=www-data   --prefix=/usr/local/nginx   --conf-path=/etc/nginx.conf   --http-log-path=/proc/self/fd/1   --error-log-path=/proc/self/fd/2   --with-http_addition_module   --with-http_auth_request_module   --with-http_dav_module   --with-http_geoip_module   --with-http_gzip_static_module   --with-http_image_filter_module   --with-http_perl_module   --with-http_realip_module   --with-http_spdy_module   --with-http_ssl_module   --with-http_stub_status_module   --with-http_sub_module   --with-http_xslt_module   --with-ipv6   --with-mail   --with-mail_ssl_module   --with-pcre-jit  && make -j"$(nproc)"  && make install  && cd /  && rm -r /usr/src/nginx  && chown -R www-data:www-data /usr/local/nginx  && {   echo;   echo '# stay in the foreground so Docker has a process to track';   echo 'daemon off;';  } >> /etc/nginx.conf  && apt-get purge -y --auto-remove $buildDeps
